{"version":3,"sources":["navbar.js","api/baseurl.js","api/apiManager.js","forms/entryForm.js","forms/entryEditForm.js","reports/routeGraph.js","reports/allRoutesGraph.js","reports/allPlacesGraph.js","reports/routeReport.js","reports/assignmentFinder.js","reports/log.js","eventTranspoTracker.js","forms/dateForm.js","forms/shuttleForm.js","forms/routeForm.js","forms/placeForm.js","forms/driverForm.js","forms/driverEditForm.js","forms/vehicleForm.js","forms/vehicleEditForm.js","forms/assignmentForm.js","forms/assignmentAddForm.js","forms/assignmentEditForm.js","forms/editStaffForm.js","drivers/staffList.js","routeView/assignmentCard.js","routeView/routeCard.js","routeView/routeView.js","drivers/driverList.js","eventTranspoManager.js","auth/login.js","auth/register.js","appViews.js","index.js"],"names":["NavBar","props","hasUser","clearUser","mode","handleModeChange","React","useState","anchorEl","setAnchorEl","handleClickListItem","event","currentTarget","handleClose","to","style","textDecoration","className","onClick","Navbar","align","fontSize","color","aria-haspopup","aria-controls","Menu","id","keepMounted","open","Boolean","onClose","MenuItem","isSupervisor","isStaff","exact","path","render","baseurl","type","fetch","then","r","json","param","dateId","routeId","driverId","obj","method","headers","Accept","Authorization","window","sessionStorage","getItem","body","JSON","stringify","userToPost","result","userToLogin","EntryForm","places","routes","shuttles","dates","chosenPlaceId","chosenRoute","chosenShuttleId","chosenDateId","handleChosenPlaceChange","handleChosenRouteChange","handleChosenShuttleChange","handleChosenDateChange","attendee_count","vehicle_number","time","moment","format","entry","setEntry","place_id","shuttle_id","isChecked","setIsChecked","today","find","each","date","undefined","date_id","handleEntryChange","e","stateToChange","target","value","Typography","component","variant","onSubmit","preventDefault","setTimeout","apiManager","document","getElementById","alert","Grid","container","spacing","item","xs","md","InputLabel","Select","native","onChange","fullWidth","required","aria-label","data-name","map","shuttle","key","parseInt","name","route","description","place","htmlFor","TextField","FormControlLabel","control","Checkbox","checked","label","Button","EntryEditForm","setPlaces","useEffect","match","params","entryId","sort","a","b","localeCompare","editedEntry","user_id","history","push","RouteGraph","entries","filteredEntries","accumulated","xRange","timeSpanIntervals","totalAttendeeCount","length","reduce","accumulator","runningTotal","data","labels","v","datasets","backgroundColor","borderColor","x","y","getAttendeeCountOrMakeZero","options","responsive","legend","display","scales","xAxes","ticks","maxTicksLimit","yAxes","AllRoutesGraph","times","counts","yMax","routeEntries","filter","z","includes","isolated","i","holder","forEach","hasOwnProperty","prop","routeName","slice","borderWidth","suggestedMax","isNaN","padding","AllPlacesGraph","placeEntries","classList","remove","marginTop","RouteReport","chosenShuttleName","chosenDateName","allEntries","getEntries","each1","each4","entryRoutes","entryPlaces","placeNames","isolatedAll","isolatedRoutes","isolatedPlaces","holderAll","holderRoutes","holderPlaces","accumulatedAll","accumulatedRoutes","accumulatedPlaces","xMin","xMax","xRangeSmallGraphs","j","yMaxRoutes","yMaxPlaces","Math","max","apply","o","setMode","marginBottom","AssignmentFinder","assignments","setAssignments","filteredAssignments","vehicle","number","vehNum","TableContainer","Table","size","TableHead","TableRow","TableCell","TableBody","assignment","company","driver","phone_number","Log","chosenPlaceName","searchField","setSearchField","c","d","toString","user","first_name","toLowerCase","last_name","f","g","h","sortField","setSortField","editIconStyle","paddingBottom","arrow","setArrow","fontWeight","onMouseEnter","onMouseLeave","scope","confirm","EventTranspoTracker","DateForm","getDates","setDate","ShuttleForm","getShuttles","setShuttle","RouteForm","getRoutes","setRoute","handleRouteChange","PlaceForm","getPlaces","setPlace","setChosenRoute","route_id","DriverForm","notes","setDriver","handleDriverChange","allDrivers","isLocal","driverA","setDriverId","DriverEditForm","area","area_id","console","log","editedDriver","vehicleId","VehicleForm","kind","capacity","setVehicle","handleVehicleChange","allVehicles","isAda","vehicleA","setVehicleId","VehicleEditForm","editedVehicle","AssignmentForm","chosenDate","start_time","end_time","vehicle_id","driver_id","setAssignment","setDates","setRoutes","drivers","setDrivers","vehicles","setVehicles","handleAssignmentChange","AssignmentAddForm","AssignmentEditForm","driverName","assignId","assignmentId","editedAssignment","StaffEditForm","is_staff","staff","setStaff","userId","handleStaffChange","editedStaff","last_login","username","email","date_joined","StaffList","users","setUsers","is_superuser","AssignmentCard","removeAssignment","RouteCard","routeColor","routeBorder","RouteView","filteredRoutes","DriverList","each2","totalDriverCount","EventTranspoManager","Login","password","formData","setFormData","handleFieldChange","evt","Container","maxWidth","setUserToken","findSupervisor","CssBaseline","noValidate","margin","autoComplete","autoFocus","Register","firstName","lastName","errors","trim","newItem","element","toUpperCase","join","catch","sm","justify","AppViews","isAuthenticated","setHasUser","setIsSupervisor","setIsStaff","resp","setItem","token","setShuttles","setEntries","setChosenDateId","setChosenDateName","setChosenShuttleId","setChosenShuttleName","setChosenPlaceId","setChosenPlaceName","selectedIndex","dataset","clear","ReactDOM"],"mappings":"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","file":"static/js/main.806e9218.chunk.js","sourcesContent":["import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { Navbar } from \"reactstrap\";\nimport { Link } from \"react-router-dom\";\nimport BarChartIcon from \"@material-ui/icons/BarChart\";\nimport ListIcon from \"@material-ui/icons/List\";\nimport PlaylistAddIcon from \"@material-ui/icons/PlaylistAdd\";\nimport PersonAddIcon from \"@material-ui/icons/PersonAdd\";\nimport ViewColumnIcon from \"@material-ui/icons/ViewColumn\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Menu from \"@material-ui/core/Menu\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\n\nconst NavBar = (props) => {\n  const hasUser = props.hasUser;\n  const clearUser = props.clearUser;\n  const mode = props.mode;\n  const handleModeChange = props.handleModeChange;\n\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  const handleClickListItem = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <>\n      {hasUser ? (\n        <>\n          <Link to=\"/\" style={{ textDecoration: \"none\" }}>\n            {mode === false ? (\n              <span className=\"nav-header\" onClick={handleModeChange}>\n                Switch to Manager\n              </span>\n            ) : (\n              <span className=\"nav-header\" onClick={handleModeChange}>\n                Switch to Tracker\n              </span>\n            )}\n          </Link>\n          <Navbar align=\"right\">\n            {mode === false ? (\n              <>\n                <span className=\"nav-icon\">\n                  <Link to=\"/log\">\n                    <ListIcon\n                      style={{ fontSize: 30 }}\n                      color=\"action\"\n                      className=\"navbar-icon\"\n                    />\n                  </Link>\n                </span>\n                <span className=\"nav-icon\">\n                  <Link to=\"/graph\">\n                    <BarChartIcon\n                      style={{ fontSize: 30 }}\n                      color=\"action\"\n                      className=\"navbar-icon\"\n                    />\n                  </Link>\n                </span>\n                <span className=\"nav-icon\">\n                  <Link to=\"/entry/form\">\n                    <PlaylistAddIcon\n                      style={{ fontSize: 30 }}\n                      color=\"action\"\n                      className=\"navbar-icon\"\n                    />\n                  </Link>\n                </span>\n                <span className=\"nav-icon\">\n                  <ArrowDownwardIcon\n                    style={{ fontSize: 30 }}\n                    color=\"action\"\n                    aria-haspopup=\"true\"\n                    aria-controls=\"lock-menu\"\n                    onClick={handleClickListItem}\n                  />\n                  <Menu\n                    id=\"lock-menu\"\n                    anchorEl={anchorEl}\n                    keepMounted\n                    open={Boolean(anchorEl)}\n                    onClose={handleClose}\n                  >\n                    <MenuItem onClick={handleClose}>\n                      <Link\n                        to=\"/login\"\n                        onClick={clearUser}\n                        style={{ textDecoration: \"none\" }}\n                      >\n                        Logout\n                      </Link>\n                    </MenuItem>\n                  </Menu>\n                </span>\n              </>\n            ) : (\n              <>\n                <span className=\"nav-icon\">\n                  <Link to=\"/driver/list\">\n                    <ListIcon\n                      style={{ fontSize: 30 }}\n                      color=\"action\"\n                      className=\"navbar-icon\"\n                    />\n                  </Link>\n                </span>\n                <span className=\"nav-icon\">\n                  <Link to=\"/route/view\">\n                    <ViewColumnIcon\n                      style={{ fontSize: 30 }}\n                      color=\"action\"\n                      className=\"navbar-icon\"\n                    />\n                  </Link>\n                </span>\n                {props.isSupervisor === true || props.isStaff === true ? (\n                  <span className=\"nav-icon\">\n                    <Link to=\"/driver/form\">\n                      <PersonAddIcon\n                        style={{ fontSize: 30 }}\n                        color=\"action\"\n                        className=\"navbar-icon\"\n                      />\n                    </Link>\n                  </span>\n                ) : null}\n                <span className=\"nav-icon\">\n                  <ArrowDownwardIcon\n                    style={{ fontSize: 30 }}\n                    color=\"action\"\n                    aria-haspopup=\"true\"\n                    aria-controls=\"lock-menu\"\n                    onClick={handleClickListItem}\n                  />\n                  <Menu\n                    id=\"lock-menu\"\n                    anchorEl={anchorEl}\n                    keepMounted\n                    open={Boolean(anchorEl)}\n                    onClose={handleClose}\n                  >\n                    {props.isSupervisor === true || props.isStaff === true ? (\n                      <div>\n                        <MenuItem onClick={handleClose}>\n                          <Link\n                            to=\"/date/form\"\n                            style={{ textDecoration: \"none\" }}\n                          >\n                            Add Date\n                          </Link>\n                        </MenuItem>\n                        <MenuItem onClick={handleClose}>\n                          <Link\n                            to=\"/shuttle/form\"\n                            style={{ textDecoration: \"none\" }}\n                          >\n                            Add Shuttle\n                          </Link>\n                        </MenuItem>\n                        <MenuItem onClick={handleClose}>\n                          <Link\n                            to=\"/route/form\"\n                            style={{ textDecoration: \"none\" }}\n                          >\n                            Add Route\n                          </Link>\n                        </MenuItem>\n                        <MenuItem onClick={handleClose}>\n                          <Link\n                            to=\"/location/form\"\n                            style={{ textDecoration: \"none\" }}\n                          >\n                            Add Location\n                          </Link>\n                        </MenuItem>\n                        <MenuItem onClick={handleClose}>\n                          <Link\n                            to=\"/vehicle/form\"\n                            style={{ textDecoration: \"none\" }}\n                          >\n                            Add Vehicle\n                          </Link>\n                        </MenuItem>\n                        <MenuItem onClick={handleClose}>\n                          <Link\n                            to=\"/staff/list\"\n                            style={{ textDecoration: \"none\" }}\n                          >\n                            Staff List\n                          </Link>\n                        </MenuItem>\n                        <MenuItem onClick={handleClose}>\n                          <Link\n                            to=\"/login\"\n                            onClick={clearUser}\n                            style={{ textDecoration: \"none\" }}\n                          >\n                            Logout\n                          </Link>\n                        </MenuItem>\n                      </div>\n                    ) : (\n                      <MenuItem onClick={handleClose}>\n                        <Link\n                          to=\"/login\"\n                          onClick={clearUser}\n                          style={{ textDecoration: \"none\" }}\n                        >\n                          Logout\n                        </Link>\n                      </MenuItem>\n                    )}\n                  </Menu>\n                </span>\n              </>\n            )}\n          </Navbar>\n        </>\n      ) : (\n        <Route exact path=\"/\" render={() => <Redirect to=\"/login\" />} />\n      )}\n    </>\n  );\n};\n\nexport default NavBar;\n","const baseurl = \"http://localhost:8000\"\n\nexport default baseurl","import baseurl from \"./baseurl\";\n\nexport default {\n  getAllType(type) {\n    return fetch(`${baseurl}/${type}`).then((r) => r.json());\n  },\n  getSingleType(type, id) {\n    return fetch(`${baseurl}/${type}/${id}`).then((r) => r.json());\n  },\n  getTypeByParam(type, param, id) {\n    return fetch(`${baseurl}/${type}?${param}=${id}`).then((r) => r.json());\n  },\n  getAssignmentsByDateRoute(dateId, routeId) {\n    return fetch(\n      `${baseurl}/assignments?dateID=${dateId}&routeID=${routeId}`\n    ).then((r) => r.json());\n  },\n  getAssignmentsByDateDriver(dateId, driverId) {\n    return fetch(\n      `${baseurl}/assignments?dateID=${dateId}&driverID=${driverId}`\n    ).then((r) => r.json());\n  },\n  postType(type, obj) {\n    return fetch(`${baseurl}/${type}`, {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `Token ${window.sessionStorage.getItem(\"token\")}`,\n      },\n      body: JSON.stringify(obj),\n    }).then((r) => r.json());\n  },\n  updateType(type, obj) {\n    return fetch(`${baseurl}/${type}/${obj.id}`, {\n      method: \"PUT\",\n      headers: {\n        \"content-type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `Token ${window.sessionStorage.getItem(\"token\")}`,\n      },\n      body: JSON.stringify(obj),\n    });\n  },\n  deleteTypeWithId(type, id) {\n    return fetch(`${baseurl}/${type}/${id}`, {\n      method: \"DELETE\",\n    });\n  },\n  register(userToPost) {\n    return fetch(`${baseurl}/register/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(userToPost),\n    }).then((result) => result.json());\n  },\n  login(userToLogin) {\n    return fetch(`${baseurl}/login/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(userToLogin),\n    }).then((result) => result.json());\n  },\n};\n","import React, { useState } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport Typography from \"@material-ui/core/Typography\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\n// import FormControl from \"@material-ui/core/FormControl\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\n// import MenuItem from \"@material-ui/core/MenuItem\";\nimport apiManager from \"../api/apiManager\";\nimport moment from \"moment\";\n\n// \"places\" and \"shuttles\" fill the dropdowns, both \"handle...change\"s change the 3 \"chosen\"s (route dependent upon place work together)\nconst EntryForm = (props) => {\n  const places = props.places;\n  const routes = props.routes;\n  const shuttles = props.shuttles;\n  const dates = props.dates;\n  const chosenPlaceId = props.chosenPlaceId;\n  const chosenRoute = props.chosenRoute;\n  const chosenShuttleId = props.chosenShuttleId;\n  const chosenDateId = props.chosenDateId;\n  const handleChosenPlaceChange = props.handleChosenPlaceChange;\n  const handleChosenRouteChange = props.handleChosenRouteChange;\n  const handleChosenShuttleChange = props.handleChosenShuttleChange;\n  const handleChosenDateChange = props.handleChosenDateChange;\n  const [entry, setEntry] = useState({\n    attendee_count: \"\",\n    vehicle_number: \"\",\n    time: moment().format(\"HH:mm\"),\n  });\n\n  // set values for entry from state from dropdowns, which carry over from form to log and back without changing until user chooses new\n  entry.place_id = chosenPlaceId;\n  entry.shuttle_id = chosenShuttleId;\n\n  var [isChecked, setIsChecked] = useState(false);\n  const handleIsCheckedChange = () => {\n    setIsChecked(!isChecked);\n  };\n\n  const today = dates.find(\n    (each) => each.date === moment().format(\"YYYY-MM-DD\")\n  );\n  if (today !== undefined) {\n    entry.date_id = today.id;\n  } else {\n    isChecked = true;\n  }\n\n  // update state of entry upon form field change\n  const handleEntryChange = (e) => {\n    const stateToChange = { ...entry };\n    stateToChange[e.target.id] = e.target.value;\n    setEntry(stateToChange);\n  };\n\n  // post entry, reset attendee count and vehicle number to empty \"\", provide user \"success\" alert\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (isChecked === false) {\n      entry.date_id = today.id;\n      entry.time = moment().format(\"HH:mm\");\n    } else {\n      entry.date_id = chosenDateId;\n    }\n    setTimeout(() => {\n      apiManager.postType(\"entries\", entry).then(() => {\n        document.getElementById(\"attendee_count\").value = \"\";\n        document.getElementById(\"vehicle_number\").value = \"\";\n        if (isChecked === true) {\n          document.getElementById(\"time\").value = \"\";\n        }\n        setEntry({\n          attendee_count: \"\",\n          vehicle_number: \"\",\n          time: \"\",\n        });\n      });\n    }, 100);\n    alert(\"Success!\");\n  };\n\n  return (\n    <>\n      <Typography component=\"h1\" variant=\"h5\" className=\"page-header\">\n        Entry Form\n      </Typography>\n      <form className=\"drop-downs\" onSubmit={handleSubmit}>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={3}>\n            <InputLabel>Shuttle:</InputLabel>\n            <Select\n              id=\"shuttle_id\"\n              native\n              onChange={handleChosenShuttleChange}\n              fullWidth\n              required\n              value={chosenShuttleId}\n            >\n              <option aria-label=\"None\" value=\"\" data-name=\"\">\n                Choose Shuttle\n              </option>\n              {shuttles ? (\n                shuttles.map((shuttle) => (\n                  <option\n                    key={shuttle.id}\n                    value={parseInt(shuttle.id)}\n                    data-name={shuttle.name}\n                  >\n                    {shuttle.name}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel>Route:</InputLabel>\n            <Select\n              id=\"routeId\"\n              native\n              onChange={handleChosenRouteChange}\n              fullWidth\n              required\n              value={chosenRoute}\n            >\n              <option aria-label=\"None\" value=\"\">\n                All Routes\n              </option>\n              {routes ? (\n                routes.map((route) => (\n                  <option key={route.id} value={route.name}>\n                    {route.name} {route.description}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel>Location:</InputLabel>\n            <Select\n              id=\"place_id\"\n              native\n              onChange={handleChosenPlaceChange}\n              fullWidth\n              required\n              value={chosenPlaceId}\n            >\n              <option aria-label=\"None\" value=\"\" data-name=\"\">\n                Choose Location\n              </option>\n              {places ? (\n                places.map((place) => (\n                  <option\n                    key={place.id}\n                    value={parseInt(place.id)}\n                    data-name={place.name}\n                  >\n                    {place.name}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel htmlFor=\"age-native-simple\">\n              Attendee Count:{\" \"}\n            </InputLabel>\n            <TextField\n              required\n              type=\"number\"\n              id=\"attendee_count\"\n              fullWidth\n              onChange={handleEntryChange}\n            />\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel htmlFor=\"age-native-simple\">\n              Vehicle Number:{\" \"}\n            </InputLabel>\n            <TextField\n              id=\"vehicle_number\"\n              fullWidth\n              onChange={handleEntryChange}\n            />\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={isChecked}\n                  onChange={handleIsCheckedChange}\n                  color=\"primary\"\n                />\n              }\n              label=\"NOT LIVE? Click if not live to input past date and/or time.\"\n            />\n          </Grid>\n          {isChecked === true ? (\n            <>\n              <Grid item xs={12} md={3}>\n                <InputLabel>Date:</InputLabel>\n                <Select\n                  id=\"date_id\"\n                  native\n                  onChange={handleChosenDateChange}\n                  fullWidth\n                  required\n                  value={chosenDateId}\n                >\n                  <option aria-label=\"None\" value=\"\" data-name=\"\">\n                    Choose Date\n                  </option>\n                  {dates ? (\n                    dates.map((date) => (\n                      <option\n                        key={date.id}\n                        value={date.id}\n                        data-name={date.date}\n                      >\n                        {date.date}\n                      </option>\n                    ))\n                  ) : (\n                    <></>\n                  )}\n                </Select>\n              </Grid>\n              <Grid item xs={12} md={3}>\n                <InputLabel htmlFor=\"age-native-simple\">Time: </InputLabel>\n                <TextField\n                  id=\"time\"\n                  type=\"time\"\n                  fullWidth\n                  required\n                  // value={entry.time}\n                  onChange={handleEntryChange}\n                />\n              </Grid>\n            </>\n          ) : (\n            <></>\n          )}\n        </Grid>\n        <div className=\"submit-button\">\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n            Submit\n          </Button>\n        </div>\n      </form>\n    </>\n  );\n};\n\nexport default EntryForm;\n","import React, { useState, useEffect } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport Typography from \"@material-ui/core/Typography\";\nimport apiManager from \"../api/apiManager\";\n\n// \"places\" and \"shuttles\" fill the dropdowns, both \"handle...change\"s change the 3 \"chosen\"s (route dependent upon location work together)\nconst EntryEditForm = (props) => {\n  const shuttles = props.shuttles;\n  const dates = props.dates;\n  const [entry, setEntry] = useState({\n    attendee_count: \"\",\n    vehicle_number: \"\",\n    time: \"\",\n  });\n\n  const [places, setPlaces] = useState([]);\n\n  // update state of entry upon form field change\n  const handleEntryChange = (e) => {\n    const stateToChange = { ...entry };\n    stateToChange[e.target.id] = e.target.value;\n    setEntry(stateToChange);\n  };\n\n  // get the entry to be edited\n  useEffect(() => {\n    apiManager\n      .getSingleType(\"entries\", props.match.params.entryId)\n      .then((entry) => {\n        setEntry(entry);\n      });\n      apiManager.getAllType(\"places\").then((r) => {\n        r.sort((a, b) => a.name.localeCompare(b.name));\n        setPlaces(r);\n      });\n  }, [props.match.params.entryId]);\n\n  const editedEntry = {\n    id: parseInt(props.match.params.entryId),\n    shuttle_id: entry.shuttle_id,\n    date_id: entry.date_id,\n    place_id: entry.place_id,\n    user_id: entry.user_id,\n    attendee_count: entry.attendee_count,\n    vehicle_number: entry.vehicle_number,\n    time: entry.time,\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    apiManager.updateType(\"entries\", editedEntry).then(() => {\n      props.history.push(\"/log\");\n    });\n  };\n\n  return (\n    <>\n      <div className=\"event-form-page\">\n        <Typography component=\"h1\" variant=\"h5\" className=\"page-header\">\n          Edit Entry\n        </Typography>\n        <form className=\"drop-downs\" onSubmit={handleSubmit}>\n          <Grid container spacing={3}>\n            <Grid item xs={12} md={3}>\n              <InputLabel>Event:</InputLabel>\n              <Select\n                id=\"shuttle_id\"\n                native\n                onChange={handleEntryChange}\n                fullWidth\n                required\n                value={entry.shuttle_id}\n              >\n                {shuttles ? (\n                  shuttles.map((shuttle) => (\n                    <option key={shuttle.id} value={parseInt(shuttle.id)}>\n                      {shuttle.name}\n                    </option>\n                  ))\n                ) : (\n                  <></>\n                )}\n              </Select>\n            </Grid>\n            <Grid item xs={12} md={3}>\n              <InputLabel>Location:</InputLabel>\n              <Select\n                id=\"place_id\"\n                native\n                onChange={handleEntryChange}\n                fullWidth\n                required\n                value={entry.place_id}\n              >\n                <option aria-label=\"None\" value=\"\" data-name=\"\">\n                  Choose Location\n                </option>\n                {places ? (\n                  places.map((place) => (\n                    <option\n                      key={place.id}\n                      value={parseInt(place.id)}\n                      data-name={place.name}\n                    >\n                      {place.name}\n                    </option>\n                  ))\n                ) : (\n                  <></>\n                )}\n              </Select>\n            </Grid>\n            <Grid item xs={12} md={3}>\n              <InputLabel>Date:</InputLabel>\n              <Select\n                id=\"date_id\"\n                native\n                onChange={handleEntryChange}\n                fullWidth\n                required\n                value={entry.date_id}\n              >\n                <option aria-label=\"None\" value=\"\" data-name=\"\">\n                  Choose Date\n                </option>\n                {dates ? (\n                  dates.map((date) => (\n                    <option key={date.id} value={date.id} data-name={date.date}>\n                      {date.date}\n                    </option>\n                  ))\n                ) : (\n                  <></>\n                )}\n              </Select>\n            </Grid>\n            <Grid item xs={12} md={3}>\n              <InputLabel htmlFor=\"age-native-simple\">Time: </InputLabel>\n              <TextField\n                id=\"time\"\n                type=\"time\"\n                fullWidth\n                value={entry.time}\n                onChange={handleEntryChange}\n              />\n            </Grid>\n            <Grid item xs={12} md={3}>\n              <InputLabel htmlFor=\"age-native-simple\">\n                Attendee Count:{\" \"}\n              </InputLabel>\n              <TextField\n                required\n                type=\"number\"\n                id=\"attendee_count\"\n                fullWidth\n                onChange={handleEntryChange}\n                value={entry.attendee_count}\n              />\n            </Grid>\n            <Grid item xs={12} md={3}>\n              <InputLabel htmlFor=\"age-native-simple\">\n                Vehicle Number:{\" \"}\n              </InputLabel>\n              <TextField\n                id=\"vehicle_number\"\n                fullWidth\n                value={entry.vehicle_number}\n                onChange={handleEntryChange}\n              />\n            </Grid>\n          </Grid>\n          <Grid>\n            <div className=\"submit-button\">\n              <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n                Submit\n              </Button>\n            </div>\n          </Grid>\n        </form>\n      </div>\n    </>\n  );\n};\n\nexport default EntryEditForm;\n","import React from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst RouteGraph = (props) => {\n  const entries = props.filteredEntries;\n  const accumulated = props.accumulated;\n  const xRange = props.xRange;\n  const timeSpanIntervals = props.timeSpanIntervals\n\n\n  // get the attendee count for each time interval, those with no data set y = 0 (meaning the bar has no height)\n  function getAttendeeCountOrMakeZero(x) {\n    for (let each of accumulated) {\n      if (x === each.x) {\n        return each.y;\n      }\n    }\n    return 0;\n  }\n\n  let totalAttendeeCount = 0;\n  if (entries.length !== 0) {\n    totalAttendeeCount = entries\n      .map((entry) => entry.attendee_count)\n      .reduce((accumulator, runningTotal) => accumulator + runningTotal);\n  }\n\n  return (\n    <div className=\"graph_border\">\n      <Bar\n        data={{\n          labels: timeSpanIntervals.map((v) => v),\n          datasets: [\n            {\n              backgroundColor: \"black\",\n              borderColor: \"black\",\n              data: timeSpanIntervals.map((v) => getAttendeeCountOrMakeZero(v)),\n            },\n          ],\n        }}\n        options={{\n          responsive: true,\n          legend: {\n            display: false,\n          },\n          scales: {\n            xAxes: [\n              {\n                display: true,\n                ticks: {\n                  maxTicksLimit: xRange,\n                },\n              },\n            ],\n            yAxes: [\n              {\n                display: true,\n              },\n            ],\n          },\n        }}\n      />\n      <Typography align=\"center\">All Routes</Typography>\n      <Typography align=\"center\">\n        {totalAttendeeCount} attendees moved in {entries.length} trips\n      </Typography>\n    </div>\n  );\n};\n\nexport default RouteGraph;\n","import React from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst AllRoutesGraph = (props) => {\n  const filteredEntries = props.filteredEntries;\n  const route = props.route;\n  const times = props.times;\n  const counts = props.counts;\n  const xRange = props.xRange;\n  const timeSpanIntervals = props.timeSpanIntervals;\n  const yMax = props.yMax;\n\n  const routeEntries = filteredEntries.filter((each) =>\n    each.z.includes(route.name)\n  );\n\n  // round times down to nearest 10 minutes and put it and attendee counts into new array\n  const isolated = [];\n  for (let i = 0; i < filteredEntries.length; i++) {\n    if (filteredEntries[i].z.includes(route.name)) {\n      isolated.push({ x: `${times[i]}0`, y: counts[i] });\n    } else {\n      isolated.push({ x: `${times[i]}0`, y: 0 });\n    }\n  }\n\n  const holder = {};\n\n  // reduce duplicate times and accumulate attendee counts for those duplicate times\n  isolated.forEach(function (a) {\n    if (holder.hasOwnProperty(a.x)) {\n      holder[a.x] = holder[a.x] + a.y;\n    } else {\n      holder[a.x] = a.y;\n    }\n  });\n\n  const accumulated = [];\n\n  for (const prop in holder) {\n    accumulated.push({ x: prop, y: holder[prop] });\n  }\n\n  // get the attendee count for each time interval, those with no data set y = 0 (meaning the bar has no height)\n  function getAttendeeCountOrMakeZero(x) {\n    for (let each of accumulated) {\n      if (x === each.x) {\n        return each.y;\n      }\n    }\n    return 0;\n  }\n\n  let routeName = \"\";\n  parseInt(route.name) < 10\n    ? (routeName = route.name.slice(1))\n    : (routeName = route.name);\n\n  let totalAttendeeCount = 0;\n  if (routeEntries.length !== 0) {\n    totalAttendeeCount = routeEntries\n      .map((entry) => entry.y)\n      .reduce((accumulator, runningTotal) => accumulator + runningTotal);\n  }\n\n  return (\n    <>\n      {totalAttendeeCount !== 0 ? (\n        <div className=\"places_graph_border\">\n          <Bar\n            data={{\n              labels: timeSpanIntervals.map((v) => v),\n              datasets: [\n                {\n                  backgroundColor: route.color,\n                  borderColor: \"black\",\n                  borderWidth: .5,\n                  data: timeSpanIntervals.map((v) =>\n                    getAttendeeCountOrMakeZero(v)\n                  ),\n                },\n              ],\n            }}\n            options={{\n              responsive: true,\n              legend: {\n                display: false,\n              },\n              scales: {\n                xAxes: [\n                  {\n                    display: true,\n                    ticks: {\n                      maxTicksLimit: xRange,\n                    },\n                  },\n                ],\n                yAxes: [\n                  {\n                    display: true,\n                    ticks: {\n                      suggestedMax: yMax,\n                    },\n                  },\n                ],\n              },\n            }}\n          />\n          {isNaN(route.name) === true ? (\n            <Typography align=\"center\">\n              {routeName} {route.description}\n            </Typography>\n          ) : (\n            <Typography align=\"center\">\n              Route {routeName} {route.description}\n            </Typography>\n          )}\n          <Typography align=\"center\">\n            {totalAttendeeCount} attendees moved in {routeEntries.length} trips\n          </Typography>\n        </div>\n      ) : (\n        <div className=\"places_graph_border\" style={{padding: \"20px 0 20px 0\"}}>\n          {isNaN(route.name) === true ? (\n            <Typography align=\"center\">\n              There is no ridership data for {routeName} {route.description}\n            </Typography>\n          ) : (\n            <Typography align=\"center\">\n              There is no ridership data for Route {routeName}{\" \"}\n              {route.description}\n            </Typography>\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default AllRoutesGraph;\n","import React from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst AllPlacesGraph = (props) => {\n  const filteredEntries = props.filteredEntries;\n  const place = props.place;\n  const times = props.times;\n  const counts = props.counts;\n  const xRange = props.xRange;\n  const timeSpanIntervals = props.timeSpanIntervals;\n  const yMax = props.yMax;\n\n  const placeEntries = filteredEntries.filter((each) =>\n    each.z.includes(place.name)\n  );\n\n  // round times down to nearest 10 minutes and put it and attendee counts into new array\n  const isolated = [];\n  for (let i = 0; i < filteredEntries.length; i++) {\n    if (filteredEntries[i].z.includes(place.name)) {\n      isolated.push({ x: `${times[i]}0`, y: counts[i] });\n    } else {\n      isolated.push({ x: `${times[i]}0`, y: 0 });\n    }\n  }\n\n  const holder = {};\n\n  // reduce duplicate times and accumulate attendee counts for those duplicate times\n  isolated.forEach(function (a) {\n    if (holder.hasOwnProperty(a.x)) {\n      holder[a.x] = holder[a.x] + a.y;\n    } else {\n      holder[a.x] = a.y;\n    }\n  });\n\n  const accumulated = [];\n\n  for (const prop in holder) {\n    accumulated.push({ x: prop, y: holder[prop] });\n  }\n\n  // get the attendee count for each time interval, those with no data set y = 0 (meaning the bar has no height)\n  function getAttendeeCountOrMakeZero(x) {\n    for (let each of accumulated) {\n      if (x === each.x) {\n        return each.y;\n      }\n    }\n    return 0;\n  }\n\n  let totalAttendeeCount = 0;\n  if (placeEntries.length !== 0) {\n    totalAttendeeCount = placeEntries\n      .map((entry) => entry.y)\n      .reduce((accumulator, runningTotal) => accumulator + runningTotal);\n  }\n\n  const removeClass = () => {\n    document.getElementById(`${place.id}`).classList.remove(\"graph_border\");\n  };\n\n  return (\n    <>\n      {totalAttendeeCount !== 0 ? (\n        <div\n          className=\"places_graph_border\"\n          onClick={removeClass}\n          id={place.id}\n        >\n          <Bar\n            data={{\n              labels: timeSpanIntervals.map((v) => v),\n              datasets: [\n                {\n                  backgroundColor: place.route.color,\n                  borderColor: \"black\",\n                  borderWidth: 0.5,\n                  data: timeSpanIntervals.map((v) =>\n                    getAttendeeCountOrMakeZero(v)\n                  ),\n                },\n              ],\n            }}\n            options={{\n              responsive: true,\n              legend: {\n                display: false,\n              },\n              scales: {\n                xAxes: [\n                  {\n                    display: true,\n                    ticks: {\n                      maxTicksLimit: xRange,\n                    },\n                  },\n                ],\n                yAxes: [\n                  {\n                    display: true,\n                    ticks: {\n                      suggestedMax: yMax,\n                    },\n                  },\n                ],\n              },\n            }}\n          />\n          <Typography align=\"center\">{place.name}</Typography>\n          <Typography align=\"center\">\n            {totalAttendeeCount} attendees moved in {placeEntries.length} trips\n          </Typography>\n        </div>\n      ) : (\n        <div\n          className=\"places_graph_border\"\n          style={{ padding: \"20px 0 20px 0\" }}\n        >\n          <Typography align=\"center\" style={{ marginTop: 40 }}>\n            There is no ridership data for {place.name}\n          </Typography>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default AllPlacesGraph;\n","import React, { useState, useEffect } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport RouteGraph from \"./routeGraph\";\nimport TestGraph from \"./testGraph\";\nimport AllRoutesGraph from \"./allRoutesGraph\";\nimport AllPlacesGraph from \"./allPlacesGraph\";\nimport apiManager from \"../api/apiManager\";\n\nconst RouteReport = (props) => {\n  const routes = props.routes;\n  const shuttles = props.shuttles;\n  const dates = props.dates;\n  const chosenShuttleId = props.chosenShuttleId;\n  const chosenShuttleName = props.chosenShuttleName;\n  const chosenDateId = props.chosenDateId;\n  const chosenDateName = props.chosenDateName;\n  const handleChosenShuttleChange = props.handleChosenShuttleChange;\n  const handleChosenDateChange = props.handleChosenDateChange;\n  const allEntries = props.entries;\n  const getEntries = props.getEntries;\n\n  const [places, setPlaces] = useState([]);\n  const getPlaces = () => {\n    apiManager.getAllType(\"places\").then((r) => {\n      r.sort((a, b) => a.name.localeCompare(b.name));\n      setPlaces(r);\n    });\n  };\n\n  // filter entries based on dropdowns\n  const filteredEntries = allEntries\n    .filter((each1) => each1.shuttle.name.includes(chosenShuttleName))\n    .filter((each4) => each4.date.date.includes(chosenDateName))\n    .sort((a, b) => a.time.localeCompare(b.time));\n\n  const times = filteredEntries.map((entry) => entry.time.slice(0, 4));\n  const counts = filteredEntries.map((entry) => entry.attendee_count);\n  const entryRoutes = filteredEntries.map((entry) => entry.place.route.name);\n  const entryPlaces = filteredEntries.map((entry) => entry.place_id);\n  const placeNames = filteredEntries.map((entry) => entry.place.name);  \n  const isolatedAll = [];\n  const isolatedRoutes = [];\n  const isolatedPlaces = [];\n\n  for (let i = 0; i < filteredEntries.length; i++) {\n    isolatedAll.push({ x: `${times[i]}0`, y: counts[i] });\n    isolatedRoutes.push({ x: `${times[i]}${entryRoutes[i]}`, y: counts[i], z: entryRoutes[i]});\n    isolatedPlaces.push({ x: `${times[i]}${entryPlaces[i]}`, y: counts[i], z: placeNames[i]});\n  }\n\n  const holderAll = {};\n  const holderRoutes = {};\n  const holderPlaces = {};\n\n  // reduce duplicate times and accumulate attendee counts for those duplicate times\n  isolatedAll.forEach(function (a) {\n    if (holderAll.hasOwnProperty(a.x)) {\n      holderAll[a.x] = holderAll[a.x] + a.y;\n    } else {\n      holderAll[a.x] = a.y;\n    }\n  });\n\n  isolatedRoutes.forEach(function (a) {\n    if (holderRoutes.hasOwnProperty(a.x)) {\n      holderRoutes[a.x] = holderRoutes[a.x] + a.y;\n    } else {\n      holderRoutes[a.x] = a.y;\n    }\n  });\n\n  isolatedPlaces.forEach(function (a) {\n    if (holderPlaces.hasOwnProperty(a.x)) {\n      holderPlaces[a.x] = holderPlaces[a.x] + a.y;\n    } else {\n      holderPlaces[a.x] = a.y;\n    }\n  });\n\n  const accumulatedAll = [];\n  const accumulatedRoutes = [];\n  const accumulatedPlaces = [];\n\n  for (const prop in holderAll) {\n    accumulatedAll.push({ x: prop, y: holderAll[prop] });\n  }\n\n  for (const prop in holderRoutes) {\n    accumulatedRoutes.push({ x: prop, y: holderRoutes[prop] });\n  }\n\n  for (const prop in holderPlaces) {\n    accumulatedPlaces.push({ x: prop, y: holderPlaces[prop] });\n  }\n\n  let xMin = \"\";\n  let xMax = \"\";\n  if (accumulatedAll.length !== 0) {\n    xMin = parseInt(accumulatedAll[0].x);\n    xMax = parseInt(accumulatedAll[accumulatedAll.length - 1].x) + 1;\n  }\n\n  const xRange = (xMax - xMin + 1) * 2;\n  const xRangeSmallGraphs = (xMax - xMin + 1);\n\n  const timeSpanIntervals = [];\n  for (let j = xMin; j < xMax; j++) {\n    for (let i = 0; i < 6; i++) {\n      if (j < 10) {\n        timeSpanIntervals.push(`0${j}:${i}0`);\n      } else {\n        timeSpanIntervals.push(`${j}:${i}0`);\n      }\n    }\n  }\n\n  let yMaxRoutes = 0;\n  let yMaxPlaces = 0;\n\n  yMaxRoutes = Math.max.apply(\n    Math,\n    accumulatedRoutes.map(function (o) {\n      return o.y;\n    })\n  );\n\n  yMaxPlaces = Math.max.apply(\n    Math,\n    accumulatedPlaces.map(function (o) {\n      return o.y;\n    })\n  );\n\n  useEffect(() => {\n    getEntries();\n    getPlaces();\n  }, []);\n\n  const [mode, setMode] = useState(true);\n  const handleModeChange = () => {\n    setMode(!mode);\n  };\n\n  return (\n    <>\n      <Typography component=\"h1\" variant=\"h5\">\n        Ridership Graphs\n      </Typography>\n      <div className=\"drop-downs\">\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={3}>\n            <InputLabel>Date:</InputLabel>\n            <Select\n              id=\"dateId\"\n              native\n              onChange={handleChosenDateChange}\n              fullWidth\n              required\n              label=\"??\"\n              value={chosenDateId}\n            >\n              <option aria-label=\"None\" value=\"\" data-name=\"\">\n                Choose Date\n              </option>\n              {dates ? (\n                dates.map((date) => (\n                  <option key={date.id} value={date.id} data-name={date.date}>\n                    {date.date}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel>Shuttle:</InputLabel>\n            <Select\n              id=\"shuttleId\"\n              native\n              onChange={handleChosenShuttleChange}\n              fullWidth\n              required\n              label=\"??\"\n              value={chosenShuttleId}\n            >\n              <option aria-label=\"None\" value=\"\" data-name=\"\">\n                All Shuttles\n              </option>\n              {shuttles ? (\n                shuttles.map((shuttle) => (\n                  <option\n                    key={shuttle.id}\n                    value={parseInt(shuttle.id)}\n                    data-name={shuttle.name}\n                  >\n                    {shuttle.name}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n        </Grid>\n      </div>\n      {filteredEntries.length !== 0 ? (\n        <>\n        {/* <div className=\"graph\">\n            <TestGraph\n              filteredEntries={filteredEntries}\n              accumulated={accumulatedAll}\n              xRange={xRange}\n              timeSpanIntervals={timeSpanIntervals}\n              {...props}\n            />\n          </div> */}\n          <div className=\"graph\">\n            <RouteGraph\n              filteredEntries={filteredEntries}\n              accumulated={accumulatedAll}\n              xRange={xRange}\n              timeSpanIntervals={timeSpanIntervals}\n              {...props}\n            />\n          </div>\n          <div style={{ marginBottom: 40 }}>\n            {mode === true ? (\n              <Button\n                onClick={handleModeChange}\n                variant=\"contained\"\n                color=\"primary\"\n              >\n                View Location Graphs\n              </Button>\n            ) : (\n              <Button\n                onClick={handleModeChange}\n                variant=\"contained\"\n                color=\"primary\"\n              >\n                View Route Graphs\n              </Button>\n            )}\n          </div>\n          {mode === true ? (\n            <div className=\"places_graph\">\n              {routes.map((route) => (\n                <AllRoutesGraph\n                  key={route.id}\n                  route={route}\n                  filteredEntries={isolatedRoutes}\n                  times={times}\n                  counts={counts}\n                  chosenDateName={chosenDateName}\n                  chosenShuttleName={chosenShuttleName}\n                  xRange={xRangeSmallGraphs}\n                  timeSpanIntervals={timeSpanIntervals}\n                  yMax={yMaxRoutes}\n                  {...props}\n                />\n              ))}\n            </div>\n          ) : (\n            <div className=\"places_graph\">\n              {places\n                .sort((a, b) => a.route.name.localeCompare(b.route.name))\n                .map((place) => (\n                  <AllPlacesGraph\n                    key={place.id}\n                    place={place}\n                    filteredEntries={isolatedPlaces}\n                    times={times}\n                    counts={counts}\n                    chosenDateName={chosenDateName}\n                    chosenShuttleName={chosenShuttleName}\n                    xRange={xRangeSmallGraphs}\n                    timeSpanIntervals={timeSpanIntervals}\n                    yMax={yMaxPlaces}\n                    {...props}\n                  />\n                ))}\n            </div>\n          )}\n        </>\n      ) : (\n        <Typography align=\"center\">\n          There is no ridership data for {chosenShuttleName}\n          {chosenDateName !== \"\" ? <> on {chosenDateName}</> : null}\n        </Typography>\n      )}\n    </>\n  );\n};\n\nexport default RouteReport;\n","import React, { useState, useEffect } from \"react\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Typography from \"@material-ui/core/Typography\";\nimport apiManager from \"../api/apiManager\";\n\nconst AssignmentFinder = (props) => {\n  const [assignments, setAssignments] = useState([]);\n\n  const filteredAssignments = assignments.filter((each) =>\n    each.vehicle.number.includes(props.match.params.vehNum)\n  );\n\n  // not sure now actually, seems fine on 07/16\n\n  useEffect(() => {\n    apiManager\n      .getTypeByParam(\"assignments\", \"dateID\", props.match.params.dateId)\n      .then((r) => {\n        setAssignments(r);\n      });\n  }, [props.match.params.dateId]);\n\n  return (\n    <>\n      <Typography component=\"h1\" variant=\"h5\">\n        Possible Matches\n      </Typography>\n      <TableContainer>\n        <Table size=\"small\">\n          <TableHead>\n            <TableRow>\n              <TableCell>Vehicle Company</TableCell>\n              <TableCell>Vehicle Number</TableCell>\n              <TableCell>Driver Name</TableCell>\n              <TableCell>Phone Number</TableCell>\n              <TableCell>Route</TableCell>\n            </TableRow>\n          </TableHead>\n          {filteredAssignments.length !== 0 ? (\n            <TableBody>\n              {filteredAssignments.map((assignment) => (\n                <TableRow key={assignment.id}>\n                  <TableCell>{assignment.vehicle.company}</TableCell>\n                  <TableCell>{assignment.vehicle.number}</TableCell>\n                  <TableCell>{assignment.driver.name}</TableCell>\n                  <TableCell>{assignment.driver.phone_number}</TableCell>\n                  <TableCell>\n                    {assignment.route.name} {assignment.route.description}\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          ) : null}\n        </Table>\n      </TableContainer>\n    </>\n  );\n};\n\nexport default AssignmentFinder;\n","import React, { useEffect, useState } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport DeleteOutlinedIcon from \"@material-ui/icons/DeleteOutlined\";\nimport { FaRegEdit } from \"react-icons/fa\";\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\nimport apiManager from \"../api/apiManager\";\n\nconst Log = (props) => {\n  const places = props.places;\n  const routes = props.routes;\n  const shuttles = props.shuttles;\n  const dates = props.dates;\n  const chosenPlaceId = props.chosenPlaceId;\n  const chosenPlaceName = props.chosenPlaceName;\n  const chosenRoute = props.chosenRoute;\n  const chosenShuttleId = props.chosenShuttleId;\n  const chosenShuttleName = props.chosenShuttleName;\n  const chosenDateId = props.chosenDateId;\n  const chosenDateName = props.chosenDateName;\n  const handleChosenPlaceChange = props.handleChosenPlaceChange;\n  const handleChosenRouteChange = props.handleChosenRouteChange;\n  const handleChosenShuttleChange = props.handleChosenShuttleChange;\n  const handleChosenDateChange = props.handleChosenDateChange;\n  const allEntries = props.entries;\n  const getEntries = props.getEntries;\n\n  const [searchField, setSearchField] = useState(\"\");\n\n  const handleSearchChange = (e) => {\n    setSearchField(e.target.value.toLowerCase());\n  };\n\n  // filter entries based on dropdowns\n  const filteredEntries = allEntries\n    .filter((a) => a.shuttle.name.includes(chosenShuttleName))\n    .filter((b) => b.place.name.includes(chosenPlaceName))\n    .filter((c) => c.place.route.name.includes(chosenRoute))\n    .filter((d) => d.date.date.includes(chosenDateName))\n    .filter(\n      (e) =>\n        e.vehicle_number.includes(searchField) ||\n        e.time.includes(searchField) ||\n        e.attendee_count.toString().includes(searchField) ||\n        e.user.first_name.toLowerCase().includes(searchField) ||\n        e.user.last_name.toLowerCase().includes(searchField)\n    )\n    .sort((f, g) => f.time.localeCompare(g.time))\n    .sort((h, i) => h.date.date.localeCompare(i.date.date));\n\n  const [sortField, setSortField] = useState(null);\n\n  if (sortField === \"time\") {\n    filteredEntries.sort((a, b) => a.time.localeCompare(b.time));\n  } else if (sortField === \"vehicle\") {\n    filteredEntries.sort((a, b) =>\n      a.vehicle_number.localeCompare(b.vehicle_number)\n    );\n  } else if (sortField === \"date\") {\n    filteredEntries.sort((a, b) => a.date.date.localeCompare(b.date.date));\n  } else if (sortField === \"shuttle\") {\n    filteredEntries.sort((a, b) =>\n      a.shuttle.name.localeCompare(b.shuttle.name)\n    );\n  } else if (sortField === \"route\") {\n    filteredEntries.sort((a, b) =>\n      a.place.route.name.localeCompare(b.place.route.name)\n    );\n  } else if (sortField === \"location\") {\n    filteredEntries.sort((a, b) => a.place.name.localeCompare(b.place.name));\n  } else if (sortField === \"user\") {\n    filteredEntries.sort((a, b) =>\n      a.user.first_name.localeCompare(b.user.first_name)\n    );\n  }\n\n  let totalAttendeeCount = 0;\n  if (filteredEntries.length !== 0) {\n    totalAttendeeCount = filteredEntries\n      .map((entry) => entry.attendee_count)\n      .reduce((accumulator, runningTotal) => accumulator + runningTotal);\n  }\n\n  const deleteThisEntry = (id) => {\n    const check = window.confirm(\n      \"Are you sure you want to delete this entry? Deletion cannot be undone.\"\n    );\n    if (check === true) {\n      apiManager.deleteTypeWithId(\"entries\", id).then(() => {\n        getEntries();\n      });\n    }\n  };\n\n  useEffect(() => {\n    getEntries();\n  }, []);\n\n  const editIconStyle = {\n    fontSize: 20,\n    paddingBottom: 2,\n  };\n\n  const [arrow, setArrow] = useState(null);\n\n  return (\n    <>\n      <Typography component=\"h1\" variant=\"h5\">\n        Ridership Logs\n      </Typography>\n      <div className=\"drop-downs\">\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={3}>\n            <InputLabel>Date:</InputLabel>\n            <Select\n              id=\"dateId\"\n              native\n              onChange={handleChosenDateChange}\n              fullWidth\n              required\n              value={chosenDateId}\n            >\n              <option aria-label=\"None\" value=\"\" data-name=\"\">\n                All Dates\n              </option>\n              {dates ? (\n                dates.map((date) => (\n                  <option key={date.id} value={date.id} data-name={date.date}>\n                    {date.date}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel>Shuttle:</InputLabel>\n            <Select\n              id=\"shuttleId\"\n              native\n              onChange={handleChosenShuttleChange}\n              fullWidth\n              required\n              value={chosenShuttleId}\n            >\n              <option aria-label=\"None\" value=\"\" data-name=\"\">\n                All Shuttles\n              </option>\n              {shuttles ? (\n                shuttles.map((shuttle) => (\n                  <option\n                    key={shuttle.id}\n                    value={parseInt(shuttle.id)}\n                    data-name={shuttle.name}\n                  >\n                    {shuttle.name}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel>Route:</InputLabel>\n            <Select\n              id=\"routeId\"\n              native\n              onChange={handleChosenRouteChange}\n              fullWidth\n              required\n              value={chosenRoute}\n            >\n              <option aria-label=\"None\" value=\"\">\n                All Routes\n              </option>\n              {routes ? (\n                routes.map((route) => (\n                  <option key={route.id} value={route.name}>\n                    {route.name} {route.description}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel>Location:</InputLabel>\n            <Select\n              id=\"placeId\"\n              native\n              onChange={handleChosenPlaceChange}\n              fullWidth\n              required\n              value={chosenPlaceId}\n            >\n              <option aria-label=\"None\" value=\"\" data-name=\"\">\n                All Locations\n              </option>\n              {places ? (\n                places.map((place) => (\n                  <option\n                    key={place.id}\n                    value={parseInt(place.id)}\n                    data-name={place.name}\n                  >\n                    {place.name}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel htmlFor=\"age-native-simple\">Search:</InputLabel>\n            <TextField\n              type=\"text\"\n              id=\"keyword\"\n              fullWidth\n              onChange={handleSearchChange}\n              value={searchField}\n            />\n          </Grid>\n        </Grid>\n      </div>\n      <Typography variant=\"h6\">\n        {totalAttendeeCount} attendees moved in {filteredEntries.length} trips\n      </Typography>\n      <TableContainer>\n        <Table size=\"small\">\n          <TableHead>\n            <TableRow>\n              <TableCell\n                style={{ fontWeight: 600 }}\n                onClick={() => setSortField(\"time\")}\n                onMouseEnter={() => setArrow(\"time\")}\n                onMouseLeave={() => setArrow(\"\")}\n              >\n                Time {arrow === \"time\" ? <ArrowDropDownIcon /> : null}\n              </TableCell>\n              <TableCell\n                style={{ fontWeight: 600 }}\n                onClick={() => setSortField(\"vehicle\")}\n                onMouseEnter={() => setArrow(\"vehicle\")}\n                onMouseLeave={() => setArrow(\"\")}\n              >\n                Vehicle # {arrow === \"vehicle\" ? <ArrowDropDownIcon /> : null}\n              </TableCell>\n              <TableCell style={{ fontWeight: 600 }}>Pax</TableCell>\n              {chosenDateId === \"\" ? (\n                <TableCell\n                  style={{ fontWeight: 600 }}\n                  onClick={() => setSortField(\"date\")}\n                  onMouseEnter={() => setArrow(\"date\")}\n                  onMouseLeave={() => setArrow(\"\")}\n                >\n                  Date {arrow === \"date\" ? <ArrowDropDownIcon /> : null}\n                </TableCell>\n              ) : null}\n              {chosenShuttleId === \"\" ? (\n                <TableCell\n                  style={{ fontWeight: 600 }}\n                  onClick={() => setSortField(\"shuttle\")}\n                  onMouseEnter={() => setArrow(\"shuttle\")}\n                  onMouseLeave={() => setArrow(\"\")}\n                >\n                  Shuttle {arrow === \"shuttle\" ? <ArrowDropDownIcon /> : null}\n                </TableCell>\n              ) : null}\n              {chosenRoute === \"\" ? (\n                <TableCell\n                  style={{ fontWeight: 600 }}\n                  onClick={() => setSortField(\"route\")}\n                  onMouseEnter={() => setArrow(\"route\")}\n                  onMouseLeave={() => setArrow(\"\")}\n                >\n                  Rt {arrow === \"route\" ? <ArrowDropDownIcon /> : null}\n                </TableCell>\n              ) : null}\n              {chosenPlaceId === \"\" ? (\n                <TableCell\n                  style={{ fontWeight: 600 }}\n                  onClick={() => setSortField(\"location\")}\n                  onMouseEnter={() => setArrow(\"location\")}\n                  onMouseLeave={() => setArrow(\"\")}\n                >\n                  Location {arrow === \"location\" ? <ArrowDropDownIcon /> : null}\n                </TableCell>\n              ) : null}\n              <TableCell\n                style={{ fontWeight: 600 }}\n                onClick={() => setSortField(\"user\")}\n                onMouseEnter={() => setArrow(\"user\")}\n                onMouseLeave={() => setArrow(\"\")}\n              >\n                Entered By {arrow === \"user\" ? <ArrowDropDownIcon /> : null}\n              </TableCell>\n              <TableCell style={{ fontWeight: 600 }}>Actions</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {filteredEntries.map((entry) => (\n              <TableRow key={entry.id} className=\"table_rows\">\n                <TableCell component=\"th\" scope=\"entry\">\n                  {entry.time.slice(0, -3)}\n                </TableCell>\n                <TableCell\n                  style={{ textDecoration: \"underline\" }}\n                  className=\"action-icon\"\n                  onClick={() =>\n                    props.history.push(\n                      `/assignment/finder/${entry.date_id}/${entry.vehicle_number}`\n                    )\n                  }\n                >\n                  {entry.vehicle_number}\n                </TableCell>\n                <TableCell>{entry.attendee_count}</TableCell>\n                {chosenDateId === \"\" ? (\n                  <TableCell>{entry.date.date.slice(5)}</TableCell>\n                ) : null}\n                {chosenShuttleId === \"\" ? (\n                  <TableCell>{entry.shuttle.name}</TableCell>\n                ) : null}\n                {chosenRoute === \"\" ? (\n                  <>\n                    {parseInt(entry.place.route.name) < 10 ? (\n                      <TableCell>{entry.place.route.name.slice(1)}</TableCell>\n                    ) : (\n                      <TableCell>{entry.place.route.name}</TableCell>\n                    )}\n                  </>\n                ) : null}\n                {chosenPlaceId === \"\" ? (\n                  <TableCell>{entry.place.name}</TableCell>\n                ) : null}\n                <TableCell>\n                  {entry.user.first_name} {entry.user.last_name}\n                </TableCell>\n                <TableCell>\n                  {props.isSupervisor === true ||\n                  parseInt(window.sessionStorage.getItem(\"userID\")) ===\n                    entry.user_id ? (\n                    <>\n                      <span className=\"action-icon\">\n                        <FaRegEdit\n                          onClick={() =>\n                            props.history.push(`/entry/edit/form/${entry.id}`)\n                          }\n                          style={editIconStyle}\n                        />\n                      </span>\n                      <span className=\"action-icon\">\n                        <DeleteOutlinedIcon\n                          onClick={() => deleteThisEntry(entry.id)}\n                        />\n                      </span>\n                    </>\n                  ) : null}\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </>\n  );\n};\n\nexport default Log;\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport EntryForm from \"./forms/entryForm\";\nimport EntryEditForm from \"./forms/entryEditForm\";\nimport RouteReport from \"./reports/routeReport\";\nimport AssignmentFinder from \"./reports/assignmentFinder\";\nimport Log from \"./reports/log\";\n\nconst EventTranspoTracker = (props) => {\n  const hasUser = props.hasUser;\n  const isSupervisor = props.isSupervisor;\n  const dates = props.dates;\n  const shuttles = props.shuttles;\n  const routes = props.routes;\n  const places = props.places;\n  // const vehicles = props.vehicles;\n  const entries = props.entries;\n  const chosenDateId = props.chosenDateId;\n  const chosenDateName = props.chosenDateName;\n  const chosenShuttleId = props.chosenShuttleId;\n  const chosenShuttleName = props.chosenShuttleName;\n  const chosenRoute = props.chosenRoute;\n  const chosenPlaceId = props.chosenPlaceId;\n  const chosenPlaceName = props.chosenPlaceName;\n  // const chosenVehicle = props.chosenVehicle;\n  const getEntries = props.getEntries;\n  const handleChosenPlaceChange = props.handleChosenPlaceChange;\n  const handleChosenRouteChange = props.handleChosenRouteChange;\n  const handleChosenShuttleChange = props.handleChosenShuttleChange;\n  const handleChosenDateChange = props.handleChosenDateChange;\n  // const handleChosenVehicleChange = props.handleChosenVehicleChange\n\n\n  return (\n    <span>\n      <Route exact path=\"/\" render={() => <Redirect to=\"/log\" />} />\n      <Route\n        exact\n        path=\"/entry/form\"\n        render={(props) =>\n          hasUser ? (\n            <EntryForm\n              places={places}\n              routes={routes}\n              shuttles={shuttles}\n              dates={dates}\n              // vehicles={vehicles}\n              chosenPlaceId={chosenPlaceId}\n              chosenRoute={chosenRoute}\n              chosenShuttleId={chosenShuttleId}\n              chosenDateId={chosenDateId}\n              // chosenVehicle={chosenVehicle}\n              handleChosenPlaceChange={handleChosenPlaceChange}\n              handleChosenRouteChange={handleChosenRouteChange}\n              handleChosenShuttleChange={handleChosenShuttleChange}\n              handleChosenDateChange={handleChosenDateChange}\n              // handleChosenVehicleChange={handleChosenVehicleChange}\n              {...props}\n            />\n          ) : (\n            <Redirect to=\"/login\" />\n          )\n        }\n      />\n      <Route\n        exact\n        path=\"/entry/edit/form/:entryId(\\d+)\"\n        render={(props) =>\n          hasUser ? (\n            <EntryEditForm\n              places={places}\n              routes={routes}\n              shuttles={shuttles}\n              dates={dates}\n              chosenPlaceId={chosenPlaceId}\n              chosenRoute={chosenRoute}\n              handleChosenPlaceChange={handleChosenPlaceChange}\n              handleChosenRouteChange={handleChosenRouteChange}\n              {...props}\n            />\n          ) : (\n            <Redirect to=\"/login\" />\n          )\n        }\n      />\n      <Route\n        exact\n        path=\"/log\"\n        render={(props) =>\n          hasUser ? (\n            <Log\n              isSupervisor={isSupervisor}\n              getEntries={getEntries}\n              dates={dates}\n              shuttles={shuttles}\n              routes={routes}\n              places={places}\n              entries={entries}\n              chosenPlaceId={chosenPlaceId}\n              chosenPlaceName={chosenPlaceName}\n              chosenRoute={chosenRoute}\n              chosenShuttleId={chosenShuttleId}\n              chosenShuttleName={chosenShuttleName}\n              chosenDateId={chosenDateId}\n              chosenDateName={chosenDateName}\n              handleChosenPlaceChange={handleChosenPlaceChange}\n              handleChosenRouteChange={handleChosenRouteChange}\n              handleChosenShuttleChange={handleChosenShuttleChange}\n              handleChosenDateChange={handleChosenDateChange}\n              {...props}\n            />\n          ) : (\n            <Redirect to=\"/login\" />\n          )\n        }\n      />\n      <Route\n        exact\n        path=\"/graph\"\n        render={(props) =>\n          hasUser ? (\n            <RouteReport\n              getEntries={getEntries}\n              dates={dates}\n              shuttles={shuttles}\n              routes={routes}\n              places={places}\n              entries={entries}\n              chosenPlaceId={chosenPlaceId}\n              chosenPlaceName={chosenPlaceName}\n              chosenRoute={chosenRoute}\n              chosenShuttleId={chosenShuttleId}\n              chosenShuttleName={chosenShuttleName}\n              chosenDateId={chosenDateId}\n              chosenDateName={chosenDateName}\n              handleChosenPlaceChange={handleChosenPlaceChange}\n              handleChosenRouteChange={handleChosenRouteChange}\n              handleChosenShuttleChange={handleChosenShuttleChange}\n              handleChosenDateChange={handleChosenDateChange}\n              {...props}\n            />\n          ) : (\n            <Redirect to=\"/login\" />\n          )\n        }\n      />\n      <Route\n        exact\n        path=\"/assignment/finder/:dateId(\\d+)/:vehNum(\\d+)\"\n        render={(props) =>\n          hasUser ? <AssignmentFinder {...props} /> : <Redirect to=\"/login\" />\n        }\n      />\n    </span>\n  );\n};\n\nexport default EventTranspoTracker;\n","import React, { useState } from \"../../node_modules/react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Typography from \"@material-ui/core/Typography\";\nimport apiManager from \"../api/apiManager\";\n\nconst DateForm = (props) => {\n  const getDates = props.getDates;\n  const [date, setDate] = useState({ date: \"\" });\n\n  const handleDateChange = (event) => {\n    const stateToChange = { ...date };\n    stateToChange[event.target.id] = event.target.value;\n    setDate(stateToChange);\n  };\n\n  // post date, reset input to empty \"\", provide user \"success\" alert\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    apiManager.postType(\"dates\", date).then(() => {\n      document.getElementById(\"date\").value = \"\";\n      setDate({\n        date: \"\",\n      });\n      getDates();\n    });\n    alert(\"Success!\");\n  };\n\n  return (\n    <>\n      <Typography component=\"h1\" variant=\"h5\" className=\"page-header\">\n        Add New Date\n      </Typography>\n      <form className=\"drop-downs\" onSubmit={handleSubmit}>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={3}>\n            <InputLabel htmlFor=\"age-native-simple\">Date: </InputLabel>\n            <TextField\n              id=\"date\"\n              type=\"date\"\n              fullWidth\n              onChange={handleDateChange}\n            />\n          </Grid>\n        </Grid>\n        <div className=\"submit-button\">\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n            Submit\n          </Button>\n        </div>\n      </form>\n    </>\n  );\n};\n\nexport default DateForm;\n","import React, { useState } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Typography from \"@material-ui/core/Typography\";\nimport apiManager from \"../api/apiManager\";\n\nconst ShuttleForm = (props) => {\n  const getShuttles = props.getShuttles;\n  const [shuttle, setShuttle] = useState({\n    name: \"\",\n  });\n\n  // update state of shuttle upon form field change\n  const handleShuttleChange = (e) => {\n    const stateToChange = { ...shuttle };\n    stateToChange[e.target.id] = e.target.value;\n    setShuttle(stateToChange);\n  };\n\n  // post shuttle, reset name count to empty \"\", provide user \"success\" alert\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    apiManager.postType(\"shuttles\", shuttle).then(() => {\n      document.getElementById(\"name\").value = \"\";\n      setShuttle({\n        name: \"\",\n      });\n      getShuttles();\n    });\n    alert(\"Success!\");\n  };\n\n  return (\n    <>\n      <Typography component=\"h1\" variant=\"h5\" className=\"page-header\">\n        Add New Shuttle\n      </Typography>\n      <form className=\"drop-downs\" onSubmit={handleSubmit}>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={3}>\n            <InputLabel htmlFor=\"age-native-simple\">Name: </InputLabel>\n            <TextField\n              id=\"name\"\n              required\n              fullWidth\n              onChange={handleShuttleChange}\n            />\n          </Grid>\n        </Grid>\n        <div className=\"submit-button\">\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n            Submit\n          </Button>\n        </div>\n      </form>\n    </>\n  );\n};\n\nexport default ShuttleForm;\n","import React, { useState } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Typography from \"@material-ui/core/Typography\";\nimport apiManager from \"../api/apiManager\";\n\nconst RouteForm = (props) => {\n  const getRoutes = props.getRoutes;\n  const [route, setRoute] = useState({\n    name: \"\",\n    color: \"\",\n    description: \"\",\n  });\n\n  // update state of route upon form field change\n  const handleRouteChange = (e) => {\n    const stateToChange = { ...route };\n    stateToChange[e.target.id] = e.target.value;\n    setRoute(stateToChange);\n  };\n\n  // post route, reset fields to empty \"\", provide user \"success\" alert\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    apiManager.postType(\"routes\", route).then(() => {\n      document.getElementById(\"name\").value = \"\";\n      document.getElementById(\"color\").value = \"\";\n      document.getElementById(\"description\").value = \"\";\n      setRoute({\n        name: \"\",\n        color: \"\",\n        description: \"\",\n      });\n      getRoutes();\n    });\n    alert(\"Success!\");\n  };\n\n  return (\n    <>\n      <Typography component=\"h1\" variant=\"h5\" className=\"page-header\">\n        Add New Route\n      </Typography>\n      <form className=\"drop-downs\" onSubmit={handleSubmit}>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={3}>\n            <InputLabel htmlFor=\"age-native-simple\">Name: </InputLabel>\n            <TextField\n              id=\"name\"\n              fullWidth\n              required\n              onChange={handleRouteChange}\n            />\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel htmlFor=\"age-native-simple\">Color: </InputLabel>\n            <TextField\n              id=\"color\"\n              fullWidth\n              required\n              onChange={handleRouteChange}\n            />\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel htmlFor=\"age-native-simple\">Description: </InputLabel>\n            <TextField\n              id=\"description\"\n              fullWidth\n              required\n              onChange={handleRouteChange}\n            />\n          </Grid>\n        </Grid>\n        <div className=\"submit-button\">\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n            Submit\n          </Button>\n        </div>\n      </form>\n    </>\n  );\n};\n\nexport default RouteForm;\n","import React, { useState } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Select from \"@material-ui/core/Select\";\nimport apiManager from \"../api/apiManager\";\n\nconst PlaceForm = (props) => {\n  const getPlaces = props.getPlaces;\n  const routes = props.routes;\n  const [place, setPlace] = useState({\n    name: \"\",\n  });\n\n  const [chosenRoute, setChosenRoute] = useState(\"\");\n\n  const handleChosenRouteChange = (e) => {\n    const routeId = e.target.value;\n    setChosenRoute(routeId);\n  };\n\n  place.route_id = chosenRoute;\n\n  // update state of place upon form field change\n  const handlePlaceChange = (e) => {\n    const stateToChange = { ...place };\n    stateToChange[e.target.id] = e.target.value;\n    setPlace(stateToChange);\n  };\n\n  // post place, reset fields to empty \"\", provide user \"success\" alert\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    apiManager.postType(\"places\", place).then(() => {\n      document.getElementById(\"name\").value = \"\";\n      setPlace({\n        name: \"\",\n      });\n      getPlaces();\n    });\n    alert(\"Success!\");\n  };\n\n  return (\n    <>\n      <Typography component=\"h1\" variant=\"h5\" className=\"page-header\">\n        Add New Location\n      </Typography>\n      <form className=\"drop-downs\" onSubmit={handleSubmit}>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={3}>\n            <InputLabel htmlFor=\"age-native-simple\">Name: </InputLabel>\n            <TextField\n              id=\"name\"\n              fullWidth\n              required\n              onChange={handlePlaceChange}\n            />\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel>Route:</InputLabel>\n            <Select\n              id=\"id\"\n              native\n              onChange={handleChosenRouteChange}\n              fullWidth\n              required\n              value={chosenRoute}\n            >\n              <option aria-label=\"None\" value=\"\">\n                Choose Route\n              </option>\n              {routes ? (\n                routes.map((route) => (\n                  <option key={route.id} value={route.id}>\n                    {route.name} {route.description}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n        </Grid>\n        <div className=\"submit-button\">\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n            Submit\n          </Button>\n        </div>\n      </form>\n    </>\n  );\n};\n\nexport default PlaceForm;\n","import React, { useState } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Typography from \"@material-ui/core/Typography\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport { Link } from \"react-router-dom\";\nimport apiManager from \"../api/apiManager\";\n\nconst DriverForm = (props) => {\n  const [driver, setDriver] = useState({\n    name: \"\",\n    phone_number: \"\",\n    notes: \"\",\n  });\n\n  var [isChecked, setIsChecked] = useState(false);\n  const handleIsCheckedChange = () => {\n    setIsChecked(!isChecked);\n  };\n\n  // update state of driver upon form field change\n  const handleDriverChange = (e) => {\n    const stateToChange = { ...driver };\n    stateToChange[e.target.id] = e.target.value;\n    setDriver(stateToChange);\n  };\n\n  // get all drivers, check if driver already in system, post if not, send to vehicle form\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    apiManager.getAllType(\"drivers\").then((allDrivers) => {\n      driver.isLocal = isChecked;\n      const driverA = allDrivers.find(\n        (driverA) => driverA.name === driver.name\n      );\n      if (driverA === undefined) {\n        apiManager\n          .postType(\"drivers\", driver)\n          .then((result) => props.setDriverId(result.id));\n        props.history.push(`/vehicle/form`);\n      } else {\n        alert(\"Driver already in database.\");\n      }\n    });\n  };\n\n  return (\n    <>\n      <Typography component=\"h1\" variant=\"h5\" className=\"page-header\">\n        Add New Driver\n      </Typography>\n      <form className=\"drop-downs\" onSubmit={handleSubmit}>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={3}>\n            <InputLabel htmlFor=\"age-native-simple\">Name: </InputLabel>\n            <TextField\n              id=\"name\"\n              fullWidth\n              required\n              onChange={handleDriverChange}\n            />\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel htmlFor=\"age-native-simple\">Phone Number: </InputLabel>\n            <TextField\n              id=\"phone_number\"\n              fullWidth\n              required\n              onChange={handleDriverChange}\n            />\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel htmlFor=\"age-native-simple\">Notes: </InputLabel>\n            <TextField id=\"notes\" fullWidth onChange={handleDriverChange} />\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={isChecked}\n                  onChange={handleIsCheckedChange}\n                  color=\"primary\"\n                />\n              }\n              label=\"Local driver?\"\n            />\n          </Grid>\n        </Grid>\n        <div className=\"submit-button\">\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n            Submit\n          </Button>\n        </div>\n        <div className=\"submit-button\">\n          <Link to=\"/vehicle/form\" style={{ textDecoration: \"none\" }}>\n            <Button variant=\"contained\" color=\"primary\">\n              Skip\n            </Button>\n          </Link>\n        </div>\n      </form>\n    </>\n  );\n};\n\nexport default DriverForm;\n","import React, { useState, useEffect } from \"../../node_modules/react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Typography from \"@material-ui/core/Typography\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport apiManager from \"../api/apiManager\";\n\nconst DriverEditForm = (props) => {\n  const [driver, setDriver] = useState({\n    name: \"\",\n    phone_number: \"\",\n    notes: \"\",\n    isLocal: Boolean,\n    area: \"\",\n    area_id: \"\"\n  });\n\n  var [isChecked, setIsChecked] = useState(false);\n  const handleIsCheckedChange = () => {\n    setIsChecked(!isChecked);\n  };\n\n  useEffect(() => {\n    apiManager\n      .getSingleType(\"drivers\", props.match.params.driverId)\n      .then((driver) => {\n        setDriver(driver);\n        setIsChecked(driver.isLocal);\n        console.log(driver)\n      });\n  }, [props.match.params.driverId]);\n\n  const handleDriverChange = (event) => {\n    const stateToChange = { ...driver };\n    stateToChange[event.target.id] = event.target.value;\n    setDriver(stateToChange);\n  };\n\n  const editedDriver = {\n    id: props.match.params.driverId,\n    name: driver.name,\n    phone_number: driver.phone_number,\n    isLocal: isChecked,\n    notes: driver.notes,\n    area: driver.area,\n    area_id: driver.area_id\n  };\n\n  const handleSubmit = (e) => {\n    console.log(editedDriver)\n    e.preventDefault();\n    apiManager\n      .updateType(\"drivers\", editedDriver)\n      .then(() =>\n        props.history.push(\n          `/vehicle/edit/${props.match.params.driverId}/${props.match.params.vehicleId}`\n        )\n      );\n  };\n\n  const skip = () => {\n    props.history.push(\n      `/vehicle/edit/${props.match.params.driverId}/${props.match.params.vehicleId}`\n    );\n  };\n\n  return (\n    <>\n      <Typography component=\"h1\" variant=\"h5\" className=\"page-header\">\n        Edit Driver Info\n      </Typography>\n      <form className=\"drop-downs\" onSubmit={handleSubmit}>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={3}>\n            <InputLabel htmlFor=\"age-native-simple\">Name: </InputLabel>\n            <TextField\n              id=\"name\"\n              fullWidth\n              required\n              onChange={handleDriverChange}\n              value={driver.name}\n            />\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel htmlFor=\"age-native-simple\">Phone Number: </InputLabel>\n            <TextField\n              id=\"phone_number\"\n              fullWidth\n              required\n              onChange={handleDriverChange}\n              value={driver.phone_number}\n            />\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel htmlFor=\"age-native-simple\">Notes: </InputLabel>\n            <TextField\n              id=\"notes\"\n              fullWidth\n              onChange={handleDriverChange}\n              value={driver.notes}\n            />\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={isChecked}\n                  onChange={handleIsCheckedChange}\n                  color=\"primary\"\n                />\n              }\n              label=\"Local driver?\"\n            />\n          </Grid>\n        </Grid>\n        <div className=\"submit-button\">\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n            Submit\n          </Button>\n        </div>\n        <div className=\"submit-button\">\n          <Button variant=\"contained\" color=\"primary\" onClick={skip}>\n            Skip\n          </Button>\n        </div>\n      </form>\n    </>\n  );\n};\n\nexport default DriverEditForm;\n","import React, { useState } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Typography from \"@material-ui/core/Typography\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport { Link } from \"react-router-dom\";\nimport apiManager from \"../api/apiManager\";\n\nconst VehicleForm = (props) => {\n  const [vehicle, setVehicle] = useState({\n    company: \"\",\n    number: \"\",\n    kind: \"\",\n    capacity: \"\",\n  });\n\n  var [isChecked, setIsChecked] = useState(false);\n  const handleIsCheckedChange = () => {\n    setIsChecked(!isChecked);\n  };\n\n  // update state of driver upon form field change\n  const handleVehicleChange = (event) => {\n    const stateToChange = { ...vehicle };\n    stateToChange[event.target.id] = event.target.value;\n    setVehicle(stateToChange);\n  };\n\n  // get all vehicles, check if vehicle already in system, post if not, send to assignment form\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    apiManager.getAllType(\"vehicles\").then((allVehicles) => {\n      vehicle.isAda = isChecked;\n      const vehicleA = allVehicles.find(\n        (vehicleA) =>\n          vehicleA.company === vehicle.company &&\n          vehicleA.number === vehicle.number\n      );\n      if (vehicleA === undefined) {\n        apiManager\n          .postType(\"vehicles\", vehicle)\n          .then((result) => props.setVehicleId(result.id));\n      } else {\n        alert(\"Vehicle already in database.\");\n      }\n      setTimeout(() => {\n        props.history.push(\"/assignment/form\");\n      }, 100);\n    });\n  };\n\n  return (\n    <>\n      <Typography component=\"h1\" variant=\"h5\" className=\"page-header\">\n        Add New Vehicle\n      </Typography>\n      <form className=\"drop-downs\" onSubmit={handleSubmit}>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={3}>\n            <InputLabel htmlFor=\"age-native-simple\">Company: </InputLabel>\n            <TextField\n              id=\"company\"\n              fullWidth\n              required\n              onChange={handleVehicleChange}\n            />\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel htmlFor=\"age-native-simple\">Number: </InputLabel>\n            <TextField\n              id=\"number\"\n              fullWidth\n              required\n              onChange={handleVehicleChange}\n            />\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel htmlFor=\"age-native-simple\">Type: </InputLabel>\n            <TextField id=\"kind\" fullWidth onChange={handleVehicleChange} />\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel htmlFor=\"age-native-simple\">Capacity: </InputLabel>\n            <TextField id=\"capacity\" fullWidth onChange={handleVehicleChange} />\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={isChecked}\n                  onChange={handleIsCheckedChange}\n                  color=\"primary\"\n                />\n              }\n              label=\"ADA vehicle?\"\n            />\n          </Grid>\n        </Grid>\n        <div className=\"submit-button\">\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n            Submit\n          </Button>\n        </div>\n        <div className=\"submit-button\">\n          <Link to=\"/assignment/form\" style={{ textDecoration: \"none\" }}>\n            <Button variant=\"contained\" color=\"primary\">\n              Skip\n            </Button>\n          </Link>\n        </div>\n      </form>\n    </>\n  );\n};\n\nexport default VehicleForm;\n","import React, { useState, useEffect } from \"../../node_modules/react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Typography from \"@material-ui/core/Typography\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport apiManager from \"../api/apiManager\";\n\nconst VehicleEditForm = (props) => {\n  const [vehicle, setVehicle] = useState({\n    company: \"\",\n    number: \"\",\n    kind: \"\",\n    capacity: \"\",\n    isAda: Boolean,\n  });\n\n  var [isChecked, setIsChecked] = useState(false);\n  const handleIsCheckedChange = () => {\n    setIsChecked(!isChecked);\n  };\n\n  useEffect(() => {\n    apiManager\n      .getSingleType(\"vehicles\", props.match.params.vehicleId)\n      .then((vehicle) => {\n        setVehicle(vehicle);\n        setIsChecked(vehicle.isAda);\n      });\n  }, [props.match.params.vehicleId]);\n\n  const handleVehicleChange = (e) => {\n    const stateToChange = { ...vehicle };\n    stateToChange[e.target.id] = e.target.value;\n    setVehicle(stateToChange);\n  };\n\n  const editedVehicle = {\n    id: props.match.params.vehicleId,\n    company: vehicle.company,\n    number: vehicle.number,\n    kind: vehicle.kind,\n    capacity: vehicle.capacity,\n    isAda: isChecked,\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    apiManager\n      .updateType(\"vehicles\", editedVehicle)\n      .then(() => props.history.push(\"/route/view\"));\n  };\n\n  const skip = () => {\n    props.history.push(\"/route/view\");\n  };\n\n  return (\n    <>\n      <Typography component=\"h1\" variant=\"h5\" className=\"page-header\">\n        Edit Vehicle Info\n      </Typography>\n      <form className=\"drop-downs\" onSubmit={handleSubmit}>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={3}>\n            <InputLabel htmlFor=\"age-native-simple\">Company: </InputLabel>\n            <TextField\n              id=\"company\"\n              fullWidth\n              required\n              onChange={handleVehicleChange}\n              value={vehicle.company}\n            />\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel htmlFor=\"age-native-simple\">Number: </InputLabel>\n            <TextField\n              id=\"number\"\n              fullWidth\n              required\n              onChange={handleVehicleChange}\n              value={vehicle.number}\n            />\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel htmlFor=\"age-native-simple\">Type: </InputLabel>\n            <TextField\n              id=\"kind\"\n              fullWidth\n              onChange={handleVehicleChange}\n              value={vehicle.kind}\n            />\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel htmlFor=\"age-native-simple\">Capacity: </InputLabel>\n            <TextField\n              id=\"capacity\"\n              fullWidth\n              onChange={handleVehicleChange}\n              value={vehicle.capacity}\n            />\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={isChecked}\n                  onChange={handleIsCheckedChange}\n                  color=\"primary\"\n                />\n              }\n              label=\"ADA vehicle?\"\n            />\n          </Grid>\n        </Grid>\n        <div className=\"submit-button\">\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n            Submit\n          </Button>\n        </div>\n        <div className=\"submit-button\">\n          <Button variant=\"contained\" color=\"primary\" onClick={skip}>\n            Skip\n          </Button>\n        </div>\n      </form>\n    </>\n  );\n};\n\nexport default VehicleEditForm;\n","import React, { useState, useEffect } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Select from \"@material-ui/core/Select\";\nimport apiManager from \"../api/apiManager\";\nimport moment from \"moment\";\n\nconst AssignmentForm = (props) => {\n  const chosenDate = props.chosenDate\n  const handleChosenDateChange = props.handleChosenDateChange\n  const [assignment, setAssignment] = useState({\n    start_time: moment().format(\"HH:mm\"),\n    end_time: \"23:59\",\n    vehicle_id: props.vehicleId,\n    driver_id: props.driverId,\n    route_id: \"\",\n  });\n\n  assignment.date_id = chosenDate;\n\n  const [dates, setDates] = useState([]);\n  const [routes, setRoutes] = useState([]);\n  const [drivers, setDrivers] = useState([]);\n  const [vehicles, setVehicles] = useState([]);\n\n  const getAllDropDowns = () => {\n    return (\n      apiManager.getAllType(\"dates\").then((r) => {\n        r.sort((a, b) => (a.date > b.date ? 1 : -1));\n        setDates(r);\n      }),\n      apiManager.getAllType(\"routes\").then((r) => {\n        r.sort((a, b) => (a.name > b.name ? 1 : -1));\n        setRoutes(r);\n      }),\n      apiManager.getAllType(\"drivers\").then((r) => {\n        r.sort((a, b) => a.name.localeCompare(b.name));\n        setDrivers(r);\n      }),\n      apiManager.getAllType(\"vehicles\").then((r) => {\n        r.sort((a, b) => (a.number > b.number ? 1 : -1)).sort((a, b) =>\n          a.company.localeCompare(b.company)\n        );\n        setVehicles(r);\n      })\n    );\n  };\n\n  const handleAssignmentChange = (e) => {\n    const stateToChange = { ...assignment };\n    stateToChange[e.target.id] = e.target.value;\n    setAssignment(stateToChange);\n  };\n\n  useEffect(() => {\n    getAllDropDowns();\n  }, []);\n\n  // get all drivers, check if driver already in system, post if not, send to route view\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    apiManager\n      .getAssignmentsByDateDriver(assignment.date_id, assignment.driver_id)\n      .then((assignments) => {\n        if (assignments.length > 0) {\n          alert(\"This driver has already been assigned on this day.\");\n        } else {\n          apiManager\n            .postType(\"assignments\", assignment)\n            .then(() => props.history.push(`/route/view`));\n        }\n      });\n  };\n\n  return (\n    <>\n      <Typography component=\"h1\" variant=\"h5\" className=\"page-header\">\n        Create New Assignment\n      </Typography>\n      <form className=\"drop-downs\" onSubmit={handleSubmit}>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={3}>\n            <InputLabel>Driver:</InputLabel>\n            <Select\n              id=\"driver_id\"\n              native\n              onChange={handleAssignmentChange}\n              fullWidth\n              required\n              value={assignment.driver_id}\n            >\n              <option aria-label=\"None\" value=\"\" data-name=\"\">\n                Choose Driver\n              </option>\n              {drivers ? (\n                drivers.map((driver) => (\n                  <option key={driver.id} value={parseInt(driver.id)}>\n                    {driver.name}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel>Vehicle:</InputLabel>\n            <Select\n              id=\"vehicle_id\"\n              native\n              onChange={handleAssignmentChange}\n              fullWidth\n              required\n              value={assignment.vehicle_id}\n            >\n              <option aria-label=\"None\" value=\"\" data-name=\"\">\n                Choose Vehicle\n              </option>\n              {vehicles ? (\n                vehicles.map((vehicle) => (\n                  <option key={vehicle.id} value={parseInt(vehicle.id)}>\n                    {vehicle.company} {vehicle.number}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel>Route:</InputLabel>\n            <Select\n              id=\"route_id\"\n              native\n              onChange={handleAssignmentChange}\n              fullWidth\n              required\n              // value={chosenRoute}\n            >\n              <option aria-label=\"None\" value=\"\" data-name=\"\">\n                Choose Route\n              </option>\n              {routes ? (\n                routes.map((route) => (\n                  <option key={route.id} value={parseInt(route.id)}>\n                    {route.name} {route.description}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel>Date:</InputLabel>\n            <Select\n              id=\"date_id\"\n              native\n              onChange={handleChosenDateChange}\n              fullWidth\n              required\n              value={chosenDate}\n            >\n              <option aria-label=\"None\" value=\"\" data-name=\"\">\n                Choose Date\n              </option>\n              {dates ? (\n                dates.map((date) => (\n                  <option key={date.id} value={parseInt(date.id)}>\n                    {date.date}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel htmlFor=\"age-native-simple\">Start Time: </InputLabel>\n            <TextField\n              id=\"start_time\"\n              type=\"time\"\n              fullWidth\n              value={assignment.start_time}\n              onChange={handleAssignmentChange}\n            />\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel htmlFor=\"age-native-simple\">End Time: </InputLabel>\n            <TextField\n              id=\"end_time\"\n              type=\"time\"\n              fullWidth\n              value={assignment.end_time}\n              onChange={handleAssignmentChange}\n            />\n          </Grid>\n        </Grid>\n        <div className=\"submit-button\">\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n            Submit\n          </Button>\n        </div>\n      </form>\n    </>\n  );\n};\n\nexport default AssignmentForm;\n","import React, { useState, useEffect } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Select from \"@material-ui/core/Select\";\nimport apiManager from \"../api/apiManager\";\nimport moment from \"moment\";\n\nconst AssignmentAddForm = (props) => {\n  const chosenDate = props.chosenDate;\n  const handleChosenDateChange = props.handleChosenDateChange;\n  const [assignment, setAssignment] = useState({\n    start_time: moment().format(\"HH:mm\"),\n    end_time: \"23:59\",\n  });\n\n  assignment.route_id = props.match.params.routeId;\n  assignment.date_id = chosenDate;\n\n  const [route, setRoute] = useState([]);\n\n  const getRoute = () => {\n    apiManager\n      .getSingleType(\"routes\", props.match.params.routeId)\n      .then((r) => setRoute(r));\n  };\n\n  const [dates, setDates] = useState([]);\n  const [drivers, setDrivers] = useState([]);\n  const [vehicles, setVehicles] = useState([]);\n\n  const getAllDropDowns = () => {\n    return (\n      apiManager.getAllType(\"dates\").then((r) => {\n        r.sort((a, b) => (a.date > b.date ? 1 : -1));\n        setDates(r);\n      }),\n      apiManager.getAllType(\"drivers\").then((r) => {\n        r.sort((a, b) => a.name.localeCompare(b.name));\n        setDrivers(r);\n      }),\n      apiManager.getAllType(\"vehicles\").then((r) => {\n        r.sort((a, b) => (a.number > b.number ? 1 : -1)).sort((a, b) =>\n          a.company.localeCompare(b.company)\n        );\n        setVehicles(r);\n      })\n    );\n  };\n\n  const handleAssignmentChange = (e) => {\n    const stateToChange = { ...assignment };\n    stateToChange[e.target.id] = e.target.value;\n    setAssignment(stateToChange);\n  };\n\n  useEffect(() => {\n    getAllDropDowns();\n    getRoute();\n  }, []);\n\n  // get all drivers, check if driver already in system, post if not, send to route view\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    apiManager\n      .getAssignmentsByDateDriver(assignment.date_id, assignment.driver_id)\n      .then((assignments) => {\n        if (assignments.length > 0) {\n          // get single driver\n          alert(`This driver has already been assigned on this day.`);\n        } else {\n          apiManager\n            .postType(\"assignments\", assignment)\n            .then(() => props.history.push(`/route/view`));\n        }\n      });\n  };\n\n  return (\n    <>\n      <Typography component=\"h1\" variant=\"h5\" className=\"page-header\">\n        Create New Assignment for{\" \"}\n        <span style={{ color: route.color }}>\n          Route {route.name} {route.description}\n        </span>\n      </Typography>\n      <form className=\"drop-downs\" onSubmit={handleSubmit}>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={3}>\n            <InputLabel>Date:</InputLabel>\n            <Select\n              id=\"date_id\"\n              native\n              onChange={handleChosenDateChange}\n              fullWidth\n              required\n              value={chosenDate}\n            >\n              <option aria-label=\"None\" value=\"\" data-name=\"\">\n                Choose Date\n              </option>\n              {dates ? (\n                dates.map((date) => (\n                  <option key={date.id} value={parseInt(date.id)}>\n                    {date.date}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel>Driver:</InputLabel>\n            <Select\n              id=\"driver_id\"\n              native\n              onChange={handleAssignmentChange}\n              fullWidth\n              required\n            >\n              <option aria-label=\"None\" value=\"\" data-name=\"\">\n                Choose Driver\n              </option>\n              {drivers ? (\n                drivers.map((driver) => (\n                  <option key={driver.id} value={parseInt(driver.id)}>\n                    {driver.name}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel>Vehicle:</InputLabel>\n            <Select\n              id=\"vehicle_id\"\n              native\n              onChange={handleAssignmentChange}\n              fullWidth\n              required\n            >\n              <option aria-label=\"None\" value=\"\" data-name=\"\">\n                Choose Vehicle\n              </option>\n              {vehicles ? (\n                vehicles.map((vehicle) => (\n                  <option key={vehicle.id} value={parseInt(vehicle.id)}>\n                    {vehicle.company} {vehicle.number}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel htmlFor=\"age-native-simple\">Start Time: </InputLabel>\n            <TextField\n              id=\"start_time\"\n              type=\"time\"\n              fullWidth\n              value={assignment.start_time}\n              onChange={handleAssignmentChange}\n            />\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel htmlFor=\"age-native-simple\">End Time: </InputLabel>\n            <TextField\n              id=\"end_time\"\n              type=\"time\"\n              fullWidth\n              value={assignment.end_time}\n              onChange={handleAssignmentChange}\n            />\n          </Grid>\n        </Grid>\n        <div className=\"submit-button\">\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n            Submit\n          </Button>\n        </div>\n      </form>\n    </>\n  );\n};\n\nexport default AssignmentAddForm;\n","import React, { useState, useEffect } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Select from \"@material-ui/core/Select\";\nimport apiManager from \"../api/apiManager\";\n\nconst AssignmentEditForm = (props) => {\n  const [assignment, setAssignment] = useState({\n    driver_id: props.match.params.driverId,\n    vehicle_id: props.match.params.vehicleId,\n    route_id: props.match.params.routeId,\n  });\n\n  const [routes, setRoutes] = useState([]);\n  const [vehicles, setVehicles] = useState([]);\n\n  const getAssignment = (assignId) => {\n    apiManager.getSingleType(\"assignments\", assignId).then((assignment) => {\n      setAssignment(assignment);\n    });\n  };\n\n  let driverName = \"\";\n  assignment.driver === undefined\n    ? (driverName = \"\")\n    : (driverName = assignment.driver.name);\n\n  const getAllDropDowns = () => {\n    return (\n      apiManager.getAllType(\"routes\").then((r) => {\n        r.sort((a, b) => (a.name > b.name ? 1 : -1));\n        setRoutes(r);\n      }),\n      apiManager.getAllType(\"vehicles\").then((r) => {\n        r.sort((a, b) => (a.number > b.number ? 1 : -1)).sort((a, b) =>\n          a.company.localeCompare(b.company)\n        );\n        setVehicles(r);\n      })\n    );\n  };\n\n  const handleAssignmentChange = (e) => {\n    const stateToChange = { ...assignment };\n    stateToChange[e.target.id] = e.target.value;\n    setAssignment(stateToChange);\n  };\n\n  useEffect(() => {\n    getAssignment(props.match.params.assignmentId);\n    getAllDropDowns();\n  }, [props.match.params.assignmentId]);\n\n  const editedAssignment = {\n    id: props.match.params.assignmentId,\n    start_time: assignment.start_time,\n    end_time: assignment.end_time,\n    driver_id: assignment.driver_id,\n    vehicle_id: assignment.vehicle_id,\n    route_id: assignment.route_id,\n    date_id: assignment.date_id,\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    apiManager\n      .updateType(\"assignments\", editedAssignment)\n      .then(() => props.history.push(`/route/view`));\n  };\n\n  return (\n    <>\n      <Typography component=\"h1\" variant=\"h5\" className=\"page-header\">\n        Edit Assignment for {driverName}\n      </Typography>\n      <form className=\"drop-downs\" onSubmit={handleSubmit}>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={3}>\n            <InputLabel>Vehicle:</InputLabel>\n            <Select\n              id=\"vehicle_id\"\n              native\n              onChange={handleAssignmentChange}\n              fullWidth\n              required\n              value={assignment.vehicle_id}\n            >\n              <option aria-label=\"None\" value=\"\" data-name=\"\">\n                Choose Vehicle\n              </option>\n              {vehicles ? (\n                vehicles.map((vehicle) => (\n                  <option key={vehicle.id} value={parseInt(vehicle.id)}>\n                    {vehicle.company} {vehicle.number}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel>Route:</InputLabel>\n            <Select\n              id=\"route_id\"\n              native\n              onChange={handleAssignmentChange}\n              fullWidth\n              required\n              value={assignment.route_id}\n            >\n              <option aria-label=\"None\" value=\"\" data-name=\"\">\n                Choose Route\n              </option>\n              {routes ? (\n                routes.map((route) => (\n                  <option key={route.id} value={parseInt(route.id)}>\n                    {route.name} {route.description}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n        </Grid>\n        <div className=\"submit-button\">\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n            Submit\n          </Button>\n        </div>\n      </form>\n    </>\n  );\n};\n\nexport default AssignmentEditForm;\n","import React, { useState, useEffect } from \"../../node_modules/react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport apiManager from \"../api/apiManager\";\n\nconst StaffEditForm = (props) => {\n  const [staff, setStaff] = useState({\n    first_name: \"\",\n    is_staff: Boolean,\n  });\n\n  var [isChecked, setIsChecked] = useState(false);\n  const handleIsCheckedChange = () => {\n    setIsChecked(!isChecked);\n  };\n\n  useEffect(() => {\n    apiManager\n      .getSingleType(\"users\", props.match.params.userId)\n      .then((staff) => {\n        setStaff(staff);\n        setIsChecked(staff.is_staff);\n      });\n  }, [props.match.params.userId]);\n\n  const handleStaffChange = (e) => {\n    const stateToChange = { ...staff };\n    stateToChange[e.target.id] = e.target.value;\n    setStaff(stateToChange);\n  };\n\n  const editedStaff = {\n    id: parseInt(props.match.params.userId),\n    is_staff: isChecked,\n    last_login: staff.last_login,\n    username: staff.username,\n    first_name: staff.first_name,\n    last_name: staff.last_name,\n    email: staff.email,\n    date_joined: staff.date_joined,\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    apiManager\n      .updateType(\"users\", editedStaff)\n      .then(() => props.history.push(\"/staff/list\"));\n  };\n\n  const skip = () => {\n    props.history.push(\"/staff/list\");\n  };\n\n  return (\n    <>\n      <Typography component=\"h1\" variant=\"h5\" className=\"page-header\">\n        Edit Staff Authentication Level\n      </Typography>\n      <form className=\"drop-downs\" onSubmit={handleSubmit}>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={3}>\n            <InputLabel htmlFor=\"age-native-simple\">First Name: </InputLabel>\n            <TextField\n              id=\"first_name\"\n              fullWidth\n              required\n              onChange={handleStaffChange}\n              value={staff.first_name}\n            />\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel htmlFor=\"age-native-simple\">Last Name: </InputLabel>\n            <TextField\n              id=\"last_name\"\n              fullWidth\n              required\n              onChange={handleStaffChange}\n              value={staff.last_name}\n            />\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={isChecked}\n                  onChange={handleIsCheckedChange}\n                  color=\"primary\"\n                />\n              }\n              label=\"Supervisor?\"\n            />\n          </Grid>\n        </Grid>\n        <div className=\"submit-button\">\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n            Submit\n          </Button>\n        </div>\n        <div className=\"submit-button\">\n          <Button variant=\"contained\" color=\"primary\" onClick={skip}>\n            Skip\n          </Button>\n        </div>\n      </form>\n    </>\n  );\n};\n\nexport default StaffEditForm;\n","import React, { useEffect, useState } from \"react\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { FaRegEdit } from \"react-icons/fa\";\nimport apiManager from \"../api/apiManager\";\n\nconst StaffList = (props) => {\n  const [users, setUsers] = useState([]);\n\n  const getUsers = () => {\n    apiManager.getAllType(\"users\").then((r) => {\n      r.sort((a, b) => a.first_name.localeCompare(b.first_name))\n        .sort((c, d) => d.is_staff - c.is_staff)\n        .sort((c, d) => d.is_superuser - c.is_superuser);\n      setUsers(r);\n    });\n  };\n\n  useEffect(() => {\n    getUsers();\n  }, []);\n\n  const editIconStyle = {\n    fontSize: 20,\n    paddingBottom: 2,\n  };\n\n  return (\n    <>\n      <Typography component=\"h1\" variant=\"h5\">\n        Staff List\n      </Typography>\n      <TableContainer>\n        <Table size=\"small\">\n          <TableHead>\n            <TableRow>\n              <TableCell style={{ fontWeight: 600 }}>Name</TableCell>\n              <TableCell style={{ fontWeight: 600 }}>Authorizations</TableCell>\n              {props.isSupervisor === true ? (\n                <TableCell style={{ fontWeight: 600 }}>Actions</TableCell>\n              ) : null}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {users.map((user) => (\n              <TableRow key={user.id} className=\"table_rows\">\n                <TableCell>\n                  {user.first_name} {user.last_name}\n                </TableCell>\n                {user.is_superuser === true ? (\n                  <TableCell>Admin</TableCell>\n                ) : (\n                  <>\n                    {user.is_staff === true ? (\n                      <TableCell>Supervisor</TableCell>\n                    ) : (\n                      <TableCell>Staff</TableCell>\n                    )}\n                  </>\n                )}\n                {props.isSupervisor === true ? (\n                  <TableCell>\n                    <span className=\"action-icon\">\n                      <FaRegEdit\n                        onClick={() =>\n                          props.history.push(`/staff/edit/${user.id}`)\n                        }\n                        style={editIconStyle}\n                      />\n                    </span>\n                  </TableCell>\n                ) : null}\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </>\n  );\n};\n\nexport default StaffList;\n","import React from \"../../node_modules/react\";\nimport RemoveCircleOutlineIcon from \"@material-ui/icons/RemoveCircleOutline\";\nimport { FaWheelchair } from \"react-icons/fa\";\nimport { FaRegEdit } from \"react-icons/fa\";\nimport { FaExchangeAlt } from \"react-icons/fa\";\n\nconst AssignmentCard = (props) => {\n  const assignment = props.assignment;\n  const chosenRoute = props.chosenRoute;\n  const removeAssignment = props.removeAssignment;\n\n  const localStyle = {\n    color: \"green\",\n    fontWeight: \"600\",\n  };\n\n  return (\n    <div className=\"assignment_card\">\n      <span>{assignment.driver.name} </span>\n      <span style={{ fontWeight: \"bold\" }}>\n        {assignment.driver.phone_number}{\" \"}\n      </span>\n      {assignment.driver.isLocal === true ? (\n        <span style={localStyle}>L</span>\n      ) : null}\n      {props.isSupervisor === true || props.isStaff === true ? (\n        <>\n          <RemoveCircleOutlineIcon\n            className=\"assignment_icon\"\n            onClick={() => removeAssignment(assignment.id)}\n            style={{ fontSize: 20 }}\n          />\n          <FaExchangeAlt\n            className=\"assignment_icon\"\n            onClick={() =>\n              props.history.push(\n                `/assignment/edit/${assignment.id}/${props.route.id}/${assignment.driver_id}/${assignment.vehicle_id}`\n              )\n            }\n            style={{ fontSize: 17 }}\n          />\n        </>\n      ) : null}\n      <FaRegEdit\n        className=\"assignment_icon\"\n        onClick={() =>\n          props.history.push(\n            `/driver/edit/${assignment.driver_id}/${assignment.vehicle_id}`\n          )\n        }\n        style={{ fontSize: 20 }}\n      />\n      <div>\n        <span style={{ fontWeight: \"bold\" }}>{assignment.vehicle.number} </span>\n        <span>{assignment.vehicle.company} </span>\n        <span style={{ fontWeight: \"bold\" }}>\n          {assignment.vehicle.capacity}{\" \"}\n        </span>\n        <span>{assignment.vehicle.kind} </span>\n        {assignment.vehicle.isAda === true ? (\n          <FaWheelchair style={{ color: \"red\" }} />\n        ) : null}\n      </div>\n      {chosenRoute === \"\" ? (\n        <></>\n      ) : (\n        <>\n          <span>\n            {assignment.start_time.slice(0, -3)} -{\" \"}\n            {assignment.end_time.slice(0, -3)}\n          </span>\n          <div>{assignment.driver.notes}</div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default AssignmentCard;\n","import React, { useEffect, useState } from \"../../node_modules/react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\nimport apiManager from \"../api/apiManager\";\nimport AssignmentCard from \"./assignmentCard\";\nimport \"../styles.css\";\n\nconst RouteCard = (props) => {\n  const route = props.route;\n  const chosenDate = props.chosenDate;\n  const chosenRoute = props.chosenRoute;\n  const [assignments, setAssignments] = useState([]);\n\n  useEffect(() => {\n    apiManager\n      .getAssignmentsByDateRoute(parseInt(chosenDate), route.id)\n      .then((r) => {\n        r.sort((a, b) => (a.vehicle.number > b.vehicle.number ? -1 : 1))\n          .sort((a, b) =>\n            a.vehicle.number.length > b.vehicle.number.length ? 1 : -1\n          )\n          .sort((c, d) => c.vehicle.company.localeCompare(d.vehicle.company));\n        setAssignments(r);\n      });\n  }, [chosenDate, route.id]);\n\n  const removeAssignment = (id) => {\n    const check = window.confirm(\n      \"Are you sure you want to delete this assignment? Deletion cannot be undone.\"\n    );\n    if (check === true) {\n      apiManager.deleteTypeWithId(\"assignments\", id).then(() =>\n        apiManager\n          .getAssignmentsByDateRoute(parseInt(chosenDate), route.id)\n          .then((r) => {\n            setAssignments(r);\n          })\n      );\n    }\n  };\n\n  let routeName = \"\";\n  parseInt(route.name) < 10\n    ? (routeName = route.name.slice(1))\n    : (routeName = route.name);\n\n  const routeColor = {\n    color: route.color,\n    fontWeight: \"600\",\n  };\n\n  const routeBorder = {\n    borderColor: route.color,\n  };\n\n  return (\n    <>\n      <div className=\"route_border\" style={routeBorder}>\n        {isNaN(route.name) === true ? (\n          <Typography component=\"h6\" className=\"route_name\" style={routeColor}>\n            {routeName} {route.description}\n          </Typography>\n        ) : (\n          <Typography component=\"h6\" className=\"route_name\" style={routeColor}>\n            Route {routeName} {route.description}\n          </Typography>\n        )}\n        {props.isSupervisor === true || props.isStaff === true ? (\n          <AddCircleOutlineIcon\n            className=\"route_icon\"\n            onClick={() =>\n              props.history.push(`/assignment/add/${props.route.id}`)\n            }\n            style={{ fontSize: 20 }}\n            value={route.id}\n          />\n        ) : null}\n        <div>\n          {assignments.map((assignment) => (\n            <AssignmentCard\n              key={assignment.id}\n              assignment={assignment}\n              chosenRoute={chosenRoute}\n              removeAssignment={removeAssignment}\n              {...props}\n            />\n          ))}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default RouteCard;\n","import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport Typography from \"@material-ui/core/Typography\";\nimport RouteCard from \"./routeCard\";\n\nconst RouteView = (props) => {\n  const dates = props.dates;\n  const routes = props.routes;\n  const chosenDate = props.chosenDate;\n  const chosenRoute = props.chosenRoute;\n  const handleChosenDateChange = props.handleChosenDateChange;\n  const handleChosenRouteChange = props.handleChosenRouteChange;\n\n  const filteredRoutes = routes.filter((each) =>\n    each.name.includes(chosenRoute)\n  );\n\n  return (\n    <>\n      <Typography component=\"h1\" variant=\"h5\" className=\"page-header\">\n        Route View\n      </Typography>\n      <div className=\"drop-downs\">\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={3}>\n            <InputLabel>Date:</InputLabel>\n            <Select\n              id=\"date_id\"\n              native\n              onChange={handleChosenDateChange}\n              fullWidth\n              required\n              value={chosenDate}\n            >\n              <option aria-label=\"None\" value=\"\" data-name=\"\">\n                Choose Date\n              </option>\n              {dates ? (\n                dates.map((date) => (\n                  <option\n                    key={date.id}\n                    value={parseInt(date.id)}\n                    data-name={date.date}\n                  >\n                    {date.date}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel>Route:</InputLabel>\n            <Select\n              id=\"routeId\"\n              native\n              onChange={handleChosenRouteChange}\n              fullWidth\n              required\n              value={chosenRoute}\n            >\n              <option aria-label=\"None\" value=\"\">\n                All Routes\n              </option>\n              {routes ? (\n                routes.map((route) => (\n                  <option key={route.id} value={route.name}>\n                    {route.name} {route.description}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n        </Grid>\n      </div>\n      {chosenDate !== \"\" ? (\n        <div className=\"route_card\">\n          {filteredRoutes.map((route) => (\n            <RouteCard\n              key={route.id}\n              route={route}\n              chosenDate={chosenDate}\n              chosenRoute={chosenRoute}\n              {...props}\n            />\n          ))}\n        </div>\n      ) : null}\n    </>\n  );\n};\n\nexport default RouteView;\n","import React, { useEffect, useState } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Typography from \"@material-ui/core/Typography\";\nimport TextField from \"@material-ui/core/TextField\";\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\nimport { FaRegEdit } from \"react-icons/fa\";\nimport apiManager from \"../api/apiManager\";\n\nconst DriverList = (props) => {\n  const dates = props.dates;\n  const routes = props.routes;\n  const chosenDateId = props.chosenDateId;\n  const chosenDateName = props.chosenDateName;\n  const chosenRoute = props.chosenRoute;\n  const handleChosenDateChange = props.handleChosenDateChange;\n  const handleChosenRouteChange = props.handleChosenRouteChange;\n\n  let [assignments, setAssignments] = useState([]);\n\n  const getAssignments = () => {\n    apiManager.getAllType(\"assignments\").then((r) => {\n      setAssignments(r);\n    });\n  };\n\n  const [searchField, setSearchField] = useState(\"\");\n\n  const handleSearchChange = (e) => {\n    setSearchField(e.target.value.toLowerCase());\n  };\n\n  let filteredAssignments = assignments\n    .filter((each) => each.route.name.includes(chosenRoute))\n    .filter((each1) => each1.date.date.includes(chosenDateName))\n    .filter(\n      (each2) =>\n        each2.driver.name.toLowerCase().includes(searchField) ||\n        each2.driver.notes.toLowerCase().includes(searchField) ||\n        each2.vehicle.company.toLowerCase().includes(searchField) ||\n        each2.vehicle.number.includes(searchField)\n    )\n    .sort((a, b) => a.route.name.localeCompare(b.route.name))\n    .sort((a, b) => a.vehicle.company.localeCompare(b.vehicle.company))\n    .sort((a, b) => a.date.date.localeCompare(b.date.date));\n\n  const [sortField, setSortField] = useState(null);\n\n  if (sortField === \"date\") {\n    filteredAssignments.sort((a, b) => a.date.date.localeCompare(b.date.date));\n  } else if (sortField === \"driver\") {\n    filteredAssignments.sort((a, b) =>\n      a.driver.name.localeCompare(b.driver.name)\n    );\n  } else if (sortField === \"company\") {\n    filteredAssignments.sort((a, b) =>\n      a.vehicle.company.localeCompare(b.vehicle.company)\n    );\n  } else if (sortField === \"route\") {\n    filteredAssignments.sort((a, b) =>\n      a.route.name.localeCompare(b.route.name)\n    );\n  } else if (sortField === \"local\") {\n    filteredAssignments.sort((a, b) =>\n      a.driver.isLocal === b.driver.isLocal ? 0 : a.driver.isLocal ? -1 : 1\n    );\n  }\n\n  useEffect(() => {\n    getAssignments();\n  }, []);\n\n  let totalDriverCount = 0;\n  if (filteredAssignments.length !== 0) {\n    totalDriverCount = filteredAssignments.length;\n  }\n\n  const [arrow, setArrow] = useState(null);\n\n  return (\n    <>\n      <Typography component=\"h1\" variant=\"h5\">\n        Driver List\n      </Typography>\n      <div className=\"drop-downs\">\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={3}>\n            <InputLabel>Date:</InputLabel>\n            <Select\n              id=\"dateId\"\n              native\n              onChange={handleChosenDateChange}\n              fullWidth\n              required\n              value={chosenDateId}\n            >\n              <option aria-label=\"None\" value=\"\" data-name=\"\">\n                All Dates\n              </option>\n              {dates ? (\n                dates.map((date) => (\n                  <option key={date.id} value={date.id} data-name={date.date}>\n                    {date.date}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel>Route:</InputLabel>\n            <Select\n              id=\"routeId\"\n              native\n              onChange={handleChosenRouteChange}\n              fullWidth\n              required\n              value={chosenRoute}\n            >\n              <option aria-label=\"None\" value=\"\">\n                All Routes\n              </option>\n              {routes ? (\n                routes.map((route) => (\n                  <option key={route.id} value={route.name}>\n                    {route.name} {route.description}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel htmlFor=\"age-native-simple\">Search:</InputLabel>\n            <TextField\n              type=\"text\"\n              id=\"keyword\"\n              fullWidth\n              onChange={handleSearchChange}\n              value={searchField}\n            />\n          </Grid>\n        </Grid>\n      </div>\n      <Typography variant=\"h6\">{totalDriverCount} drivers</Typography>\n      <TableContainer>\n        <Table size=\"small\">\n          <TableHead>\n            <TableRow>\n              {chosenDateId === \"\" ? (\n                <TableCell\n                  className=\"table_column_header\"\n                  style={{ fontWeight: 600 }}\n                  onClick={() => setSortField(\"date\")}\n                  onMouseEnter={() => setArrow(\"date\")}\n                  onMouseLeave={() => setArrow(\"\")}\n                >\n                  Dates\n                  {arrow === \"date\" ? <ArrowDropDownIcon /> : null}\n                </TableCell>\n              ) : null}\n              <TableCell\n                className=\"table_column_header\"\n                style={{ fontWeight: 600 }}\n                onClick={() => setSortField(\"driver\")}\n                onMouseEnter={() => setArrow(\"driver\")}\n                onMouseLeave={() => setArrow(\"\")}\n              >\n                Name\n                <div>Phone #</div>\n                {arrow === \"driver\" ? <ArrowDropDownIcon /> : null}\n              </TableCell>\n              <TableCell\n                className=\"table_column_header\"\n                style={{ fontWeight: 600 }}\n                onClick={() => setSortField(\"company\")}\n                onMouseEnter={() => setArrow(\"company\")}\n                onMouseLeave={() => setArrow(\"\")}\n              >\n                Company<div>Vehicle #</div>\n                {arrow === \"company\" ? <ArrowDropDownIcon /> : null}\n              </TableCell>\n              {chosenRoute === \"\" ? (\n                <TableCell\n                  className=\"table_column_header\"\n                  style={{ fontWeight: 600 }}\n                  onClick={() => setSortField(\"route\")}\n                  onMouseEnter={() => setArrow(\"route\")}\n                  onMouseLeave={() => setArrow(\"\")}\n                >\n                  Route\n                  {arrow === \"route\" ? <ArrowDropDownIcon /> : null}\n                </TableCell>\n              ) : null}\n              <TableCell\n                style={{ fontWeight: 600 }}\n                onClick={() => setSortField(\"local\")}\n                onMouseEnter={() => setArrow(\"local\")}\n                onMouseLeave={() => setArrow(\"\")}\n              >\n                Local\n                {arrow === \"local\" ? <ArrowDropDownIcon /> : null}\n              </TableCell>\n              <TableCell style={{ fontWeight: 600 }}>Notes</TableCell>\n              <TableCell style={{ fontWeight: 600 }}>Actions</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {filteredAssignments.map((assignment) => (\n              <TableRow key={assignment.id} className=\"table_rows\">\n                {chosenDateId === \"\" ? (\n                  <TableCell>{assignment.date.date.slice(5)}</TableCell>\n                ) : null}\n                <TableCell className=\"list_name\">\n                  {assignment.driver.name}\n                  <div>{assignment.driver.phone_number}</div>\n                </TableCell>\n                <TableCell className=\"list_phone\">\n                  {assignment.vehicle.company}\n                  <div>{assignment.vehicle.number}</div>\n                </TableCell>\n                {chosenRoute === \"\" ? (\n                  <>\n                    {parseInt(assignment.route.name) < 10 ? (\n                      <TableCell>{assignment.route.name.slice(1)}</TableCell>\n                    ) : (\n                      <TableCell>{assignment.route.name}</TableCell>\n                    )}\n                  </>\n                ) : null}\n                {assignment.driver.isLocal === true ? (\n                  <TableCell className=\"is_local\">Local</TableCell>\n                ) : (\n                  <TableCell></TableCell>\n                )}\n                <TableCell className=\"list_notes\">\n                  {assignment.driver.notes}\n                </TableCell>\n                <TableCell>\n                  <span className=\"action-icon\">\n                    <FaRegEdit\n                      style={{ fontSize: 20 }}\n                      onClick={() =>\n                        props.history.push(\n                          `/driver/edit/${assignment.driver_id}/${assignment.vehicle_id}`\n                        )\n                      }\n                    />\n                  </span>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </>\n  );\n};\n\nexport default DriverList;\n","import React, { useState } from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport DateForm from \"./forms/dateForm\";\nimport ShuttleForm from \"./forms/shuttleForm\";\nimport RouteForm from \"./forms/routeForm\";\nimport PlaceForm from \"./forms/placeForm\";\nimport DriverForm from \"./forms/driverForm\";\nimport DriverEditForm from \"./forms/driverEditForm\";\nimport VehicleForm from \"./forms/vehicleForm\";\nimport VehicleEditForm from \"./forms/vehicleEditForm\";\nimport AssignmentForm from \"./forms/assignmentForm\";\nimport AssignmentAddForm from \"./forms/assignmentAddForm\";\nimport AssignmentEditForm from \"./forms/assignmentEditForm\";\nimport StaffEditForm from \"./forms/editStaffForm\";\nimport StaffList from \"./drivers/staffList\";\nimport RouteView from \"./routeView/routeView\";\nimport DriverList from \"./drivers/driverList\";\nimport \"./styles.css\";\n\nconst EventTranspoManager = (props) => {\n  const hasUser = props.hasUser;\n  const isSupervisor = props.isSupervisor;\n  const isStaff = props.isStaff;\n  const dates = props.dates;\n  const routes = props.routes;\n  const chosenDateId = props.chosenDateId;\n  const chosenDateName = props.chosenDateName;\n  const chosenRoute = props.chosenRoute;\n  const handleChosenRouteChange = props.handleChosenRouteChange;\n  const handleChosenDateChange = props.handleChosenDateChange;\n  const getDates = props.getDates;\n  const getShuttles = props.getShuttles;\n  const getRoutes = props.getRoutes;\n  const getPlaces = props.getPlaces;\n  const [driverId, setDriverId] = useState(1);\n  const [vehicleId, setVehicleId] = useState(1);\n\n  return (\n    <>\n      <Route exact path=\"/\" render={() => <Redirect to=\"/route/view\" />} />\n      <Route\n        exact\n        path=\"/date/form\"\n        render={() =>\n          hasUser ? (\n            <DateForm getDates={getDates} {...props} />\n          ) : (\n            <Redirect to=\"/login\" />\n          )\n        }\n      />\n      <Route\n        exact\n        path=\"/shuttle/form\"\n        render={() =>\n          hasUser ? (\n            <ShuttleForm getShuttles={getShuttles} {...props} />\n          ) : (\n            <Redirect to=\"/login\" />\n          )\n        }\n      />\n      <Route\n        exact\n        path=\"/route/form\"\n        render={() =>\n          hasUser ? (\n            <RouteForm getRoutes={getRoutes} {...props} />\n          ) : (\n            <Redirect to=\"/login\" />\n          )\n        }\n      />\n      <Route\n        exact\n        path=\"/location/form\"\n        render={() =>\n          hasUser ? (\n            <PlaceForm routes={routes} getPlaces={getPlaces} {...props} />\n          ) : (\n            <Redirect to=\"/login\" />\n          )\n        }\n      />\n      <Route\n        exact\n        path=\"/driver/form\"\n        render={(props) =>\n          hasUser ? (\n            <DriverForm setDriverId={setDriverId} {...props} />\n          ) : (\n            <Redirect to=\"/login\" />\n          )\n        }\n      />\n      <Route\n        exact\n        path=\"/driver/edit/:driverId(\\d+)/:vehicleId(\\d+)\"\n        render={(props) =>\n          hasUser ? <DriverEditForm {...props} /> : <Redirect to=\"/login\" />\n        }\n      />\n      <Route\n        exact\n        path=\"/vehicle/form\"\n        render={(props) =>\n          hasUser ? (\n            <VehicleForm setVehicleId={setVehicleId} {...props} />\n          ) : (\n            <Redirect to=\"/login\" />\n          )\n        }\n      />\n      <Route\n        exact\n        path=\"/vehicle/edit/:driverId(\\d+)/:vehicleId(\\d+)\"\n        render={(props) =>\n          hasUser ? <VehicleEditForm {...props} /> : <Redirect to=\"/login\" />\n        }\n      />\n      <Route\n        exact\n        path=\"/assignment/form\"\n        render={(props) =>\n          hasUser ? (\n            <AssignmentForm\n              chosenDate={chosenDateId}\n              handleChosenDateChange={handleChosenDateChange}\n              driverId={driverId}\n              vehicleId={vehicleId}\n              {...props}\n            />\n          ) : (\n            <Redirect to=\"/login\" />\n          )\n        }\n      />\n      <Route\n        exact\n        path=\"/assignment/add/:routeId(\\d+)\"\n        render={(props) =>\n          hasUser ? (\n            <AssignmentAddForm\n              chosenDate={chosenDateId}\n              handleChosenDateChange={handleChosenDateChange}\n              {...props}\n            />\n          ) : (\n            <Redirect to=\"/login\" />\n          )\n        }\n      />\n      <Route\n        exact\n        path=\"/assignment/edit/:assignmentId(\\d+)/:routeId(\\d+)/:driverId(\\d+)/:vehicleId(\\d+)\"\n        render={(props) =>\n          hasUser ? <AssignmentEditForm {...props} /> : <Redirect to=\"/login\" />\n        }\n      />\n      <Route\n        exact\n        path=\"/staff/edit/:userId(\\d+)\"\n        render={(props) =>\n          hasUser ? <StaffEditForm {...props} /> : <Redirect to=\"/login\" />\n        }\n      />\n      <Route\n        exact\n        path=\"/route/view\"\n        render={(props) =>\n          hasUser ? (\n            <RouteView\n              isStaff={isStaff}\n              isSupervisor={isSupervisor}\n              dates={dates}\n              routes={routes}\n              chosenDate={chosenDateId}\n              chosenRoute={chosenRoute}\n              handleChosenDateChange={handleChosenDateChange}\n              handleChosenRouteChange={handleChosenRouteChange}\n              {...props}\n            />\n          ) : (\n            <Redirect to=\"/login\" />\n          )\n        }\n      />\n      <Route\n        exact\n        path=\"/driver/list\"\n        render={(props) =>\n          hasUser ? (\n            <DriverList\n              dates={dates}\n              routes={routes}\n              chosenDateId={chosenDateId}\n              chosenDateName={chosenDateName}\n              chosenRoute={chosenRoute}\n              handleChosenDateChange={handleChosenDateChange}\n              handleChosenRouteChange={handleChosenRouteChange}\n              {...props}\n            />\n          ) : (\n            <Redirect to=\"/login\" />\n          )\n        }\n      />\n      <Route\n        exact\n        path=\"/staff/list\"\n        render={(props) =>\n          hasUser ? (\n            <StaffList\n              isStaff={isStaff}\n              isSupervisor={isSupervisor}\n              {...props}\n            />\n          ) : (\n            <Redirect to=\"/login\" />\n          )\n        }\n      />\n    </>\n  );\n};\n\nexport default EventTranspoManager;\n","import React, { useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { Link } from \"react-router-dom\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Container from \"@material-ui/core/Container\";\nimport Typography from \"@material-ui/core/Typography\";\nimport apiManager from \"../api/apiManager\";\nimport \"../styles.css\";\n\nconst Login = (props) => {\n  const [formData, setFormData] = useState({\n    username: \"\",\n    password: \"\",\n  });\n\n  const handleFieldChange = (evt) => {\n    const stateToChange = { ...formData };\n    stateToChange[evt.target.id] = evt.target.value;\n    setFormData(stateToChange);\n  };\n\n  const handleLogin = (e) => {\n    e.preventDefault();\n\n    const user = {\n      username: formData.username,\n      password: formData.password,\n    };\n\n    apiManager.login(user).then((r) => {\n      if (\"token\" in r) {\n        props.setUserToken(r);\n        props.findSupervisor()\n        props.history.push(\"/\");\n      } else {\n        alert(\"User/password combination not found.\");\n      }\n    });\n  };\n\n  return (\n    <>\n      <Container component=\"main\" maxWidth=\"xs\">\n        <div onSubmit={handleLogin}>\n          <Grid container component=\"main\">\n            <CssBaseline />\n            <Grid>\n              <div>\n                <Typography component=\"h1\" variant=\"h5\">\n                  Login\n                </Typography>\n                <form noValidate>\n                  <TextField\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                    required\n                    fullWidth\n                    id=\"username\"\n                    label=\"Username\"\n                    name=\"username\"\n                    autoComplete=\"username\"\n                    autoFocus\n                    onChange={handleFieldChange}\n                  />\n                  <TextField\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                    required\n                    fullWidth\n                    name=\"password\"\n                    label=\"Password\"\n                    type=\"password\"\n                    id=\"password\"\n                    autoComplete=\"current-password\"\n                    onChange={handleFieldChange}\n                  />\n                  <br></br><br></br>\n                  <Button\n                    type=\"submit\"\n                    fullWidth\n                    variant=\"contained\"\n                    color=\"primary\"\n                  >\n                    Sign In\n                  </Button>\n                  <Grid container>\n                    <Grid item>\n                      <br></br>\n                      <Link to=\"/register\" variant=\"body2\">\n                        {\"Don't have an account? Sign Up\"}\n                      </Link>\n                    </Grid>\n                  </Grid>\n                </form>\n              </div>\n            </Grid>\n          </Grid>\n        </div>\n      </Container>\n    </>\n  );\n};\n\nexport default Login;\n","import React, { useState } from \"react\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { Link } from \"react-router-dom\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Container from \"@material-ui/core/Container\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport apiManager from \"../api/apiManager\";\n\nconst Register = (props) => {\n  const [formData, setFormData] = useState({\n    username: \"\",\n    email: \"\",\n    password: \"\",\n    firstName: \"\",\n    lastName: \"\",\n  });\n\n  const handleFieldChange = (evt) => {\n    const stateToChange = { ...formData };\n    stateToChange[evt.target.id] = evt.target.value;\n    setFormData(stateToChange);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    let errors = [];\n    for (let item in formData) {\n      if (formData[item].trim() === \"\") {\n        let newItem = [];\n        [...item].forEach((element) => {\n          if (element === element.toUpperCase()) {\n            newItem.push(\" \");\n          }\n          newItem.push(element.toLowerCase());\n        });\n        errors.push(newItem.join(\"\"));\n      }\n    }\n\n    const user = {\n      username: formData.username.trim(),\n      email: formData.email.trim(),\n      password: formData.password,\n      first_name: formData.firstName.trim(),\n      last_name: formData.lastName.trim(),\n    };\n\n    apiManager\n      .register(user)\n      .then((r) => {\n        if (\"token\" in r) {\n          props.setUserToken(r);\n          props.history.push(\"/entry/form\");\n        }\n      })\n      // With a 500 HTTP error, no response is given,\n      // so the error must be handled with .catch\n      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch\n      .catch(() => {\n        alert(\n          \"This username has already been taken, please try a different one\"\n        );\n      });\n  };\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div>\n        <Typography component=\"h1\" variant=\"h5\">\n          Create new account\n        </Typography>\n        <form onSubmit={handleSubmit} autoComplete=\"on\">\n          <Grid container spacing={2}>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                autoComplete=\"fname\"\n                margin=\"normal\"\n                name=\"firstName\"\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"firstName\"\n                label=\"First Name\"\n                autoFocus\n                onChange={handleFieldChange}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                variant=\"outlined\"\n                margin=\"normal\"\n                required\n                fullWidth\n                id=\"lastName\"\n                label=\"Last Name\"\n                name=\"lastName\"\n                autoComplete=\"lname\"\n                onChange={handleFieldChange}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                margin=\"normal\"\n                required\n                fullWidth\n                id=\"username\"\n                label=\"Username\"\n                name=\"username\"\n                autoComplete=\"username\"\n                onChange={handleFieldChange}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                margin=\"normal\"\n                required\n                fullWidth\n                id=\"email\"\n                label=\"Email Address\"\n                name=\"email\"\n                autoComplete=\"email\"\n                onChange={handleFieldChange}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                margin=\"normal\"\n                required\n                fullWidth\n                name=\"password\"\n                label=\"Password\"\n                type=\"password\"\n                id=\"password\"\n                autoComplete=\"current-password\"\n                onChange={handleFieldChange}\n              />\n            </Grid>\n          </Grid>\n          <br></br>\n          <Button type=\"submit\" fullWidth variant=\"contained\" color=\"primary\">\n            Submit\n          </Button>\n        </form>\n        <Grid container justify=\"flex-end\">\n          <Grid item>\n            <br></br>\n            <Link to=\"/\" variant=\"body2\">\n              Already have an account? Sign in\n            </Link>\n          </Grid>\n        </Grid>\n      </div>\n    </Container>\n  );\n};\n\nexport default Register;\n","import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter, Route, Redirect } from \"react-router-dom\";\nimport NavBar from \"./navbar\";\nimport EventTranspoTracker from \"./eventTranspoTracker\";\nimport EventTranspoManager from \"./eventTranspoManager\";\nimport Login from \"./auth/login\";\nimport Register from \"./auth/register\";\nimport apiManager from \"./api/apiManager\";\nimport \"./styles.css\";\n\nconst AppViews = (props) => {\n  const isAuthenticated = () => sessionStorage.getItem(\"token\") !== null;\n  const [hasUser, setHasUser] = useState(isAuthenticated());\n  const [isSupervisor, setIsSupervisor] = useState(Boolean);\n  const [isStaff, setIsStaff] = useState(Boolean);\n\n  const findSupervisor = () => {\n    apiManager\n      .getSingleType(\"users\", sessionStorage.getItem(\"userID\"))\n      .then((r) => {\n        setIsSupervisor(r.is_superuser);\n        setIsStaff(r.is_staff);\n      });\n  };\n\n  const setUserToken = (resp) => {\n    sessionStorage.setItem(\"token\", resp.token);\n    sessionStorage.setItem(\"userID\", resp.user_id);\n    setHasUser(isAuthenticated());\n  };\n\n  const clearUser = () => {\n    sessionStorage.clear();\n    setHasUser(isAuthenticated());\n    setIsSupervisor(false);\n    setIsStaff(false);\n    setChosenRoute(\"\");\n  };\n\n  const [mode, setMode] = useState(false);\n  const handleModeChange = () => {\n    setMode(!mode);\n    findSupervisor();\n  };\n\n  // places routes and shuttles fill the dropdown menus\n  // places filter based on chosenRoute\n  // chosenPlace chosenRoute and chosenShuttle are the choices made from the dropdowns\n  const [dates, setDates] = useState([]);\n  const [shuttles, setShuttles] = useState([]);\n  const [routes, setRoutes] = useState([]);\n  const [places, setPlaces] = useState([]);\n  // const [assignments, setAssignments] = useState([]);\n  const [entries, setEntries] = useState([]);\n  const [chosenDateId, setChosenDateId] = useState(\"\");\n  const [chosenDateName, setChosenDateName] = useState(\"\");\n  const [chosenShuttleId, setChosenShuttleId] = useState(\"\");\n  const [chosenShuttleName, setChosenShuttleName] = useState(\"\");\n  const [chosenRoute, setChosenRoute] = useState(\"\");\n  const [chosenPlaceId, setChosenPlaceId] = useState(\"\");\n  const [chosenPlaceName, setChosenPlaceName] = useState(\"\");\n  // const [chosenVehicle, setChosenVehicle] = useState(\"\");\n\n  // get and sort all dropdowns\n  const getDates = () => {\n    apiManager.getAllType(\"dates\").then((r) => {\n      r.sort((a, b) => a.date.localeCompare(b.date));\n      setDates(r);\n    });\n  };\n\n  const getShuttles = () => {\n    apiManager.getAllType(\"shuttles\").then((r) => {\n      r.sort((a, b) => a.name.localeCompare(b.name));\n      setShuttles(r);\n    });\n  };\n\n  const getRoutes = () => {\n    apiManager.getAllType(\"routes\").then((r) => {\n      r.sort((a, b) => a.name.localeCompare(b.name));\n      setRoutes(r);\n    });\n  };\n\n  const getPlaces = () => {\n    apiManager.getAllType(\"places\").then((r) => {\n      r.sort((a, b) => a.name.localeCompare(b.name));\n      setPlaces(r);\n    });\n  };\n\n  // const getAssignments = () => {\n  //   apiManager.getAllType(\"assignments\").then((r) => {\n  //     r.sort((a, b) => a.vehicle.number.localeCompare(b.vehicle.number));\n  //     setAssignments(r);\n  //   });\n  // };\n\n  const getEntries = () => {\n    apiManager.getAllType(\"entries\").then((r) => {\n      setEntries(r);\n    });\n  };\n\n  // set chosenPlace based on choice from dropdown menu\n  const handleChosenPlaceChange = (e) => {\n    setChosenPlaceId(e.target.value);\n    setChosenPlaceName(e.target.options[e.target.selectedIndex].dataset.name);\n    if (e.target.value !== \"\") {\n    } else {\n      apiManager.getAllType(\"routes\").then((r) => {\n        r.sort((a, b) => a.name.localeCompare(b.name));\n        setRoutes(r);\n      });\n    }\n  };\n\n  // // set choseroute based on choice from dropdown menu on form log and graph\n  const handleChosenRouteChange = (e) => {\n    const routeId = e.target.value;\n    setChosenRoute(routeId);\n    setChosenPlaceId(\"\");\n    setChosenPlaceName(\"\");\n    apiManager.getAllType(\"places\").then((r) => {\n      if (routeId !== \"\") {\n        setPlaces(\n          r\n            .filter((each) => each.route.name === routeId)\n            .sort((a, b) => a.name.localeCompare(b.name))\n        );\n      } else {\n        setPlaces(r.sort((a, b) => a.name.localeCompare(b.name)));\n      }\n    });\n  };\n\n  // setChosenVehicle(\"\");\n  // apiManager.getAllType(\"assigments\").then((r) => {\n  //   setAssignments(\n  //     r.sort((a, b) => a.vehicle.number.localeCompare(b.vehicle.number))\n  //   );\n  // });\n\n  // set chosenShuttleId based on choice from dropdown menu\n  const handleChosenShuttleChange = (e) => {\n    setChosenShuttleId(e.target.value);\n    setChosenShuttleName(e.target.options[e.target.selectedIndex].dataset.name);\n  };\n\n  // set chosenDate based on choice from dropdown menu\n  const handleChosenDateChange = (e) => {\n    setChosenDateId(e.target.value);\n    setChosenDateName(e.target.options[e.target.selectedIndex].dataset.name);\n  };\n\n  // const handleChosenVehicleChange = (e) => {\n  //   setChosenVehicle(e.target.value);\n  // };\n\n  useEffect(() => {\n    getDates();\n    getShuttles();\n    getRoutes();\n    getPlaces();\n    // getVehicles();\n  }, []);\n\n  return (\n    <BrowserRouter>\n      <>\n        {hasUser ? (\n          <>\n            <NavBar\n              hasUser={hasUser}\n              clearUser={clearUser}\n              isSupervisor={isSupervisor}\n              isStaff={isStaff}\n              mode={mode}\n              handleModeChange={handleModeChange}\n              {...props}\n            />\n            <>\n              {mode === false ? (\n                <EventTranspoTracker\n                  hasUser={hasUser}\n                  isSupervisor={isSupervisor}\n                  dates={dates}\n                  shuttles={shuttles}\n                  routes={routes}\n                  places={places}\n                  // vehicles={vehicles}\n                  entries={entries}\n                  chosenDateId={chosenDateId}\n                  chosenDateName={chosenDateName}\n                  chosenShuttleId={chosenShuttleId}\n                  chosenShuttleName={chosenShuttleName}\n                  chosenRoute={chosenRoute}\n                  chosenPlaceId={chosenPlaceId}\n                  chosenPlaceName={chosenPlaceName}\n                  // chosenVehicle={chosenVehicle}\n                  getEntries={getEntries}\n                  handleChosenPlaceChange={handleChosenPlaceChange}\n                  handleChosenRouteChange={handleChosenRouteChange}\n                  handleChosenShuttleChange={handleChosenShuttleChange}\n                  handleChosenDateChange={handleChosenDateChange}\n                  // handleChosenVehicleChange={handleChosenVehicleChange}\n                  {...props}\n                />\n              ) : (\n                <EventTranspoManager\n                  hasUser={hasUser}\n                  isSupervisor={isSupervisor}\n                  isStaff={isStaff}\n                  dates={dates}\n                  routes={routes}\n                  chosenDateId={chosenDateId}\n                  chosenDateName={chosenDateName}\n                  chosenRoute={chosenRoute}\n                  handleChosenRouteChange={handleChosenRouteChange}\n                  handleChosenDateChange={handleChosenDateChange}\n                  getDates={getDates}\n                  getShuttles={getShuttles}\n                  getRoutes={getRoutes}\n                  getPlaces={getPlaces}\n                  {...props}\n                />\n              )}\n            </>\n          </>\n        ) : (\n          <>\n            <Route exact path=\"/\" render={() => <Redirect to=\"/login\" />} />\n            <Route\n              exact\n              path=\"/login\"\n              render={(props) => (\n                <Login\n                  setUserToken={setUserToken}\n                  findSupervisor={findSupervisor}\n                  {...props}\n                />\n              )}\n            />\n            <Route\n              exact\n              path=\"/register\"\n              render={(props) => (\n                <Register setUserToken={setUserToken} {...props} />\n              )}\n            />\n          </>\n        )}\n      </>\n    </BrowserRouter>\n  );\n};\n\nexport default AppViews;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport AppViews from \"./appViews\";\n\nReactDOM.render(<AppViews />, document.getElementById(\"root\"));\n\n\n"],"sourceRoot":""}