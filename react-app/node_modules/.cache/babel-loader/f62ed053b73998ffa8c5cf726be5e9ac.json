{"ast":null,"code":"var _jsxFileName = \"/Users/MainTechPiece/workspace/final-capstone-react-app/src/logs/locationLog.js\";\nimport React, { useState, useEffect } from \"react\";\nimport EntryCard from \"./entryCard\";\nimport Grid from \"@material-ui/core/Grid\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Paper from \"@material-ui/core/Paper\";\nimport apiManager from \"../api/apiManager\";\n\nconst LocationLog = props => {\n  const locations = props.locations;\n  const events = props.events;\n  const dates = props.uniqueDates;\n  const chosenLocation = props.chosenLocation;\n  const chosenEvent = props.chosenEvent;\n  const chosenDate = props.chosenDate;\n  const handleChosenLocationChange = props.handleChosenLocationChange;\n  const handleChosenEventChange = props.handleChosenEventChange;\n  const handleChosenDateChange = props.handleChosenDateChange;\n  const [entries, setEntries] = useState([]); //  get token for authentication\n\n  let token = window.sessionStorage.getItem(\"token\"); // get entries based on location and event chosen from dropdowns, filter by date, then sort by time\n\n  const getEntries = (locationId, eventId) => {\n    apiManager.getEntriesByLocationAndEvent(locationId, eventId).then(r => {\n      setEntries(r);\n    });\n  };\n\n  const entriesByDate = entries.filter(entry => entry.date.includes(chosenDate)).sort((a, b) => a.time.localeCompare(b.time));\n  let totalAttendeeCount = 0;\n\n  if (entriesByDate.length !== 0) {\n    totalAttendeeCount = entriesByDate.map(entry => entry.attendee_count).reduce((accumulator, runningTotal) => accumulator + runningTotal);\n  }\n\n  const deleteThisEntry = id => {\n    apiManager.deleteEntry(id).then(() => {\n      getEntries(props.chosenLocation, props.chosenEvent);\n    });\n  };\n\n  useEffect(() => {\n    getEntries(props.chosenLocation, props.chosenEvent);\n  }, [props.chosenLocation, props.chosenEvent]);\n  let routeName = \"\";\n  let routeDescription = \"\";\n  let routeColor = \"\";\n\n  if (entries.length !== 0) {\n    routeName = entries[0].location.route.name;\n    routeDescription = entries[0].location.route.description;\n    routeColor = entries[0].location.route.color;\n  }\n\n  const routeStyle = {\n    color: routeColor\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    component: \"h1\",\n    variant: \"h5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, \"Location Logs\"), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, \"Event:\"), /*#__PURE__*/React.createElement(Select, {\n    id: \"eventId\",\n    native: true,\n    onChange: handleChosenEventChange,\n    fullWidth: true,\n    required: true,\n    label: \"??\",\n    value: chosenEvent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }, events ? events.map(event => /*#__PURE__*/React.createElement(\"option\", {\n    key: event.id,\n    value: parseInt(event.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 19\n    }\n  }, event.name)) : /*#__PURE__*/React.createElement(React.Fragment, null))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }, \"Location:\"), /*#__PURE__*/React.createElement(Select, {\n    id: \"locationId\",\n    native: true,\n    onChange: handleChosenLocationChange,\n    fullWidth: true,\n    required: true,\n    label: \"??\",\n    value: chosenLocation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  }, locations ? locations.map(location => /*#__PURE__*/React.createElement(\"option\", {\n    key: location.id,\n    value: parseInt(location.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 19\n    }\n  }, location.name)) : /*#__PURE__*/React.createElement(React.Fragment, null))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  }, \"Date:\"), /*#__PURE__*/React.createElement(Select, {\n    id: \"dateId\",\n    native: true,\n    onChange: handleChosenDateChange,\n    fullWidth: true,\n    required: true,\n    label: \"??\",\n    value: chosenDate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    \"aria-label\": \"None\",\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 15\n    }\n  }, \"Choose Date\"), dates ? dates.map(date => /*#__PURE__*/React.createElement(\"option\", {\n    key: date,\n    value: date,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 19\n    }\n  }, date)) : /*#__PURE__*/React.createElement(React.Fragment, null))))), /*#__PURE__*/React.createElement(\"div\", {\n    style: routeStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }\n  }, \"Route \", routeName, \" \", routeDescription), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }\n  }, totalAttendeeCount, \" attendees moved in \", entriesByDate.length, \" trips\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }\n  }, \"Time \"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }\n  }, \"Vehicle Number \"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }\n  }, \"Attendee Count \"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }\n  }, \"Entered By\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"location_log_header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }\n  }, entriesByDate.map(entry => /*#__PURE__*/React.createElement(EntryCard, Object.assign({\n    key: entry.id,\n    entry: entry,\n    deleteThisEntry: deleteThisEntry\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 11\n    }\n  })))));\n};\n\nexport default LocationLog;","map":{"version":3,"sources":["/Users/MainTechPiece/workspace/final-capstone-react-app/src/logs/locationLog.js"],"names":["React","useState","useEffect","EntryCard","Grid","InputLabel","Select","makeStyles","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Typography","Paper","apiManager","LocationLog","props","locations","events","dates","uniqueDates","chosenLocation","chosenEvent","chosenDate","handleChosenLocationChange","handleChosenEventChange","handleChosenDateChange","entries","setEntries","token","window","sessionStorage","getItem","getEntries","locationId","eventId","getEntriesByLocationAndEvent","then","r","entriesByDate","filter","entry","date","includes","sort","a","b","time","localeCompare","totalAttendeeCount","length","map","attendee_count","reduce","accumulator","runningTotal","deleteThisEntry","id","deleteEntry","routeName","routeDescription","routeColor","location","route","name","description","color","routeStyle","event","parseInt"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport EntryCard from \"./entryCard\";\nimport Grid from \"@material-ui/core/Grid\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Paper from \"@material-ui/core/Paper\";\nimport apiManager from \"../api/apiManager\";\n\nconst LocationLog = (props) => {\n  const locations = props.locations;\n  const events = props.events;\n  const dates = props.uniqueDates;\n  const chosenLocation = props.chosenLocation;\n  const chosenEvent = props.chosenEvent;\n  const chosenDate = props.chosenDate;\n  const handleChosenLocationChange = props.handleChosenLocationChange;\n  const handleChosenEventChange = props.handleChosenEventChange;\n  const handleChosenDateChange = props.handleChosenDateChange;\n  const [entries, setEntries] = useState([]);\n\n  //  get token for authentication\n  let token = window.sessionStorage.getItem(\"token\");\n\n  // get entries based on location and event chosen from dropdowns, filter by date, then sort by time\n  const getEntries = (locationId, eventId) => {\n    apiManager.getEntriesByLocationAndEvent(locationId, eventId).then((r) => {\n      setEntries(r);\n    });\n  };\n  const entriesByDate = entries\n    .filter((entry) => entry.date.includes(chosenDate))\n    .sort((a, b) => a.time.localeCompare(b.time));\n\n  let totalAttendeeCount = 0;\n  if (entriesByDate.length !== 0) {\n    totalAttendeeCount = entriesByDate\n      .map((entry) => entry.attendee_count)\n      .reduce((accumulator, runningTotal) => accumulator + runningTotal);\n  }\n\n  const deleteThisEntry = (id) => {\n    apiManager.deleteEntry(id).then(() => {\n      getEntries(props.chosenLocation, props.chosenEvent);\n    });\n  };\n\n  useEffect(() => {\n    getEntries(props.chosenLocation, props.chosenEvent);\n  }, [props.chosenLocation, props.chosenEvent]);\n\n  let routeName = \"\";\n  let routeDescription = \"\";\n  let routeColor = \"\";\n  if (entries.length !== 0) {\n    routeName = entries[0].location.route.name;\n    routeDescription = entries[0].location.route.description;\n    routeColor = entries[0].location.route.color;\n  }\n\n  const routeStyle = {\n    color: routeColor,\n  };\n\n  return (\n    <>\n      <div>\n        <Typography component=\"h1\" variant=\"h5\">\n          Location Logs\n        </Typography>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={3}>\n            <InputLabel>Event:</InputLabel>\n            <Select\n              id=\"eventId\"\n              native\n              onChange={handleChosenEventChange}\n              fullWidth\n              required\n              label=\"??\"\n              value={chosenEvent}\n            >\n              {events ? (\n                events.map((event) => (\n                  <option key={event.id} value={parseInt(event.id)}>\n                    {event.name}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel>Location:</InputLabel>\n            <Select\n              id=\"locationId\"\n              native\n              onChange={handleChosenLocationChange}\n              fullWidth\n              required\n              label=\"??\"\n              value={chosenLocation}\n            >\n              {locations ? (\n                locations.map((location) => (\n                  <option key={location.id} value={parseInt(location.id)}>\n                    {location.name}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel>Date:</InputLabel>\n            <Select\n              id=\"dateId\"\n              native\n              onChange={handleChosenDateChange}\n              fullWidth\n              required\n              label=\"??\"\n              value={chosenDate}\n            >\n              <option aria-label=\"None\" value=\"\">\n                Choose Date\n              </option>\n              {dates ? (\n                dates.map((date) => (\n                  <option key={date} value={date}>\n                    {date}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n        </Grid>\n      </div>\n      <div style={routeStyle}>\n        Route {routeName} {routeDescription}\n      </div>\n      <div>\n        {totalAttendeeCount} attendees moved in {entriesByDate.length} trips\n      </div>\n      <div>\n        <span>Time </span>\n        <span>Vehicle Number </span>\n        <span>Attendee Count </span>\n        <span>Entered By</span>\n      </div>\n      <div className=\"location_log_header\"></div>\n      <div>\n        {entriesByDate.map((entry) => (\n          <EntryCard\n            key={entry.id}\n            entry={entry}\n            deleteThisEntry={deleteThisEntry}\n            {...props}\n          />\n        ))}\n      </div>\n    </>\n  );\n};\n\nexport default LocationLog;\n"]},"metadata":{},"sourceType":"module"}