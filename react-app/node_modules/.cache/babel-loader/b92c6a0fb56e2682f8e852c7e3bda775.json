{"ast":null,"code":"import baseurl from \"./baseurl\";\nexport default {\n  getAllType(type) {\n    return fetch(`${baseurl}/${type}`).then(r => r.json());\n  },\n\n  getSingleType(type, id) {\n    return fetch(`${baseurl}/${type}/${id}`).then(r => r.json());\n  },\n\n  // getEntriesByLocation(locationId) {\n  //   return fetch(`${baseurl}/entries?locationID=${locationId}`).then((r) =>\n  //     r.json()\n  //   );\n  // },\n  // getEntriesByLocationAndEvent(locationId, eventID) {\n  //   return fetch(\n  //     `${baseurl}/entries?locationID=${locationId}&eventID=${eventID}`\n  //   ).then((r) => r.json());\n  // },\n  postEntry(newEntry) {\n    return fetch(`${baseurl}/entries`, {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `Token ${window.sessionStorage.getItem(\"token\")}`\n      },\n      body: JSON.stringify(newEntry)\n    }).then(r => r.json());\n  },\n\n  updateEntry(entry) {\n    return fetch(`${baseurl}/entries/${entry.id}`, {\n      method: \"PUT\",\n      headers: {\n        \"content-type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `Token ${window.sessionStorage.getItem(\"token\")}`\n      },\n      body: JSON.stringify(entry)\n    });\n  },\n\n  deleteEntry(id) {\n    return fetch(`${baseurl}/entries/${id}`, {\n      method: \"DELETE\"\n    });\n  },\n\n  register(userToPost) {\n    return fetch(`${baseurl}/register/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(userToPost)\n    }).then(result => result.json());\n  },\n\n  login(userToLogin) {\n    return fetch(`${baseurl}/login/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(userToLogin)\n    }).then(result => result.json());\n  }\n\n};","map":{"version":3,"sources":["/Users/MainTechPiece/workspace/final-capstone-react-app/src/api/apiManager.js"],"names":["baseurl","getAllType","type","fetch","then","r","json","getSingleType","id","postEntry","newEntry","method","headers","Accept","Authorization","window","sessionStorage","getItem","body","JSON","stringify","updateEntry","entry","deleteEntry","register","userToPost","result","login","userToLogin"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,WAApB;AAEA,eAAe;AACbC,EAAAA,UAAU,CAACC,IAAD,EAAO;AACf,WAAOC,KAAK,CAAE,GAAEH,OAAQ,IAAGE,IAAK,EAApB,CAAL,CAA4BE,IAA5B,CAAkCC,CAAD,IAAOA,CAAC,CAACC,IAAF,EAAxC,CAAP;AACD,GAHY;;AAIbC,EAAAA,aAAa,CAACL,IAAD,EAAOM,EAAP,EAAW;AACtB,WAAOL,KAAK,CAAE,GAAEH,OAAQ,IAAGE,IAAK,IAAGM,EAAG,EAA1B,CAAL,CAAkCJ,IAAlC,CAAwCC,CAAD,IAAOA,CAAC,CAACC,IAAF,EAA9C,CAAP;AACD,GANY;;AAOb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAG,EAAAA,SAAS,CAACC,QAAD,EAAW;AAClB,WAAOP,KAAK,CAAE,GAAEH,OAAQ,UAAZ,EAAuB;AACjCW,MAAAA,MAAM,EAAE,MADyB;AAEjCC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,MAAM,EAAE,kBAFD;AAGPC,QAAAA,aAAa,EAAG,SAAQC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,CAA8B,OAA9B,CAAuC;AAHxD,OAFwB;AAOjCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeV,QAAf;AAP2B,KAAvB,CAAL,CAQJN,IARI,CAQEC,CAAD,IAAOA,CAAC,CAACC,IAAF,EARR,CAAP;AASD,GA3BY;;AA4Bbe,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,WAAOnB,KAAK,CAAE,GAAEH,OAAQ,YAAWsB,KAAK,CAACd,EAAG,EAAhC,EAAmC;AAC7CG,MAAAA,MAAM,EAAE,KADqC;AAE7CC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,MAAM,EAAE,kBAFD;AAGPC,QAAAA,aAAa,EAAG,SAAQC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,CAA8B,OAA9B,CAAuC;AAHxD,OAFoC;AAO7CC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeE,KAAf;AAPuC,KAAnC,CAAZ;AASD,GAtCY;;AAuCbC,EAAAA,WAAW,CAACf,EAAD,EAAK;AACd,WAAOL,KAAK,CAAE,GAAEH,OAAQ,YAAWQ,EAAG,EAA1B,EAA6B;AACvCG,MAAAA,MAAM,EAAE;AAD+B,KAA7B,CAAZ;AAGD,GA3CY;;AA4Cba,EAAAA,QAAQ,CAACC,UAAD,EAAa;AACnB,WAAOtB,KAAK,CAAE,GAAEH,OAAQ,YAAZ,EAAyB;AACnCW,MAAAA,MAAM,EAAE,MAD2B;AAEnCC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAF0B;AAKnCM,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeK,UAAf;AAL6B,KAAzB,CAAL,CAMJrB,IANI,CAMEsB,MAAD,IAAYA,MAAM,CAACpB,IAAP,EANb,CAAP;AAOD,GApDY;;AAqDbqB,EAAAA,KAAK,CAACC,WAAD,EAAc;AACjB,WAAOzB,KAAK,CAAE,GAAEH,OAAQ,SAAZ,EAAsB;AAChCW,MAAAA,MAAM,EAAE,MADwB;AAEhCC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFuB;AAKhCM,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeQ,WAAf;AAL0B,KAAtB,CAAL,CAMJxB,IANI,CAMEsB,MAAD,IAAYA,MAAM,CAACpB,IAAP,EANb,CAAP;AAOD;;AA7DY,CAAf","sourcesContent":["import baseurl from \"./baseurl\";\n\nexport default {\n  getAllType(type) {\n    return fetch(`${baseurl}/${type}`).then((r) => r.json());\n  },\n  getSingleType(type, id) {\n    return fetch(`${baseurl}/${type}/${id}`).then((r) => r.json());\n  },\n  // getEntriesByLocation(locationId) {\n  //   return fetch(`${baseurl}/entries?locationID=${locationId}`).then((r) =>\n  //     r.json()\n  //   );\n  // },\n  // getEntriesByLocationAndEvent(locationId, eventID) {\n  //   return fetch(\n  //     `${baseurl}/entries?locationID=${locationId}&eventID=${eventID}`\n  //   ).then((r) => r.json());\n  // },\n  postEntry(newEntry) {\n    return fetch(`${baseurl}/entries`, {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `Token ${window.sessionStorage.getItem(\"token\")}`,\n      },\n      body: JSON.stringify(newEntry),\n    }).then((r) => r.json());\n  },\n  updateEntry(entry) {\n    return fetch(`${baseurl}/entries/${entry.id}`, {\n      method: \"PUT\",\n      headers: {\n        \"content-type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `Token ${window.sessionStorage.getItem(\"token\")}`,\n      },\n      body: JSON.stringify(entry),\n    });\n  },\n  deleteEntry(id) {\n    return fetch(`${baseurl}/entries/${id}`, {\n      method: \"DELETE\",\n    });\n  },\n  register(userToPost) {\n    return fetch(`${baseurl}/register/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(userToPost),\n    }).then((result) => result.json());\n  },\n  login(userToLogin) {\n    return fetch(`${baseurl}/login/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(userToLogin),\n    }).then((result) => result.json());\n  },\n};\n"]},"metadata":{},"sourceType":"module"}