{"ast":null,"code":"var _jsxFileName = \"/Users/MainTechPiece/workspace/event-transpo-manager/react-app/src/eventTranspoTracker.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { BrowserRouter, Route, Redirect } from \"react-router-dom\";\nimport EntryForm from \"./forms/entryForm\";\nimport EntryEditForm from \"./forms/entryEditForm\";\nimport apiManager from \"./api/apiManager\";\nimport RouteReport from \"./reports/routeReport\";\nimport Log from \"./reports/log\"; // import NavBar from \"./navbar\";\n\nconst EventTranspoTracker = props => {\n  const hasUser = props.hasUser;\n  const clearUser = props.clearUser;\n  const mode = props.mode;\n  const handleModeChange = props.handleModeChange; // places routes and shuttles fill the dropdown menus\n  // places filter based on chosenRoute\n  // chosenPlace chosenRoute and chosenShuttle are the choices made from the dropdowns\n\n  const [places, setPlaces] = useState([]);\n  const [routes, setRoutes] = useState([]);\n  const [shuttles, setShuttles] = useState([]);\n  const [entries, setEntries] = useState([]);\n  const [chosenPlaceId, setChosenPlaceId] = useState(\"\");\n  const [chosenPlaceName, setChosenPlaceName] = useState(\"\");\n  const [chosenRoute, setChosenRoute] = useState(\"\");\n  const [chosenShuttleId, setChosenShuttleId] = useState(\"\");\n  const [chosenShuttleName, setChosenShuttleName] = useState(\"\");\n  const [chosenDate, setChosenDate] = useState(\"\"); // get and sort in alpha order all places for the dropdown menus\n\n  const getPlaces = () => {\n    apiManager.getAllType(\"places\").then(r => {\n      r.sort((a, b) => a.name.localeCompare(b.name));\n      setPlaces(r);\n    });\n  }; // set chosePlace based on choice from dropdown menu\n\n\n  const handleChosenPlaceChange = e => {\n    setChosenPlaceId(e.target.value);\n    setChosenPlaceName(e.target.options[e.target.selectedIndex].dataset.name);\n\n    if (e.target.value !== \"\") {// apiManager.getSingleType(\"places\", placeId).then((r) => {\n      //   apiManager.getSingleType(\"routes\", r.route_id).then((re) => {\n      //     // setRoutes([re]);\n      //     // setChosenRoute(re.name)\n      //   });\n      // });\n    } else {\n      getRoutes();\n    }\n  }; // // get and sort in alpha order all routes for the dropdown menus and pass them to the form log and graph\n\n\n  const getRoutes = () => {\n    apiManager.getAllType(\"routes\").then(r => {\n      r.sort((a, b) => a.name.localeCompare(b.name));\n      setRoutes(r);\n    });\n  }; // // set choseroute based on choice from dropdown menu on form log and graph\n\n\n  const handleChosenRouteChange = e => {\n    const routeId = e.target.value;\n    setChosenRoute(routeId);\n    setChosenPlaceId(\"\");\n    setChosenPlaceName(\"\");\n    apiManager.getAllType(\"places\").then(r => {\n      if (routeId !== \"\") {\n        setPlaces(r.filter(each => each.route.name === routeId).sort((a, b) => a.name.localeCompare(b.name)));\n      } else {\n        setPlaces(r.sort((a, b) => a.name.localeCompare(b.name)));\n      }\n    });\n  }; // get and sort in alpha order all shuttles for the dropdown menus\n\n\n  const getShuttles = () => {\n    apiManager.getAllType(\"shuttles\").then(r => {\n      r.sort((a, b) => a.name.localeCompare(b.name));\n      setShuttles(r);\n    });\n  }; // set chosenShuttleId based on choice from dropdown menu\n\n\n  const handleChosenShuttleChange = e => {\n    setChosenShuttleId(e.target.value);\n    setChosenShuttleName(e.target.options[e.target.selectedIndex].dataset.name);\n  }; // get all entries then find unique dates for the dropdown menus\n\n\n  const getEntries = () => {\n    apiManager.getAllType(\"entries\").then(r => {\n      r.sort((a, b) => a.date.localeCompare(b.date));\n      setEntries(r);\n    });\n  };\n\n  const uniqueDates = [...new Set(entries.map(entry => entry.date))]; // set chosenDate based on choice from dropdown menu\n\n  const handleChosenDateChange = e => {\n    const dateId = e.target.value;\n    setChosenDate(dateId);\n  };\n\n  useEffect(() => {\n    getShuttles();\n    getEntries();\n    getPlaces();\n    getRoutes();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/\",\n    render: () => /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/entry/form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 43\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/entry/form\",\n    render: props =>\n    /*#__PURE__*/\n    // hasUser ? (\n    React.createElement(EntryForm, Object.assign({\n      places: places,\n      routes: routes,\n      shuttles: shuttles,\n      chosenPlaceId: chosenPlaceId,\n      chosenRoute: chosenRoute,\n      chosenShuttleId: chosenShuttleId,\n      chosenDate: chosenDate,\n      handleChosenPlaceChange: handleChosenPlaceChange,\n      handleChosenRouteChange: handleChosenRouteChange,\n      handleChosenShuttleChange: handleChosenShuttleChange,\n      handleChosenDateChange: handleChosenDateChange\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 13\n      }\n    })) //   ) : (\n    //     <Redirect to=\"/login\" />\n    //   )\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/entry/edit/form/:entryId(\\\\d+)\",\n    render: props =>\n    /*#__PURE__*/\n    // hasUser ? (\n    React.createElement(EntryEditForm, Object.assign({\n      places: places,\n      routes: routes,\n      shuttles: shuttles,\n      chosenPlaceId: chosenPlaceId,\n      chosenRoute: chosenRoute,\n      chosenShuttleId: chosenShuttleId,\n      chosenDate: chosenDate,\n      handleChosenPlaceChange: handleChosenPlaceChange,\n      handleChosenRouteChange: handleChosenRouteChange,\n      handleChosenShuttleChange: handleChosenShuttleChange,\n      handleChosenDateChange: handleChosenDateChange\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 13\n      }\n    })) //   ) : (\n    //     <Redirect to=\"/login\" />\n    //   )\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/log\",\n    render: props =>\n    /*#__PURE__*/\n    // hasUser ? (\n    React.createElement(Log, Object.assign({\n      getEntries: getEntries,\n      places: places,\n      routes: routes,\n      shuttles: shuttles,\n      entries: entries,\n      uniqueDates: uniqueDates,\n      chosenPlaceId: chosenPlaceId,\n      chosenPlaceName: chosenPlaceName,\n      chosenRoute: chosenRoute,\n      chosenShuttleId: chosenShuttleId,\n      chosenShuttleName: chosenShuttleName,\n      chosenDate: chosenDate,\n      handleChosenPlaceChange: handleChosenPlaceChange,\n      handleChosenRouteChange: handleChosenRouteChange,\n      handleChosenShuttleChange: handleChosenShuttleChange,\n      handleChosenDateChange: handleChosenDateChange\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 13\n      }\n    })) // ) : (\n    //   <Redirect to=\"/login\" />\n    // )\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/graph\",\n    render: props =>\n    /*#__PURE__*/\n    // hasUser ? (\n    React.createElement(RouteReport, Object.assign({\n      getEntries: getEntries,\n      places: places,\n      routes: routes,\n      shuttles: shuttles,\n      entries: entries,\n      uniqueDates: uniqueDates,\n      chosenPlaceId: chosenPlaceId,\n      chosenPlaceName: chosenPlaceName,\n      chosenRoute: chosenRoute,\n      chosenShuttleId: chosenShuttleId,\n      chosenShuttleName: chosenShuttleName,\n      chosenDate: chosenDate,\n      handleChosenPlaceChange: handleChosenPlaceChange,\n      handleChosenRouteChange: handleChosenRouteChange,\n      handleChosenShuttleChange: handleChosenShuttleChange,\n      handleChosenDateChange: handleChosenDateChange\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 13\n      }\n    })) // ) : (\n    //   <Redirect to=\"/login\" />\n    // )\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default EventTranspoTracker;","map":{"version":3,"sources":["/Users/MainTechPiece/workspace/event-transpo-manager/react-app/src/eventTranspoTracker.js"],"names":["React","useState","useEffect","BrowserRouter","Route","Redirect","EntryForm","EntryEditForm","apiManager","RouteReport","Log","EventTranspoTracker","props","hasUser","clearUser","mode","handleModeChange","places","setPlaces","routes","setRoutes","shuttles","setShuttles","entries","setEntries","chosenPlaceId","setChosenPlaceId","chosenPlaceName","setChosenPlaceName","chosenRoute","setChosenRoute","chosenShuttleId","setChosenShuttleId","chosenShuttleName","setChosenShuttleName","chosenDate","setChosenDate","getPlaces","getAllType","then","r","sort","a","b","name","localeCompare","handleChosenPlaceChange","e","target","value","options","selectedIndex","dataset","getRoutes","handleChosenRouteChange","routeId","filter","each","route","getShuttles","handleChosenShuttleChange","getEntries","date","uniqueDates","Set","map","entry","handleChosenDateChange","dateId"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter, Route, Redirect } from \"react-router-dom\";\nimport EntryForm from \"./forms/entryForm\";\nimport EntryEditForm from \"./forms/entryEditForm\";\nimport apiManager from \"./api/apiManager\";\nimport RouteReport from \"./reports/routeReport\";\nimport Log from \"./reports/log\";\n// import NavBar from \"./navbar\";\n\nconst EventTranspoTracker = (props) => {\n  const hasUser = props.hasUser;\n  const clearUser = props.clearUser;\n  const mode = props.mode;\n  const handleModeChange = props.handleModeChange;\n\n  // places routes and shuttles fill the dropdown menus\n  // places filter based on chosenRoute\n  // chosenPlace chosenRoute and chosenShuttle are the choices made from the dropdowns\n  const [places, setPlaces] = useState([]);\n  const [routes, setRoutes] = useState([]);\n  const [shuttles, setShuttles] = useState([]);\n  const [entries, setEntries] = useState([]);\n  const [chosenPlaceId, setChosenPlaceId] = useState(\"\");\n  const [chosenPlaceName, setChosenPlaceName] = useState(\"\");\n  const [chosenRoute, setChosenRoute] = useState(\"\");\n  const [chosenShuttleId, setChosenShuttleId] = useState(\"\");\n  const [chosenShuttleName, setChosenShuttleName] = useState(\"\");\n  const [chosenDate, setChosenDate] = useState(\"\");\n\n  // get and sort in alpha order all places for the dropdown menus\n  const getPlaces = () => {\n    apiManager.getAllType(\"places\").then((r) => {\n      r.sort((a, b) => a.name.localeCompare(b.name));\n      setPlaces(r);\n    });\n  };\n\n  // set chosePlace based on choice from dropdown menu\n  const handleChosenPlaceChange = (e) => {\n    setChosenPlaceId(e.target.value);\n    setChosenPlaceName(e.target.options[e.target.selectedIndex].dataset.name);\n    if (e.target.value !== \"\") {\n      // apiManager.getSingleType(\"places\", placeId).then((r) => {\n      //   apiManager.getSingleType(\"routes\", r.route_id).then((re) => {\n      //     // setRoutes([re]);\n      //     // setChosenRoute(re.name)\n      //   });\n      // });\n    } else {\n      getRoutes();\n    }\n  };\n\n  // // get and sort in alpha order all routes for the dropdown menus and pass them to the form log and graph\n  const getRoutes = () => {\n    apiManager.getAllType(\"routes\").then((r) => {\n      r.sort((a, b) => a.name.localeCompare(b.name));\n      setRoutes(r);\n    });\n  };\n\n  // // set choseroute based on choice from dropdown menu on form log and graph\n  const handleChosenRouteChange = (e) => {\n    const routeId = e.target.value;\n    setChosenRoute(routeId);\n    setChosenPlaceId(\"\");\n    setChosenPlaceName(\"\");\n    apiManager.getAllType(\"places\").then((r) => {\n      if (routeId !== \"\") {\n        setPlaces(\n          r\n            .filter((each) => each.route.name === routeId)\n            .sort((a, b) => a.name.localeCompare(b.name))\n        );\n      } else {\n        setPlaces(r.sort((a, b) => a.name.localeCompare(b.name)));\n      }\n    });\n  };\n\n  // get and sort in alpha order all shuttles for the dropdown menus\n  const getShuttles = () => {\n    apiManager.getAllType(\"shuttles\").then((r) => {\n      r.sort((a, b) => a.name.localeCompare(b.name));\n      setShuttles(r);\n    });\n  };\n\n  // set chosenShuttleId based on choice from dropdown menu\n  const handleChosenShuttleChange = (e) => {\n    setChosenShuttleId(e.target.value);\n    setChosenShuttleName(e.target.options[e.target.selectedIndex].dataset.name);\n  };\n\n  // get all entries then find unique dates for the dropdown menus\n  const getEntries = () => {\n    apiManager.getAllType(\"entries\").then((r) => {\n      r.sort((a, b) => a.date.localeCompare(b.date));\n      setEntries(r);\n    });\n  };\n  const uniqueDates = [...new Set(entries.map((entry) => entry.date))];\n\n  // set chosenDate based on choice from dropdown menu\n  const handleChosenDateChange = (e) => {\n    const dateId = e.target.value;\n    setChosenDate(dateId);\n  };\n\n  useEffect(() => {\n    getShuttles();\n    getEntries();\n    getPlaces();\n    getRoutes();\n  }, []);\n\n  return (\n    <span>\n      {/* <NavBar\n        hasUser={hasUser}\n        clearUser={clearUser}\n        mode={mode}\n        handleModeChange={handleModeChange}\n        {...props}\n      /> */}\n      <Route exact path=\"/\" render={() => <Redirect to=\"/entry/form\" />} />\n      <Route\n        exact\n        path=\"/entry/form\"\n        render={(props) =>\n          // hasUser ? (\n            <EntryForm\n              places={places}\n              routes={routes}\n              shuttles={shuttles}\n              chosenPlaceId={chosenPlaceId}\n              chosenRoute={chosenRoute}\n              chosenShuttleId={chosenShuttleId}\n              chosenDate={chosenDate}\n              handleChosenPlaceChange={handleChosenPlaceChange}\n              handleChosenRouteChange={handleChosenRouteChange}\n              handleChosenShuttleChange={handleChosenShuttleChange}\n              handleChosenDateChange={handleChosenDateChange}\n              {...props}\n            />\n        //   ) : (\n        //     <Redirect to=\"/login\" />\n        //   )\n        }\n      />\n      <Route\n        exact\n        path=\"/entry/edit/form/:entryId(\\d+)\"\n        render={(props) =>\n          // hasUser ? (\n            <EntryEditForm\n              places={places}\n              routes={routes}\n              shuttles={shuttles}\n              chosenPlaceId={chosenPlaceId}\n              chosenRoute={chosenRoute}\n              chosenShuttleId={chosenShuttleId}\n              chosenDate={chosenDate}\n              handleChosenPlaceChange={handleChosenPlaceChange}\n              handleChosenRouteChange={handleChosenRouteChange}\n              handleChosenShuttleChange={handleChosenShuttleChange}\n              handleChosenDateChange={handleChosenDateChange}\n              {...props}\n            />\n        //   ) : (\n        //     <Redirect to=\"/login\" />\n        //   )\n        }\n      />\n      <Route\n        exact\n        path=\"/log\"\n        render={(props) =>\n          // hasUser ? (\n            <Log\n              getEntries={getEntries}\n              places={places}\n              routes={routes}\n              shuttles={shuttles}\n              entries={entries}\n              uniqueDates={uniqueDates}\n              chosenPlaceId={chosenPlaceId}\n              chosenPlaceName={chosenPlaceName}\n              chosenRoute={chosenRoute}\n              chosenShuttleId={chosenShuttleId}\n              chosenShuttleName={chosenShuttleName}\n              chosenDate={chosenDate}\n              handleChosenPlaceChange={handleChosenPlaceChange}\n              handleChosenRouteChange={handleChosenRouteChange}\n              handleChosenShuttleChange={handleChosenShuttleChange}\n              handleChosenDateChange={handleChosenDateChange}\n              {...props}\n            />\n          // ) : (\n          //   <Redirect to=\"/login\" />\n          // )\n        }\n      />\n      <Route\n        exact\n        path=\"/graph\"\n        render={(props) =>\n          // hasUser ? (\n            <RouteReport\n              getEntries={getEntries}\n              places={places}\n              routes={routes}\n              shuttles={shuttles}\n              entries={entries}\n              uniqueDates={uniqueDates}\n              chosenPlaceId={chosenPlaceId}\n              chosenPlaceName={chosenPlaceName}\n              chosenRoute={chosenRoute}\n              chosenShuttleId={chosenShuttleId}\n              chosenShuttleName={chosenShuttleName}\n              chosenDate={chosenDate}\n              handleChosenPlaceChange={handleChosenPlaceChange}\n              handleChosenRouteChange={handleChosenRouteChange}\n              handleChosenShuttleChange={handleChosenShuttleChange}\n              handleChosenDateChange={handleChosenDateChange}\n              {...props}\n            />\n          // ) : (\n          //   <Redirect to=\"/login\" />\n          // )\n        }\n      />\n    </span>\n  );\n};\n\nexport default EventTranspoTracker;\n"]},"metadata":{},"sourceType":"module"}