{"ast":null,"code":"var _jsxFileName = \"/Users/MainTechPiece/workspace/event-transpo-manager/react-app/src/routeView/routeCard.js\";\nimport React, { useEffect, useState } from \"../../node_modules/react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\nimport apiManager from \"../api/apiManager\";\nimport AssignmentCard from \"./assignmentCard\";\nimport \"../styles.css\";\n\nconst RouteCard = props => {\n  const route = props.route;\n  const chosenDate = props.chosenDate;\n  const [assignments, setAssignments] = useState([]);\n  useEffect(() => {\n    apiManager.getAssignmentsByDateRoute(parseInt(chosenDate), route.id).then(r => {\n      setAssignments(r);\n    });\n  }, [chosenDate, route.id]);\n\n  const removeAssignment = id => {\n    const check = window.confirm(\"Are you sure you want to delete this assignment? Deletion cannot be undone.\");\n\n    if (check === true) {\n      apiManager.deleteTypeWithId(\"assignments\", id).then(() => apiManager.getAssignmentsByDateRoute(parseInt(chosenDate), route.id).then(r => {\n        setAssignments(r);\n      }));\n    }\n  };\n\n  let routeName = \"\";\n  parseInt(route.name) < 10 ? routeName = route.name.slice(1) : routeName = route.name;\n  const routeColor = {\n    color: route.color,\n    fontWeight: \"600\"\n  };\n  const routeBorder = {\n    borderColor: route.color\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"route_border\",\n    style: routeBorder,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    component: \"h6\",\n    className: \"route_name\",\n    style: routeColor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, \"Route \", routeName, \" \", route.description), /*#__PURE__*/React.createElement(AddCircleOutlineIcon, {\n    className: \"route_icon\",\n    onClick: () => props.history.push(`/assignment/add/${props.route.id}`),\n    style: {\n      fontSize: 20\n    },\n    value: route.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, assignments.map(assignment => /*#__PURE__*/React.createElement(AssignmentCard, Object.assign({\n    key: assignment.id,\n    assignment: assignment,\n    removeAssignment: removeAssignment\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }\n  }))))));\n};\n\nexport default RouteCard;","map":{"version":3,"sources":["/Users/MainTechPiece/workspace/event-transpo-manager/react-app/src/routeView/routeCard.js"],"names":["React","useEffect","useState","Typography","AddCircleOutlineIcon","apiManager","AssignmentCard","RouteCard","props","route","chosenDate","assignments","setAssignments","getAssignmentsByDateRoute","parseInt","id","then","r","removeAssignment","check","window","confirm","deleteTypeWithId","routeName","name","slice","routeColor","color","fontWeight","routeBorder","borderColor","description","history","push","fontSize","map","assignment"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"../../node_modules/react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\nimport apiManager from \"../api/apiManager\";\nimport AssignmentCard from \"./assignmentCard\";\nimport \"../styles.css\";\n\nconst RouteCard = (props) => {\n  const route = props.route;\n  const chosenDate = props.chosenDate;\n  const [assignments, setAssignments] = useState([]);\n\n  useEffect(() => {\n    apiManager\n      .getAssignmentsByDateRoute(parseInt(chosenDate), route.id)\n      .then((r) => {\n        setAssignments(r);\n      });\n  }, [chosenDate, route.id]);\n\n  const removeAssignment = (id) => {\n    const check = window.confirm(\n      \"Are you sure you want to delete this assignment? Deletion cannot be undone.\"\n    );\n    if (check === true) {\n      apiManager.deleteTypeWithId(\"assignments\", id).then(() =>\n        apiManager\n          .getAssignmentsByDateRoute(parseInt(chosenDate), route.id)\n          .then((r) => {\n            setAssignments(r);\n          })\n      );\n    }\n  };\n\n  let routeName = \"\";\n  parseInt(route.name) < 10\n    ? (routeName = route.name.slice(1))\n    : (routeName = route.name);\n\n  const routeColor = {\n    color: route.color,\n    fontWeight: \"600\",\n  };\n\n  const routeBorder = {\n    borderColor: route.color,\n  };\n\n  return (\n    <>\n      <div className=\"route_border\" style={routeBorder}>\n            <Typography\n              component=\"h6\"\n              className=\"route_name\"\n              style={routeColor}\n            >\n              Route {routeName} {route.description}\n            </Typography>\n            <AddCircleOutlineIcon\n              className=\"route_icon\"\n              onClick={() =>\n                props.history.push(`/assignment/add/${props.route.id}`)\n              }\n              style={{ fontSize: 20 }}\n              value={route.id}\n            />\n            <div>\n              {assignments.map((assignment) => (\n                <AssignmentCard\n                  key={assignment.id}\n                  assignment={assignment}\n                  removeAssignment={removeAssignment}\n                  {...props}\n                />\n              ))}\n            </div>\n        {/* <div className=\"route_heading\">\n          {favoriteRouteIDs.length !== 0 ? (\n            <span className=\"route_icon\" id-=\"unStar\" onClick={unStar}>\n              unstar\n            </span>\n          ) : null}\n          {favoriteRouteIDs.length === 0 ? (\n            <span className=\"route_icon\" id=\"star\" onClick={star}>\n              star\n            </span>\n          ) : null}\n        </div> */}\n      </div>\n    </>\n  );\n};\n\nexport default RouteCard;\n"]},"metadata":{},"sourceType":"module"}