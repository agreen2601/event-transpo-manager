{"ast":null,"code":"var _jsxFileName = \"/Users/MainTechPiece/workspace/event-transpo-manager/react-app/src/forms/assignmentEditForm.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Select from \"@material-ui/core/Select\";\nimport apiManager from \"../api/apiManager\";\nimport moment from \"moment\";\n\nconst AssignmentEditForm = props => {\n  const chosenRoute = props.chosenRoute;\n  const handleChosenRouteChange = props.handleChosenRouteChange;\n  const [assignment, setAssignment] = useState({\n    startTime: \"\",\n    endTime: \"\",\n    driver_id: props.match.params.driverId,\n    vehicle_id: props.match.params.vehicleId,\n    route_id: props.match.params.routeId,\n    date_id: props.chosenDate\n  });\n  const [dates, setDates] = useState([]);\n  const [routes, setRoutes] = useState([]);\n  const [drivers, setDrivers] = useState([]);\n  const [vehicles, setVehicles] = useState([]);\n\n  const getAssignment = assignId => {\n    apiManager.getSingleType(\"assignments\", assignId).then(assignment => {\n      setAssignment(assignment);\n    });\n  };\n\n  console.log(assignment);\n\n  const getAllDropDowns = () => {\n    return apiManager.getType(\"dates\").then(r => {\n      r.sort((a, b) => a.date > b.date ? 1 : -1);\n      setDates(r);\n    }), apiManager.getType(\"routes\").then(r => {\n      r.sort((a, b) => a.name > b.name ? 1 : -1);\n      setRoutes(r);\n    }), apiManager.getType(\"drivers\").then(r => {\n      r.sort((a, b) => a.name.localeCompare(b.name));\n      setDrivers(r);\n    }), apiManager.getType(\"vehicles\").then(r => {\n      r.sort((a, b) => a.number > b.number ? 1 : -1).sort((a, b) => a.company.localeCompare(b.company));\n      setVehicles(r);\n    });\n  };\n\n  const handleAssignmentChange = e => {\n    const stateToChange = { ...assignment\n    };\n    stateToChange[e.target.id] = e.target.value;\n    setAssignment(stateToChange);\n  };\n\n  useEffect(() => {\n    getAssignment(props.match.params.assignmentId);\n    getAllDropDowns();\n  }, [props.match.params.assignmentId]);\n\n  const submit = () => {\n    const editedAssignment = {\n      id: props.match.params.assignmentId,\n      startTime: assignment.startTime,\n      endTime: assignment.endTime,\n      driverId: assignment.driver_id,\n      vehicleId: assignment.vehicle_id,\n      routeId: assignment.route_id,\n      dateId: assignment.date_id\n    };\n    apiManager.updateType(\"assignments\", editedAssignment).then(() => props.history.push(`/routeview`));\n  }; // get all drivers, check if driver already in system, post if not, send to route view\n\n\n  const handleSubmit = e => {\n    assignment.route_id = chosenRoute;\n    e.preventDefault();\n    apiManager.getAssignmentsByDateDriver(assignment.date_id, assignment.driver_id).then(assignments => {\n      if (assignments.length > 0) {\n        alert(\"This driver has already been assigned on this day.\");\n      } else {\n        apiManager.addType(\"assignments\", assignment).then(() => props.history.push(`/route/view`));\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Typography, {\n    component: \"h1\",\n    variant: \"h5\",\n    className: \"page-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, \"Assignment Form\"), /*#__PURE__*/React.createElement(\"form\", {\n    className: \"drop-downs\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 15\n    }\n  }, \"Driver:\"), /*#__PURE__*/React.createElement(Select, {\n    id: \"driver_id\",\n    native: true,\n    onChange: handleAssignmentChange,\n    fullWidth: true,\n    required: true,\n    value: assignment.driver_id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    \"aria-label\": \"None\",\n    value: \"\",\n    \"data-name\": \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }\n  }, \"Choose Driver\"), drivers ? drivers.map(driver => /*#__PURE__*/React.createElement(\"option\", {\n    key: driver.id,\n    value: parseInt(driver.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 21\n    }\n  }, driver.name)) : /*#__PURE__*/React.createElement(React.Fragment, null))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 15\n    }\n  }, \"Vehicle:\"), /*#__PURE__*/React.createElement(Select, {\n    id: \"vehicle_id\",\n    native: true,\n    onChange: handleAssignmentChange,\n    fullWidth: true,\n    required: true,\n    value: assignment.vehicle_id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    \"aria-label\": \"None\",\n    value: \"\",\n    \"data-name\": \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 17\n    }\n  }, \"Choose Vehicle\"), vehicles ? vehicles.map(vehicle => /*#__PURE__*/React.createElement(\"option\", {\n    key: vehicle.id,\n    value: parseInt(vehicle.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 21\n    }\n  }, vehicle.company, \" \", vehicle.number)) : /*#__PURE__*/React.createElement(React.Fragment, null))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 15\n    }\n  }, \"Route:\"), /*#__PURE__*/React.createElement(Select, {\n    id: \"route_id\",\n    native: true,\n    onChange: handleAssignmentChange,\n    fullWidth: true,\n    required: true,\n    value: assignment.route_id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    \"aria-label\": \"None\",\n    value: \"\",\n    \"data-name\": \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 17\n    }\n  }, \"Choose Route\"), routes ? routes.map(route => /*#__PURE__*/React.createElement(\"option\", {\n    key: route.id,\n    value: parseInt(route.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 21\n    }\n  }, route.name, \" \", route.description)) : /*#__PURE__*/React.createElement(React.Fragment, null)))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"submit-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    variant: \"contained\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }\n  }, \"Submit\")))));\n};\n\nexport default AssignmentEditForm;","map":{"version":3,"sources":["/Users/MainTechPiece/workspace/event-transpo-manager/react-app/src/forms/assignmentEditForm.js"],"names":["React","useState","useEffect","Grid","Button","TextField","InputLabel","Typography","Select","apiManager","moment","AssignmentEditForm","props","chosenRoute","handleChosenRouteChange","assignment","setAssignment","startTime","endTime","driver_id","match","params","driverId","vehicle_id","vehicleId","route_id","routeId","date_id","chosenDate","dates","setDates","routes","setRoutes","drivers","setDrivers","vehicles","setVehicles","getAssignment","assignId","getSingleType","then","console","log","getAllDropDowns","getType","r","sort","a","b","date","name","localeCompare","number","company","handleAssignmentChange","e","stateToChange","target","id","value","assignmentId","submit","editedAssignment","dateId","updateType","history","push","handleSubmit","preventDefault","getAssignmentsByDateDriver","assignments","length","alert","addType","map","driver","parseInt","vehicle","route","description"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Select from \"@material-ui/core/Select\";\nimport apiManager from \"../api/apiManager\";\nimport moment from \"moment\";\n\nconst AssignmentEditForm = (props) => {\n  const chosenRoute = props.chosenRoute;\n  const handleChosenRouteChange = props.handleChosenRouteChange;\n  const [assignment, setAssignment] = useState({\n    startTime: \"\",\n    endTime: \"\",\n    driver_id: props.match.params.driverId,\n    vehicle_id: props.match.params.vehicleId,\n    route_id: props.match.params.routeId,\n    date_id: props.chosenDate,\n  });\n\n  const [dates, setDates] = useState([]);\n  const [routes, setRoutes] = useState([]);\n  const [drivers, setDrivers] = useState([]);\n  const [vehicles, setVehicles] = useState([]);\n\n  const getAssignment = (assignId) => {\n    apiManager.getSingleType(\"assignments\", assignId).then((assignment) => {\n      setAssignment(assignment);\n    });\n  };\n\n  console.log(assignment);\n\n  const getAllDropDowns = () => {\n    return (\n      apiManager.getType(\"dates\").then((r) => {\n        r.sort((a, b) => (a.date > b.date ? 1 : -1));\n        setDates(r);\n      }),\n      apiManager.getType(\"routes\").then((r) => {\n        r.sort((a, b) => (a.name > b.name ? 1 : -1));\n        setRoutes(r);\n      }),\n      apiManager.getType(\"drivers\").then((r) => {\n        r.sort((a, b) => a.name.localeCompare(b.name));\n        setDrivers(r);\n      }),\n      apiManager.getType(\"vehicles\").then((r) => {\n        r.sort((a, b) => (a.number > b.number ? 1 : -1)).sort((a, b) =>\n          a.company.localeCompare(b.company)\n        );\n        setVehicles(r);\n      })\n    );\n  };\n\n  const handleAssignmentChange = (e) => {\n    const stateToChange = { ...assignment };\n    stateToChange[e.target.id] = e.target.value;\n    setAssignment(stateToChange);\n  };\n\n  useEffect(() => {\n    getAssignment(props.match.params.assignmentId);\n    getAllDropDowns();\n  }, [props.match.params.assignmentId]);\n\n  const submit = () => {\n    const editedAssignment = {\n      id: props.match.params.assignmentId,\n      startTime: assignment.startTime,\n      endTime: assignment.endTime,\n      driverId: assignment.driver_id,\n      vehicleId: assignment.vehicle_id,\n      routeId: assignment.route_id,\n      dateId: assignment.date_id,\n    };\n    apiManager\n      .updateType(\"assignments\", editedAssignment)\n      .then(() => props.history.push(`/routeview`));\n  };\n\n  // get all drivers, check if driver already in system, post if not, send to route view\n  const handleSubmit = (e) => {\n    assignment.route_id = chosenRoute;\n    e.preventDefault();\n    apiManager\n      .getAssignmentsByDateDriver(assignment.date_id, assignment.driver_id)\n      .then((assignments) => {\n        if (assignments.length > 0) {\n          alert(\"This driver has already been assigned on this day.\");\n        } else {\n          apiManager\n            .addType(\"assignments\", assignment)\n            .then(() => props.history.push(`/route/view`));\n        }\n      });\n  };\n\n  return (\n    <>\n      <>\n        <Typography component=\"h1\" variant=\"h5\" className=\"page-header\">\n          Assignment Form\n        </Typography>\n        <form className=\"drop-downs\" onSubmit={handleSubmit}>\n          <Grid container spacing={3}>\n            <Grid item xs={12} md={3}>\n              <InputLabel>Driver:</InputLabel>\n              <Select\n                id=\"driver_id\"\n                native\n                onChange={handleAssignmentChange}\n                fullWidth\n                required\n                value={assignment.driver_id}\n              >\n                <option aria-label=\"None\" value=\"\" data-name=\"\">\n                  Choose Driver\n                </option>\n                {drivers ? (\n                  drivers.map((driver) => (\n                    <option key={driver.id} value={parseInt(driver.id)}>\n                      {driver.name}\n                    </option>\n                  ))\n                ) : (\n                  <></>\n                )}\n              </Select>\n            </Grid>\n            <Grid item xs={12} md={3}>\n              <InputLabel>Vehicle:</InputLabel>\n              <Select\n                id=\"vehicle_id\"\n                native\n                onChange={handleAssignmentChange}\n                fullWidth\n                required\n                value={assignment.vehicle_id}\n              >\n                <option aria-label=\"None\" value=\"\" data-name=\"\">\n                  Choose Vehicle\n                </option>\n                {vehicles ? (\n                  vehicles.map((vehicle) => (\n                    <option key={vehicle.id} value={parseInt(vehicle.id)}>\n                      {vehicle.company} {vehicle.number}\n                    </option>\n                  ))\n                ) : (\n                  <></>\n                )}\n              </Select>\n            </Grid>\n            <Grid item xs={12} md={3}>\n              <InputLabel>Route:</InputLabel>\n              <Select\n                id=\"route_id\"\n                native\n                onChange={handleAssignmentChange}\n                fullWidth\n                required\n                value={assignment.route_id}\n              >\n                <option aria-label=\"None\" value=\"\" data-name=\"\">\n                  Choose Route\n                </option>\n                {routes ? (\n                  routes.map((route) => (\n                    <option key={route.id} value={parseInt(route.id)}>\n                      {route.name} {route.description}\n                    </option>\n                  ))\n                ) : (\n                  <></>\n                )}\n              </Select>\n            </Grid>\n          </Grid>\n          <div className=\"submit-button\">\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n              Submit\n            </Button>\n          </div>\n        </form>\n      </>\n      {/* <>\n        <form>\n          <h3>Edit Assignment</h3>\n          <fieldset className=\"form\">\n            <div>\n              <label>Driver: </label>\n              <select\n                id=\"driverId\"\n                onChange={handleAssignmentChange}\n                value={assignment.driverId}\n              >\n                {drivers.map((driver) => (\n                  <option\n                    className=\"driver_option\"\n                    key={driver.id}\n                    value={driver.id}\n                  >\n                    {driver.name}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            <div>\n              <label>Vehicle: </label>\n              <select\n                id=\"vehicleId\"\n                onChange={handleAssignmentChange}\n                value={assignment.vehicleId}\n              >\n                {vehicles.map((vehicle) => (\n                  <option key={vehicle.id} value={vehicle.id}>\n                    {vehicle.company} {vehicle.number}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            <div>\n              <label>Route: </label>\n              <select\n                id=\"routeId\"\n                onChange={handleAssignmentChange}\n                value={assignment.routeId}\n              >\n                {routes.map((route) => (\n                  <option key={route.id} value={route.id}>\n                    {route.number}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            <div>\n              <label>Date: </label>\n              <select\n                id=\"dateId\"\n                onChange={handleAssignmentChange}\n                value={assignment.dateId}\n              >\n                {dates.map((date) => (\n                  <option key={date.id} value={date.id}>\n                    {date.date}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            <div>\n              <label>Start Time: </label>\n              <input\n                defaultValue={assignment.startTime}\n                type=\"time\"\n                onChange={handleAssignmentChange}\n                id=\"startTime\"\n              />\n            </div>\n\n            <div>\n              <label>End Time: </label>\n              <input\n                defaultValue={assignment.endTime}\n                type=\"time\"\n                onChange={handleAssignmentChange}\n                id=\"endTime\"\n              />\n            </div>\n\n            <button type=\"button\" onClick={submit}>\n              Submit\n            </button>\n          </fieldset>\n        </form>\n      </> */}\n    </>\n  );\n};\n\nexport default AssignmentEditForm;\n"]},"metadata":{},"sourceType":"module"}