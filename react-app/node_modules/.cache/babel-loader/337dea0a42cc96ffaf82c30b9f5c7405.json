{"ast":null,"code":"var _jsxFileName = \"/Users/MainTechPiece/workspace/final-capstone-react-app/src/logs/LocationLog.js\";\nimport React, { useState, useEffect } from \"react\";\nimport EntryCard from \"./EntryCard\";\nimport Grid from \"@material-ui/core/Grid\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport apiManager from \"../api/apiManager\";\n\nconst LocationLog = props => {\n  const locations = props.locations;\n  const events = props.events;\n  const dates = props.uniqueDates;\n  const chosenLocation = props.chosenLocation;\n  const chosenEvent = props.chosenEvent;\n  const chosenDate = props.chosenDate;\n  const handleChosenLocationChange = props.handleChosenLocationChange;\n  const handleChosenEventChange = props.handleChosenEventChange;\n  const handleChosenDateChange = props.handleChosenDateChange;\n  const [entries, setEntries] = useState([]); // get entries based on location and event chosen from dropdowns\n\n  const getEntries = (locationId, eventId) => {\n    apiManager.getEntriesByLocationAndEvent(locationId, eventId).then(r => {\n      setEntries(r);\n    });\n  };\n\n  console.log(chosenDate);\n  useEffect(() => {\n    getEntries(props.chosenLocation, props.chosenEvent);\n  }, [props.chosenLocation, props.chosenEvent]);\n  let routeName = \"\";\n  let routeDescription = \"\";\n  let routeColor = \"\";\n\n  if (entries[0] !== undefined) {\n    routeName = entries[0].location.route.name;\n    routeDescription = entries[0].location.route.description;\n    routeColor = entries[0].location.route.color;\n  }\n\n  const routeStyle = {\n    color: routeColor\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"event_header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, \"Location Logs\"), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, \"Select Date:\"), /*#__PURE__*/React.createElement(Select, {\n    id: \"dateId\",\n    native: true,\n    onChange: handleChosenDateChange,\n    fullWidth: true,\n    required: true,\n    label: \"??\" // value={chosenDate}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, dates ? dates.map(date => /*#__PURE__*/React.createElement(\"option\", {\n    key: date,\n    value: parseInt(date),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 19\n    }\n  }, date)) : /*#__PURE__*/React.createElement(React.Fragment, null))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }, \"Select Event:\"), /*#__PURE__*/React.createElement(Select, {\n    id: \"eventId\",\n    native: true,\n    onChange: handleChosenEventChange,\n    fullWidth: true,\n    required: true,\n    label: \"??\",\n    value: chosenEvent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }, events ? events.map(event => /*#__PURE__*/React.createElement(\"option\", {\n    key: event.id,\n    value: parseInt(event.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 19\n    }\n  }, event.name)) : /*#__PURE__*/React.createElement(React.Fragment, null))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, \"Select Location:\"), /*#__PURE__*/React.createElement(Select, {\n    id: \"locationId\",\n    native: true,\n    onChange: handleChosenLocationChange,\n    fullWidth: true,\n    required: true,\n    label: \"??\",\n    value: chosenLocation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }, locations ? locations.map(location => /*#__PURE__*/React.createElement(\"option\", {\n    key: location.id,\n    value: parseInt(location.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 19\n    }\n  }, location.name)) : /*#__PURE__*/React.createElement(React.Fragment, null))))), /*#__PURE__*/React.createElement(\"div\", {\n    style: routeStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }, \"Route \", routeName, \" \", routeDescription), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }, \"Time\", /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  }, \"Vehicle Number\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }, \"Attendee Count\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"location_log_header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }, entries.map(entry => /*#__PURE__*/React.createElement(EntryCard, Object.assign({\n    key: entry.id,\n    entry: entry\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 11\n    }\n  })))));\n};\n\nexport default LocationLog;","map":{"version":3,"sources":["/Users/MainTechPiece/workspace/final-capstone-react-app/src/logs/LocationLog.js"],"names":["React","useState","useEffect","EntryCard","Grid","InputLabel","Select","apiManager","LocationLog","props","locations","events","dates","uniqueDates","chosenLocation","chosenEvent","chosenDate","handleChosenLocationChange","handleChosenEventChange","handleChosenDateChange","entries","setEntries","getEntries","locationId","eventId","getEntriesByLocationAndEvent","then","r","console","log","routeName","routeDescription","routeColor","undefined","location","route","name","description","color","routeStyle","map","date","parseInt","event","id","entry"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport EntryCard from \"./EntryCard\";\nimport Grid from \"@material-ui/core/Grid\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport apiManager from \"../api/apiManager\";\n\nconst LocationLog = (props) => {\n  const locations = props.locations;\n  const events = props.events;\n  const dates = props.uniqueDates;\n  const chosenLocation = props.chosenLocation;\n  const chosenEvent = props.chosenEvent;\n  const chosenDate = props.chosenDate;\n  const handleChosenLocationChange = props.handleChosenLocationChange;\n  const handleChosenEventChange = props.handleChosenEventChange;\n  const handleChosenDateChange = props.handleChosenDateChange;\n  const [entries, setEntries] = useState([]);\n\n  // get entries based on location and event chosen from dropdowns\n  const getEntries = (locationId, eventId) => {\n    apiManager.getEntriesByLocationAndEvent(locationId, eventId).then((r) => {\n      setEntries(r);\n    });\n  };\n\n  console.log(chosenDate)\n\n  useEffect(() => {\n    getEntries(props.chosenLocation, props.chosenEvent);\n  }, [props.chosenLocation, props.chosenEvent]);\n\n  let routeName = \"\";\n  let routeDescription = \"\";\n  let routeColor = \"\";\n  if (entries[0] !== undefined) {\n    routeName = entries[0].location.route.name;\n    routeDescription = entries[0].location.route.description;\n    routeColor = entries[0].location.route.color;\n  }\n\n  const routeStyle = {\n    color: routeColor,\n  };\n\n  return (\n    <>\n      <div>\n        <h1 className=\"event_header\">Location Logs</h1>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={3}>\n            <InputLabel>Select Date:</InputLabel>\n            <Select\n              id=\"dateId\"\n              native\n              onChange={handleChosenDateChange}\n              fullWidth\n              required\n              label=\"??\"\n              // value={chosenDate}\n            >\n              {dates ? (\n                dates.map((date) => (\n                  <option key={date} value={parseInt(date)}>\n                    {date}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel>Select Event:</InputLabel>\n            <Select\n              id=\"eventId\"\n              native\n              onChange={handleChosenEventChange}\n              fullWidth\n              required\n              label=\"??\"\n              value={chosenEvent}\n            >\n              {events ? (\n                events.map((event) => (\n                  <option key={event.id} value={parseInt(event.id)}>\n                    {event.name}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel>Select Location:</InputLabel>\n            <Select\n              id=\"locationId\"\n              native\n              onChange={handleChosenLocationChange}\n              fullWidth\n              required\n              label=\"??\"\n              value={chosenLocation}\n            >\n              {locations ? (\n                locations.map((location) => (\n                  <option key={location.id} value={parseInt(location.id)}>\n                    {location.name}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n        </Grid>\n      </div>\n      <div style={routeStyle}>\n        Route {routeName} {routeDescription}\n      </div>\n      <div>\n        Time<span>Vehicle Number</span>\n        <span>Attendee Count</span>\n      </div>\n      <div className=\"location_log_header\"></div>\n      <div>\n        {entries.map((entry) => (\n          <EntryCard key={entry.id} entry={entry} {...props} />\n        ))}\n      </div>\n    </>\n  );\n};\n\nexport default LocationLog;\n"]},"metadata":{},"sourceType":"module"}