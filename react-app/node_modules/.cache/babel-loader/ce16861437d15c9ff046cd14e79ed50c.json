{"ast":null,"code":"var _jsxFileName = \"/Users/MainTechPiece/workspace/event-transpo-manager/react-app/src/drivers/driverList.js\";\nimport React, { useEffect, useState } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Typography from \"@material-ui/core/Typography\";\nimport DeleteOutlinedIcon from \"@material-ui/icons/DeleteOutlined\";\nimport { FaRegEdit } from \"react-icons/fa\";\nimport apiManager from \"../api/apiManager\";\n\nconst DriverList = props => {\n  const dates = props.dates;\n  const chosenDate = props.chosenDate;\n  const handleChosenDateChange = props.handleChosenDateChange;\n  const [assignments, setAssignments] = useState([]);\n\n  const getAssignments = () => {\n    apiManager.getAllType(\"assignments\").then(r => {\n      r.sort((a, b) => a.driver.name.localeCompare(b.driver.name));\n      setAssignments(r);\n    });\n  };\n\n  useEffect(() => {\n    getAssignments();\n  }, []);\n  let route = [];\n  let noRoute = []; // if (props.driver.assignments[0] !== undefined) {\n  //   route = props.driver.assignments[0].routeId;\n  // }\n  // else {\n  //   noRoute = \"Not Assigned\"\n  // }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Typography, {\n    component: \"h1\",\n    variant: \"h5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, \"Driver List\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"drop-downs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, \"Date:\"), /*#__PURE__*/React.createElement(Select, {\n    id: \"dateId\",\n    native: true,\n    onChange: handleChosenDateChange,\n    fullWidth: true,\n    required: true,\n    value: chosenDate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    \"aria-label\": \"None\",\n    value: \"\",\n    \"data-name\": \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 15\n    }\n  }, \"All Dates\"), dates ? dates.map(date => /*#__PURE__*/React.createElement(\"option\", {\n    key: date.id,\n    value: date.id,\n    \"data-name\": date.date,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 19\n    }\n  }, date.date)) : /*#__PURE__*/React.createElement(React.Fragment, null))))), /*#__PURE__*/React.createElement(TableContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    size: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 15\n    }\n  }, \"Name\"), /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 15\n    }\n  }, \"Phone Number\"), /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 15\n    }\n  }, \"Local\"), /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 15\n    }\n  }, \"Route\"), /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 15\n    }\n  }, \"Notes\"), /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 15\n    }\n  }, \"Actions\"))), /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }, assignments.map(assignment => /*#__PURE__*/React.createElement(TableRow, {\n    key: assignment.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    className: \"list_name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  }, assignment.driver.name), /*#__PURE__*/React.createElement(TableCell, {\n    className: \"list_phone\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }\n  }, assignment.driver.phone_number), assignment.driver.isLocal === true ? /*#__PURE__*/React.createElement(TableCell, {\n    className: \"is_local\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 19\n    }\n  }, \"Local\") : /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 17\n    }\n  }, assignment.route.name), /*#__PURE__*/React.createElement(TableCell, {\n    className: \"list_notes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }\n  }, assignment.driver.notes), /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"action-icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FaRegEdit, {\n    onClick: () => props.history.push(`/driver/edit/${assignment.driver_id}/${assignment.driver_id}`) // style={editIconStyle}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 23\n    }\n  }))))))))));\n};\n\nexport default DriverList;","map":{"version":3,"sources":["/Users/MainTechPiece/workspace/event-transpo-manager/react-app/src/drivers/driverList.js"],"names":["React","useEffect","useState","Grid","InputLabel","Select","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Typography","DeleteOutlinedIcon","FaRegEdit","apiManager","DriverList","props","dates","chosenDate","handleChosenDateChange","assignments","setAssignments","getAssignments","getAllType","then","r","sort","a","b","driver","name","localeCompare","route","noRoute","map","date","id","assignment","phone_number","isLocal","notes","history","push","driver_id"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Typography from \"@material-ui/core/Typography\";\nimport DeleteOutlinedIcon from \"@material-ui/icons/DeleteOutlined\";\nimport { FaRegEdit } from \"react-icons/fa\";\nimport apiManager from \"../api/apiManager\";\n\nconst DriverList = (props) => {\n  const dates = props.dates;\n  const chosenDate = props.chosenDate;\n  const handleChosenDateChange = props.handleChosenDateChange;\n\n  const [assignments, setAssignments] = useState([]);\n\n  const getAssignments = () => {\n    apiManager.getAllType(\"assignments\").then((r) => {\n      r.sort((a, b) => a.driver.name.localeCompare(b.driver.name));\n      setAssignments(r);\n    });\n  };\n\n  useEffect(() => {\n    getAssignments();\n  }, []);\n\n  let route = [];\n  let noRoute = [];\n\n  // if (props.driver.assignments[0] !== undefined) {\n  //   route = props.driver.assignments[0].routeId;\n  // }\n  // else {\n  //   noRoute = \"Not Assigned\"\n  // }\n\n  return (\n    <>\n      <Typography component=\"h1\" variant=\"h5\">\n        Driver List\n      </Typography>\n      <div className=\"drop-downs\">\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={3}>\n            <InputLabel>Date:</InputLabel>\n            <Select\n              id=\"dateId\"\n              native\n              onChange={handleChosenDateChange}\n              fullWidth\n              required\n              value={chosenDate}\n            >\n              <option aria-label=\"None\" value=\"\" data-name=\"\">\n                All Dates\n              </option>\n              {dates ? (\n                dates.map((date) => (\n                  <option key={date.id} value={date.id} data-name={date.date}>\n                    {date.date}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n        </Grid>\n      </div>\n      <TableContainer>\n        <Table size=\"small\">\n          <TableHead>\n            <TableRow>\n              <TableCell>Name</TableCell>\n              <TableCell>Phone Number</TableCell>\n              {/* {chosenDate === \"\" ? ( */}\n              <TableCell>Local</TableCell>\n              {/* ) : null} */}\n              <TableCell>Route</TableCell>\n              <TableCell>Notes</TableCell>\n              <TableCell>Actions</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {assignments.map((assignment) => (\n              <TableRow key={assignment.id}>\n                <TableCell className=\"list_name\">\n                  {assignment.driver.name}\n                </TableCell>\n                <TableCell className=\"list_phone\">\n                  {assignment.driver.phone_number}\n                </TableCell>\n                {assignment.driver.isLocal === true ? (\n                  <TableCell className=\"is_local\">Local</TableCell>\n                ) : (\n                  <TableCell></TableCell>\n                )}\n                <TableCell>{assignment.route.name}</TableCell>\n                <TableCell className=\"list_notes\">\n                  {assignment.driver.notes}\n                </TableCell>\n                <TableCell>\n                  {/* {parseInt(window.sessionStorage.getItem(\"userID\")) ===\n                    entry.user_id ? ( */}\n                  <>\n                    <span className=\"action-icon\">\n                      <FaRegEdit\n                        onClick={() =>\n                          props.history.push(\n                            `/driver/edit/${assignment.driver_id}/${assignment.driver_id}`\n                          )\n                        }\n                        // style={editIconStyle}\n                      />\n                    </span>\n                  </>\n                  {/* ) : null} */}\n                </TableCell>\n                {/* <TableCell> {\"\\u00A0\"} {route}</TableCell> */}\n                {/* <TableCell className=\"no_route\">{\"\\u00A0\"} {noRoute}</TableCell> */}\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </>\n  );\n};\n\nexport default DriverList;\n"]},"metadata":{},"sourceType":"module"}