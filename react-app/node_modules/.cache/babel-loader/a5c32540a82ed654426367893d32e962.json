{"ast":null,"code":"var _jsxFileName = \"/Users/MainTechPiece/workspace/event-transpo-manager/react-app/src/appViews.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { BrowserRouter, Route, Redirect } from \"react-router-dom\";\nimport NavBar from \"./navbar\";\nimport EventTranspoTracker from \"./eventTranspoTracker\";\nimport EventTranspoManager from \"./eventTranspoManager\";\nimport Login from \"./auth/login\";\nimport Register from \"./auth/register\";\nimport moment from \"moment\";\nimport apiManager from \"./api/apiManager\";\nimport \"./styles.css\";\n\nconst AppViews = props => {\n  const isAuthenticated = () => sessionStorage.getItem(\"token\") !== null;\n\n  const [hasUser, setHasUser] = useState(isAuthenticated());\n\n  const setUserToken = resp => {\n    sessionStorage.setItem(\"token\", resp.token);\n    sessionStorage.setItem(\"userID\", resp.user_id);\n    setHasUser(isAuthenticated());\n  };\n\n  const clearUser = () => {\n    sessionStorage.clear();\n    setHasUser(isAuthenticated());\n  };\n\n  const [mode, setMode] = useState(true);\n\n  const handleModeChange = () => {\n    setMode(!mode);\n  }; // places routes and shuttles fill the dropdown menus\n  // places filter based on chosenRoute\n  // chosenPlace chosenRoute and chosenShuttle are the choices made from the dropdowns\n\n\n  const [dates, setDates] = useState([]);\n  const [shuttles, setShuttles] = useState([]);\n  const [routes, setRoutes] = useState([]);\n  const [places, setPlaces] = useState([]);\n  const [entries, setEntries] = useState([]);\n  const [chosenDateId, setChosenDateId] = useState(\"\");\n  const [chosenDateName, setChosenDateName] = useState(\"\");\n  const [chosenShuttleId, setChosenShuttleId] = useState(\"\");\n  const [chosenShuttleName, setChosenShuttleName] = useState(\"\");\n  const [chosenRoute, setChosenRoute] = useState(\"\");\n  const [chosenPlaceId, setChosenPlaceId] = useState(\"\");\n  const [chosenPlaceName, setChosenPlaceName] = useState(\"\"); // get and sort all dropdowns\n\n  const getAllDropDowns = () => {\n    return apiManager.getAllType(\"dates\").then(r => {\n      r.sort((a, b) => a.date.localeCompare(b.date));\n      setDates(r);\n    }), apiManager.getAllType(\"shuttles\").then(r => {\n      r.sort((a, b) => a.name.localeCompare(b.name));\n      setShuttles(r);\n    }), apiManager.getAllType(\"routes\").then(r => {\n      r.sort((a, b) => a.name.localeCompare(b.name));\n      setRoutes(r);\n    }), apiManager.getAllType(\"places\").then(r => {\n      r.sort((a, b) => a.name.localeCompare(b.name));\n      setPlaces(r);\n    });\n  };\n\n  const today = dates.find(each => each.date === moment().format(\"YYYY-MM-DD\"));\n\n  if (today !== undefined) {\n    console.log(today);\n  }\n\n  console.log(chosenDateId);\n\n  const getEntries = () => {\n    apiManager.getAllType(\"entries\").then(r => {\n      setEntries(r);\n    });\n  }; // set chosenPlace based on choice from dropdown menu\n\n\n  const handleChosenPlaceChange = e => {\n    setChosenPlaceId(e.target.value);\n    setChosenPlaceName(e.target.options[e.target.selectedIndex].dataset.name);\n\n    if (e.target.value !== \"\") {} else {\n      apiManager.getAllType(\"routes\").then(r => {\n        r.sort((a, b) => a.name.localeCompare(b.name));\n        setRoutes(r);\n      });\n    }\n  }; // // set choseroute based on choice from dropdown menu on form log and graph\n\n\n  const handleChosenRouteChange = e => {\n    const routeId = e.target.value;\n    setChosenRoute(routeId);\n    setChosenPlaceId(\"\");\n    setChosenPlaceName(\"\");\n    apiManager.getAllType(\"places\").then(r => {\n      if (routeId !== \"\") {\n        setPlaces(r.filter(each => each.route.name === routeId).sort((a, b) => a.name.localeCompare(b.name)));\n      } else {\n        setPlaces(r.sort((a, b) => a.name.localeCompare(b.name)));\n      }\n    });\n  }; // set chosenShuttleId based on choice from dropdown menu\n\n\n  const handleChosenShuttleChange = e => {\n    setChosenShuttleId(e.target.value);\n    setChosenShuttleName(e.target.options[e.target.selectedIndex].dataset.name);\n  }; // set chosenDate based on choice from dropdown menu\n\n\n  const handleChosenDateChange = e => {\n    setChosenDateId(e.target.value);\n    setChosenDateName(e.target.options[e.target.selectedIndex].dataset.name);\n  };\n\n  useEffect(() => {\n    getAllDropDowns();\n  }, []);\n  return /*#__PURE__*/React.createElement(BrowserRouter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(React.Fragment, null, hasUser ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(NavBar, Object.assign({\n    hasUser: hasUser,\n    clearUser: clearUser,\n    mode: mode,\n    handleModeChange: handleModeChange\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(React.Fragment, null, mode === false ? /*#__PURE__*/React.createElement(EventTranspoTracker, Object.assign({\n    hasUser: hasUser,\n    dates: dates,\n    shuttles: shuttles,\n    routes: routes,\n    places: places,\n    entries: entries,\n    chosenDateId: chosenDateId,\n    chosenDateName: chosenDateName,\n    chosenShuttleId: chosenShuttleId,\n    chosenShuttleName: chosenShuttleName,\n    chosenRoute: chosenRoute,\n    chosenPlaceId: chosenPlaceId,\n    chosenPlaceName: chosenPlaceName,\n    getEntries: getEntries,\n    handleChosenPlaceChange: handleChosenPlaceChange,\n    handleChosenRouteChange: handleChosenRouteChange,\n    handleChosenShuttleChange: handleChosenShuttleChange,\n    handleChosenDateChange: handleChosenDateChange\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 17\n    }\n  })) : /*#__PURE__*/React.createElement(EventTranspoManager, Object.assign({\n    hasUser: hasUser,\n    dates: dates,\n    routes: routes,\n    chosenDateId: chosenDateId,\n    chosenRoute: chosenRoute,\n    handleChosenRouteChange: handleChosenRouteChange,\n    handleChosenDateChange: handleChosenDateChange\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 17\n    }\n  })))) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/\",\n    render: () => /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 49\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/login\",\n    render: props => /*#__PURE__*/React.createElement(Login, Object.assign({\n      setUserToken: setUserToken\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/register\",\n    render: props => /*#__PURE__*/React.createElement(Register, Object.assign({\n      setUserToken: setUserToken\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 17\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 13\n    }\n  }))));\n};\n\nexport default AppViews;","map":{"version":3,"sources":["/Users/MainTechPiece/workspace/event-transpo-manager/react-app/src/appViews.js"],"names":["React","useState","useEffect","BrowserRouter","Route","Redirect","NavBar","EventTranspoTracker","EventTranspoManager","Login","Register","moment","apiManager","AppViews","props","isAuthenticated","sessionStorage","getItem","hasUser","setHasUser","setUserToken","resp","setItem","token","user_id","clearUser","clear","mode","setMode","handleModeChange","dates","setDates","shuttles","setShuttles","routes","setRoutes","places","setPlaces","entries","setEntries","chosenDateId","setChosenDateId","chosenDateName","setChosenDateName","chosenShuttleId","setChosenShuttleId","chosenShuttleName","setChosenShuttleName","chosenRoute","setChosenRoute","chosenPlaceId","setChosenPlaceId","chosenPlaceName","setChosenPlaceName","getAllDropDowns","getAllType","then","r","sort","a","b","date","localeCompare","name","today","find","each","format","undefined","console","log","getEntries","handleChosenPlaceChange","e","target","value","options","selectedIndex","dataset","handleChosenRouteChange","routeId","filter","route","handleChosenShuttleChange","handleChosenDateChange"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter, Route, Redirect } from \"react-router-dom\";\nimport NavBar from \"./navbar\";\nimport EventTranspoTracker from \"./eventTranspoTracker\";\nimport EventTranspoManager from \"./eventTranspoManager\";\nimport Login from \"./auth/login\";\nimport Register from \"./auth/register\";\nimport moment from \"moment\";\nimport apiManager from \"./api/apiManager\";\nimport \"./styles.css\";\n\nconst AppViews = (props) => {\n  const isAuthenticated = () => sessionStorage.getItem(\"token\") !== null;\n  const [hasUser, setHasUser] = useState(isAuthenticated());\n\n  const setUserToken = (resp) => {\n    sessionStorage.setItem(\"token\", resp.token);\n    sessionStorage.setItem(\"userID\", resp.user_id);\n    setHasUser(isAuthenticated());\n  };\n\n  const clearUser = () => {\n    sessionStorage.clear();\n    setHasUser(isAuthenticated());\n  };\n\n  const [mode, setMode] = useState(true);\n  const handleModeChange = () => {\n    setMode(!mode);\n  };\n\n  // places routes and shuttles fill the dropdown menus\n  // places filter based on chosenRoute\n  // chosenPlace chosenRoute and chosenShuttle are the choices made from the dropdowns\n  const [dates, setDates] = useState([]);\n  const [shuttles, setShuttles] = useState([]);\n  const [routes, setRoutes] = useState([]);\n  const [places, setPlaces] = useState([]);\n  const [entries, setEntries] = useState([]);\n  const [chosenDateId, setChosenDateId] = useState(\"\");\n  const [chosenDateName, setChosenDateName] = useState(\"\");\n  const [chosenShuttleId, setChosenShuttleId] = useState(\"\");\n  const [chosenShuttleName, setChosenShuttleName] = useState(\"\");\n  const [chosenRoute, setChosenRoute] = useState(\"\");\n  const [chosenPlaceId, setChosenPlaceId] = useState(\"\");\n  const [chosenPlaceName, setChosenPlaceName] = useState(\"\");\n\n  // get and sort all dropdowns\n  const getAllDropDowns = () => {\n    return (\n      apiManager.getAllType(\"dates\").then((r) => {\n        r.sort((a, b) => a.date.localeCompare(b.date));\n        setDates(r);\n      }),\n      apiManager.getAllType(\"shuttles\").then((r) => {\n        r.sort((a, b) => a.name.localeCompare(b.name));\n        setShuttles(r);\n      }),\n      apiManager.getAllType(\"routes\").then((r) => {\n        r.sort((a, b) => a.name.localeCompare(b.name));\n        setRoutes(r);\n      }),\n      apiManager.getAllType(\"places\").then((r) => {\n        r.sort((a, b) => a.name.localeCompare(b.name));\n        setPlaces(r);\n      })\n    );\n  };\n\n  const today = dates.find(\n    (each) => each.date === moment().format(\"YYYY-MM-DD\")\n  );\n  if (today !== undefined) {\n    console.log(today);\n  }\n\n  console.log(chosenDateId)\n\n  const getEntries = () => {\n    apiManager.getAllType(\"entries\").then((r) => {\n      setEntries(r);\n    });\n  };\n\n  // set chosenPlace based on choice from dropdown menu\n  const handleChosenPlaceChange = (e) => {\n    setChosenPlaceId(e.target.value);\n    setChosenPlaceName(e.target.options[e.target.selectedIndex].dataset.name);\n    if (e.target.value !== \"\") {\n    } else {\n      apiManager.getAllType(\"routes\").then((r) => {\n        r.sort((a, b) => a.name.localeCompare(b.name));\n        setRoutes(r);\n      });\n    }\n  };\n\n  // // set choseroute based on choice from dropdown menu on form log and graph\n  const handleChosenRouteChange = (e) => {\n    const routeId = e.target.value;\n    setChosenRoute(routeId);\n    setChosenPlaceId(\"\");\n    setChosenPlaceName(\"\");\n    apiManager.getAllType(\"places\").then((r) => {\n      if (routeId !== \"\") {\n        setPlaces(\n          r\n            .filter((each) => each.route.name === routeId)\n            .sort((a, b) => a.name.localeCompare(b.name))\n        );\n      } else {\n        setPlaces(r.sort((a, b) => a.name.localeCompare(b.name)));\n      }\n    });\n  };\n\n  // set chosenShuttleId based on choice from dropdown menu\n  const handleChosenShuttleChange = (e) => {\n    setChosenShuttleId(e.target.value);\n    setChosenShuttleName(e.target.options[e.target.selectedIndex].dataset.name);\n  };\n\n  // set chosenDate based on choice from dropdown menu\n  const handleChosenDateChange = (e) => {\n    setChosenDateId(e.target.value);\n    setChosenDateName(e.target.options[e.target.selectedIndex].dataset.name);\n  };\n\n  useEffect(() => {\n    getAllDropDowns();\n  }, []);\n\n  return (\n    <BrowserRouter>\n      <>\n        {hasUser ? (\n          <>\n            <NavBar\n              hasUser={hasUser}\n              clearUser={clearUser}\n              mode={mode}\n              handleModeChange={handleModeChange}\n              {...props}\n            />\n            <>\n              {mode === false ? (\n                <EventTranspoTracker\n                  hasUser={hasUser}\n                  dates={dates}\n                  shuttles={shuttles}\n                  routes={routes}\n                  places={places}\n                  entries={entries}\n                  chosenDateId={chosenDateId}\n                  chosenDateName={chosenDateName}\n                  chosenShuttleId={chosenShuttleId}\n                  chosenShuttleName={chosenShuttleName}\n                  chosenRoute={chosenRoute}\n                  chosenPlaceId={chosenPlaceId}\n                  chosenPlaceName={chosenPlaceName}\n                  getEntries={getEntries}\n                  handleChosenPlaceChange={handleChosenPlaceChange}\n                  handleChosenRouteChange={handleChosenRouteChange}\n                  handleChosenShuttleChange={handleChosenShuttleChange}\n                  handleChosenDateChange={handleChosenDateChange}\n                  {...props}\n                />\n              ) : (\n                <EventTranspoManager\n                  hasUser={hasUser}\n                  dates={dates}\n                  routes={routes}\n                  chosenDateId={chosenDateId}\n                  chosenRoute={chosenRoute}\n                  handleChosenRouteChange={handleChosenRouteChange}\n                  handleChosenDateChange={handleChosenDateChange}\n                  {...props}\n                />\n              )}\n            </>\n          </>\n        ) : (\n          <>\n            <Route exact path=\"/\" render={() => <Redirect to=\"/login\" />} />\n            <Route\n              exact\n              path=\"/login\"\n              render={(props) => (\n                <Login setUserToken={setUserToken} {...props} />\n              )}\n            />\n            <Route\n              exact\n              path=\"/register\"\n              render={(props) => (\n                <Register setUserToken={setUserToken} {...props} />\n              )}\n            />\n          </>\n        )}\n      </>\n    </BrowserRouter>\n  );\n};\n\nexport default AppViews;\n"]},"metadata":{},"sourceType":"module"}