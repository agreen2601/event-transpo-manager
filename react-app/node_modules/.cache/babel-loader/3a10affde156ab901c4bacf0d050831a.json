{"ast":null,"code":"import React from \"react\";\nimport { Chart } from \"react-chartjs-2\";\n\nconst Test2 = props => {\n  const entries = props.filteredEntries;\n  const timeNumberfied = entries.map(entry => parseFloat(`${entry.time.split(\":\")[0]}.${(entry.time.split(\":\")[1] / 60).toString().split(\".\")[1]}`.slice(0, 5)));\n  var barValues = [{\n    x: 360,\n    y: 1\n  }, {\n    x: 401,\n    y: 2\n  }, {\n    x: 409,\n    y: 7\n  }, {\n    x: 417,\n    y: 4\n  }, {\n    x: 425,\n    y: 0\n  }, {\n    x: 433,\n    y: 3\n  }, {\n    x: 441,\n    y: 2\n  }, {\n    x: 449,\n    y: 1\n  }, {\n    x: 457,\n    y: 0\n  }];\n\n  function barValue(x) {\n    const barDistance = barValues[1].x - barValues[0].x;\n\n    for (let barValue of barValues) {\n      console.log(Math.abs(barValue.x - x));\n\n      if (Math.floor(x) == barValue.x) {\n        return barValue.y;\n      }\n    }\n\n    return 0;\n  } //   var ctx = document.getElementById(\"chart-js\").getContext(\"2d\");\n\n\n  new Chart(ctx, {\n    type: \"bar\",\n    data: {\n      labels: timeNumberfied.map(v => v.x),\n      datasets: [{\n        label: \"Label nº A\",\n        backgroundColor: \"#000\",\n        borderWidth: 2,\n        fill: false,\n        data: timeNumberfied.map(v => barValue(v.x)),\n        yAxisID: \"A\"\n      }, {\n        type: \"line\",\n        label: \"Label nº B\",\n        backgroundColor: \"#cc99ff\",\n        data: timeNumberfied,\n        yAxisID: \"B\",\n        pointRadius: 0\n      }]\n    },\n    options: {\n      responsive: true,\n      scales: {\n        xAxes: [{\n          display: true,\n          ticks: {\n            maxTicksLimit: 10,\n            callback: value => Math.floor(value)\n          }\n        }],\n        yAxes: [{\n          id: \"A\",\n          display: true,\n          type: \"linear\"\n        }, {\n          id: \"B\",\n          display: true,\n          type: \"linear\",\n          position: \"right\",\n          ticks: {\n            max: 0.03,\n            min: 0\n          }\n        }]\n      }\n    }\n  });\n};\n\nexport default Test2;","map":{"version":3,"sources":["/Users/MainTechPiece/workspace/final-capstone-react-app/src/reports/test2.js"],"names":["React","Chart","Test2","props","entries","filteredEntries","timeNumberfied","map","entry","parseFloat","time","split","toString","slice","barValues","x","y","barValue","barDistance","console","log","Math","abs","floor","ctx","type","data","labels","v","datasets","label","backgroundColor","borderWidth","fill","yAxisID","pointRadius","options","responsive","scales","xAxes","display","ticks","maxTicksLimit","callback","value","yAxes","id","position","max","min"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Chart } from \"react-chartjs-2\";\n\nconst Test2 = (props) => {\n  const entries = props.filteredEntries;\n\n  const timeNumberfied = entries.map((entry) =>\n    parseFloat(\n      `${entry.time.split(\":\")[0]}.${\n        (entry.time.split(\":\")[1] / 60).toString().split(\".\")[1]\n      }`.slice(0, 5)\n    )\n  );\n\n  var barValues = [\n    {\n      x: 360,\n      y: 1,\n    },\n    {\n      x: 401,\n      y: 2,\n    },\n    {\n      x: 409,\n      y: 7,\n    },\n    {\n      x: 417,\n      y: 4,\n    },\n    {\n      x: 425,\n      y: 0,\n    },\n    {\n      x: 433,\n      y: 3,\n    },\n    {\n      x: 441,\n      y: 2,\n    },\n    {\n      x: 449,\n      y: 1,\n    },\n    {\n      x: 457,\n      y: 0,\n    },\n  ];\n\n  function barValue(x) {\n    const barDistance = barValues[1].x - barValues[0].x;\n    for (let barValue of barValues) {\n      console.log(Math.abs(barValue.x - x));\n      if (Math.floor(x) == barValue.x) {\n        return barValue.y;\n      }\n    }\n    return 0;\n  }\n\n//   var ctx = document.getElementById(\"chart-js\").getContext(\"2d\");\n  new Chart(ctx, {\n    type: \"bar\",\n    data: {\n      labels: timeNumberfied.map((v) => v.x),\n      datasets: [\n        {\n          label: \"Label nº A\",\n          backgroundColor: \"#000\",\n          borderWidth: 2,\n          fill: false,\n          data: timeNumberfied.map((v) => barValue(v.x)),\n          yAxisID: \"A\",\n        },\n        {\n          type: \"line\",\n          label: \"Label nº B\",\n          backgroundColor: \"#cc99ff\",\n          data: timeNumberfied,\n          yAxisID: \"B\",\n          pointRadius: 0,\n        },\n      ],\n    },\n    options: {\n      responsive: true,\n      scales: {\n        xAxes: [\n          {\n            display: true,\n            ticks: {\n              maxTicksLimit: 10,\n              callback: (value) => Math.floor(value),\n            },\n          },\n        ],\n        yAxes: [\n          {\n            id: \"A\",\n            display: true,\n            type: \"linear\",\n          },\n          {\n            id: \"B\",\n            display: true,\n            type: \"linear\",\n            position: \"right\",\n            ticks: {\n              max: 0.03,\n              min: 0,\n            },\n          },\n        ],\n      },\n    },\n  });\n};\n\nexport default Test2;\n"]},"metadata":{},"sourceType":"module"}