{"ast":null,"code":"var _jsxFileName = \"/Users/MainTechPiece/workspace/final-capstone-react-app/src/eventTranspoTracker.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { BrowserRouter, Route, Redirect } from \"react-router-dom\";\nimport NavBar from \"./navbar\";\nimport EntryForm from \"./forms/entryForm\";\nimport EntryEditForm from \"./forms/entryEditForm\";\nimport apiManager from \"./api/apiManager\";\nimport RouteReport from \"./reports/routeReport\";\nimport LocationLog from \"./logs/locationLog\";\nimport Login from \"./auth/login\";\nimport Register from \"./auth/register\";\nimport \"./styles.css\";\n\nconst EventTranspoTracker = () => {\n  const isAuthenticated = () => sessionStorage.getItem(\"token\") !== null;\n\n  const [hasUser, setHasUser] = useState(isAuthenticated());\n\n  const setUserToken = resp => {\n    sessionStorage.setItem(\"token\", resp.token);\n    sessionStorage.setItem(\"userID\", resp.user_id);\n    setHasUser(isAuthenticated());\n  };\n\n  const clearUser = () => {\n    sessionStorage.clear();\n    setHasUser(isAuthenticated());\n  }; // locations routes and events fill the dropdown menus\n  // locations filter based on chosenRoute\n  // chosenLocation chosenRoute and chosenEvent are the choices made from the dropdowns\n\n\n  const [locations, setLocations] = useState([]);\n  const [routes, setRoutes] = useState([]);\n  const [events, setEvents] = useState([]);\n  const [entries, setEntries] = useState([]);\n  const [chosenLocation, setChosenLocation] = useState(\"\");\n  const [chosenLocationName, setChosenLocationName] = useState(\"\");\n  const [chosenRoute, setChosenRoute] = useState(\"\");\n  const [chosenEvent, setChosenEvent] = useState(\"\");\n  const [chosenDate, setChosenDate] = useState(\"\"); // get and sort in alpha order all locations for the dropdown menus\n\n  const getLocations = () => {\n    apiManager.getAllType(\"places\").then(r => {\n      r.sort((a, b) => a.name.localeCompare(b.name));\n      setLocations(r);\n    });\n  }; // set choseLocation based on choice from dropdown menu\n\n\n  const handleChosenLocationChange = e => {\n    const placeId = e.target.value;\n    const placeName = e.target.name;\n    setChosenLocation(placeId);\n    setChosenLocationName(placeName);\n\n    if (placeId !== \"\") {// apiManager.getSingleType(\"places\", placeId).then((r) => {\n      //   apiManager.getSingleType(\"routes\", r.route_id).then((re) => {\n      //     // setRoutes([re]);\n      //     // setChosenRoute(re.name)\n      //   });\n      // });\n    } else {\n      getRoutes();\n    }\n  }; // // get and sort in alpha order all routes for the dropdown menus and pass them to the form log and graph\n\n\n  const getRoutes = () => {\n    apiManager.getAllType(\"routes\").then(r => {\n      r.sort((a, b) => a.name.localeCompare(b.name));\n      setRoutes(r);\n    });\n  }; // // set choseroute based on choice from dropdown menu on form log and graph\n\n\n  const handleChosenRouteChange = e => {\n    const routeId = e.target.value;\n    setChosenRoute(routeId);\n    setChosenLocation(\"\");\n    apiManager.getAllType(\"places\").then(r => {\n      if (routeId !== \"\") {\n        setLocations(r.filter(each => each.route.name === routeId).sort((a, b) => a.name.localeCompare(b.name)));\n      } else {\n        setLocations(r.sort((a, b) => a.name.localeCompare(b.name)));\n      }\n    });\n  }; // get and sort in alpha order all events for the dropdown menus\n\n\n  const getEvents = () => {\n    apiManager.getAllType(\"events\").then(r => {\n      r.sort((a, b) => a.name.localeCompare(b.name));\n      setEvents(r);\n    });\n  }; // set chosenEvent based on choice from dropdown menu\n\n\n  const handleChosenEventChange = e => {\n    const eventId = e.target.value;\n    setChosenEvent(eventId);\n  }; // get all entries then find unique dates for the dropdown menus\n\n\n  const getEntries = () => {\n    apiManager.getAllType(\"entries\").then(r => {\n      r.sort((a, b) => a.date.localeCompare(b.date));\n      setEntries(r);\n    });\n  };\n\n  const uniqueDates = [...new Set(entries.map(entry => entry.date))]; // set chosenDate based on choice from dropdown menu\n\n  const handleChosenDateChange = e => {\n    const dateId = e.target.value;\n    setChosenDate(dateId);\n  }; // watch for change in chosenlocation and update chosenroute at the same time\n\n\n  useEffect(() => {\n    getEvents();\n    getEntries();\n    getLocations();\n    getRoutes();\n  }, []);\n  return /*#__PURE__*/React.createElement(BrowserRouter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(NavBar, {\n    hasUser: hasUser,\n    clearUser: clearUser,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/\",\n    render: () => /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 43\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/login\",\n    render: props => hasUser ? /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/entry/form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 13\n      }\n    }) : /*#__PURE__*/React.createElement(Login, Object.assign({\n      setUserToken: setUserToken\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 13\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/register\",\n    render: props => hasUser ? /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/entry/form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 13\n      }\n    }) : /*#__PURE__*/React.createElement(Register, Object.assign({\n      setUserToken: setUserToken\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 13\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/entry/form\",\n    render: props => hasUser ? /*#__PURE__*/React.createElement(EntryForm, Object.assign({\n      locations: locations,\n      routes: routes,\n      events: events,\n      chosenLocation: chosenLocation,\n      chosenRoute: chosenRoute,\n      chosenEvent: chosenEvent,\n      chosenDate: chosenDate,\n      handleChosenLocationChange: handleChosenLocationChange,\n      handleChosenRouteChange: handleChosenRouteChange,\n      handleChosenEventChange: handleChosenEventChange,\n      handleChosenDateChange: handleChosenDateChange\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 13\n      }\n    })) : /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 13\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/entry/edit/form/:entryId(\\\\d+)\",\n    render: props => hasUser ? /*#__PURE__*/React.createElement(EntryEditForm, Object.assign({\n      locations: locations,\n      routes: routes,\n      events: events,\n      chosenLocation: chosenLocation,\n      chosenRoute: chosenRoute,\n      chosenEvent: chosenEvent,\n      chosenDate: chosenDate,\n      handleChosenLocationChange: handleChosenLocationChange,\n      handleChosenRouteChange: handleChosenRouteChange,\n      handleChosenEventChange: handleChosenEventChange,\n      handleChosenDateChange: handleChosenDateChange\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 13\n      }\n    })) : /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 13\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/location/log\",\n    render: props => hasUser ? /*#__PURE__*/React.createElement(LocationLog, Object.assign({\n      getEntries: getEntries,\n      locations: locations,\n      routes: routes,\n      events: events,\n      entries: entries,\n      uniqueDates: uniqueDates,\n      chosenLocation: chosenLocation,\n      chosenRoute: chosenRoute,\n      chosenEvent: chosenEvent,\n      chosenDate: chosenDate,\n      handleChosenLocationChange: handleChosenLocationChange,\n      handleChosenRouteChange: handleChosenRouteChange,\n      handleChosenEventChange: handleChosenEventChange,\n      handleChosenDateChange: handleChosenDateChange\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 13\n      }\n    })) : /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 13\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/route/report\",\n    render: props => hasUser ? /*#__PURE__*/React.createElement(RouteReport, Object.assign({\n      getEntries: getEntries,\n      locations: locations,\n      routes: routes,\n      events: events,\n      entries: entries,\n      uniqueDates: uniqueDates,\n      chosenLocation: chosenLocation,\n      chosenRoute: chosenRoute,\n      chosenEvent: chosenEvent,\n      chosenDate: chosenDate,\n      handleChosenLocationChange: handleChosenLocationChange,\n      handleChosenRouteChange: handleChosenRouteChange,\n      handleChosenEventChange: handleChosenEventChange,\n      handleChosenDateChange: handleChosenDateChange\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 13\n      }\n    })) : /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 13\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default EventTranspoTracker;","map":{"version":3,"sources":["/Users/MainTechPiece/workspace/final-capstone-react-app/src/eventTranspoTracker.js"],"names":["React","useState","useEffect","BrowserRouter","Route","Redirect","NavBar","EntryForm","EntryEditForm","apiManager","RouteReport","LocationLog","Login","Register","EventTranspoTracker","isAuthenticated","sessionStorage","getItem","hasUser","setHasUser","setUserToken","resp","setItem","token","user_id","clearUser","clear","locations","setLocations","routes","setRoutes","events","setEvents","entries","setEntries","chosenLocation","setChosenLocation","chosenLocationName","setChosenLocationName","chosenRoute","setChosenRoute","chosenEvent","setChosenEvent","chosenDate","setChosenDate","getLocations","getAllType","then","r","sort","a","b","name","localeCompare","handleChosenLocationChange","e","placeId","target","value","placeName","getRoutes","handleChosenRouteChange","routeId","filter","each","route","getEvents","handleChosenEventChange","eventId","getEntries","date","uniqueDates","Set","map","entry","handleChosenDateChange","dateId","props"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter, Route, Redirect } from \"react-router-dom\";\nimport NavBar from \"./navbar\";\nimport EntryForm from \"./forms/entryForm\";\nimport EntryEditForm from \"./forms/entryEditForm\";\nimport apiManager from \"./api/apiManager\";\nimport RouteReport from \"./reports/routeReport\";\nimport LocationLog from \"./logs/locationLog\";\nimport Login from \"./auth/login\";\nimport Register from \"./auth/register\";\nimport \"./styles.css\";\n\nconst EventTranspoTracker = () => {\n  const isAuthenticated = () => sessionStorage.getItem(\"token\") !== null;\n  const [hasUser, setHasUser] = useState(isAuthenticated());\n\n  const setUserToken = (resp) => {\n    sessionStorage.setItem(\"token\", resp.token);\n    sessionStorage.setItem(\"userID\", resp.user_id);\n    setHasUser(isAuthenticated());\n  };\n\n  const clearUser = () => {\n    sessionStorage.clear();\n    setHasUser(isAuthenticated());\n  };\n\n  // locations routes and events fill the dropdown menus\n  // locations filter based on chosenRoute\n  // chosenLocation chosenRoute and chosenEvent are the choices made from the dropdowns\n  const [locations, setLocations] = useState([]);\n  const [routes, setRoutes] = useState([]);\n  const [events, setEvents] = useState([]);\n  const [entries, setEntries] = useState([]);\n  const [chosenLocation, setChosenLocation] = useState(\"\");\n  const [chosenLocationName, setChosenLocationName] = useState(\"\");\n  const [chosenRoute, setChosenRoute] = useState(\"\");\n  const [chosenEvent, setChosenEvent] = useState(\"\");\n  const [chosenDate, setChosenDate] = useState(\"\");\n\n  // get and sort in alpha order all locations for the dropdown menus\n  const getLocations = () => {\n    apiManager.getAllType(\"places\").then((r) => {\n      r.sort((a, b) => a.name.localeCompare(b.name));\n      setLocations(r);\n    });\n  };\n\n  // set choseLocation based on choice from dropdown menu\n  const handleChosenLocationChange = (e) => {\n    const placeId = e.target.value;\n    const placeName = e.target.name\n    setChosenLocation(placeId);\n    setChosenLocationName(placeName)\n    if (placeId !== \"\") {\n      // apiManager.getSingleType(\"places\", placeId).then((r) => {\n      //   apiManager.getSingleType(\"routes\", r.route_id).then((re) => {\n      //     // setRoutes([re]);\n      //     // setChosenRoute(re.name)\n      //   });\n      // });\n    } else {\n      getRoutes();\n    }\n  };\n\n  // // get and sort in alpha order all routes for the dropdown menus and pass them to the form log and graph\n  const getRoutes = () => {\n    apiManager.getAllType(\"routes\").then((r) => {\n      r.sort((a, b) => a.name.localeCompare(b.name));\n      setRoutes(r);\n    });\n  };\n\n  // // set choseroute based on choice from dropdown menu on form log and graph\n  const handleChosenRouteChange = (e) => {\n    const routeId = e.target.value;\n    setChosenRoute(routeId);\n    setChosenLocation(\"\");\n    apiManager.getAllType(\"places\").then((r) => {\n      if (routeId !== \"\") {\n        setLocations(\n          r\n            .filter((each) => each.route.name === routeId)\n            .sort((a, b) => a.name.localeCompare(b.name))\n        );\n      } else {\n        setLocations(r.sort((a, b) => a.name.localeCompare(b.name)));\n      }\n    });\n  };\n\n  // get and sort in alpha order all events for the dropdown menus\n  const getEvents = () => {\n    apiManager.getAllType(\"events\").then((r) => {\n      r.sort((a, b) => a.name.localeCompare(b.name));\n      setEvents(r);\n    });\n  };\n\n  // set chosenEvent based on choice from dropdown menu\n  const handleChosenEventChange = (e) => {\n    const eventId = e.target.value;\n    setChosenEvent(eventId);\n  };\n\n  // get all entries then find unique dates for the dropdown menus\n  const getEntries = () => {\n    apiManager.getAllType(\"entries\").then((r) => {\n      r.sort((a, b) => a.date.localeCompare(b.date));\n      setEntries(r);\n    });\n  };\n  const uniqueDates = [...new Set(entries.map((entry) => entry.date))];\n\n  // set chosenDate based on choice from dropdown menu\n  const handleChosenDateChange = (e) => {\n    const dateId = e.target.value;\n    setChosenDate(dateId);\n  };\n\n  // watch for change in chosenlocation and update chosenroute at the same time\n  useEffect(() => {\n    getEvents();\n    getEntries();\n    getLocations();\n    getRoutes();\n  }, []);\n\n  return (\n    <BrowserRouter>\n      <NavBar hasUser={hasUser} clearUser={clearUser} />\n      <Route exact path=\"/\" render={() => <Redirect to=\"/login\" />} />\n      <Route\n        exact\n        path=\"/login\"\n        render={(props) =>\n          hasUser ? (\n            <Redirect to=\"/entry/form\" />\n          ) : (\n            <Login setUserToken={setUserToken} {...props} />\n          )\n        }\n      />\n      <Route\n        exact\n        path=\"/register\"\n        render={(props) =>\n          hasUser ? (\n            <Redirect to=\"/entry/form\" />\n          ) : (\n            <Register setUserToken={setUserToken} {...props} />\n          )\n        }\n      />\n      <Route\n        exact\n        path=\"/entry/form\"\n        render={(props) =>\n          hasUser ? (\n            <EntryForm\n              locations={locations}\n              routes={routes}\n              events={events}\n              chosenLocation={chosenLocation}\n              chosenRoute={chosenRoute}\n              chosenEvent={chosenEvent}\n              chosenDate={chosenDate}\n              handleChosenLocationChange={handleChosenLocationChange}\n              handleChosenRouteChange={handleChosenRouteChange}\n              handleChosenEventChange={handleChosenEventChange}\n              handleChosenDateChange={handleChosenDateChange}\n              {...props}\n            />\n          ) : (\n            <Redirect to=\"/login\" />\n          )\n        }\n      />\n      <Route\n        exact\n        path=\"/entry/edit/form/:entryId(\\d+)\"\n        render={(props) =>\n          hasUser ? (\n            <EntryEditForm\n              locations={locations}\n              routes={routes}\n              events={events}\n              chosenLocation={chosenLocation}\n              chosenRoute={chosenRoute}\n              chosenEvent={chosenEvent}\n              chosenDate={chosenDate}\n              handleChosenLocationChange={handleChosenLocationChange}\n              handleChosenRouteChange={handleChosenRouteChange}\n              handleChosenEventChange={handleChosenEventChange}\n              handleChosenDateChange={handleChosenDateChange}\n              {...props}\n            />\n          ) : (\n            <Redirect to=\"/login\" />\n          )\n        }\n      />\n      <Route\n        exact\n        path=\"/location/log\"\n        render={(props) =>\n          hasUser ? (\n            <LocationLog\n              getEntries={getEntries}\n              locations={locations}\n              routes={routes}\n              events={events}\n              entries={entries}\n              uniqueDates={uniqueDates}\n              chosenLocation={chosenLocation}\n              chosenRoute={chosenRoute}\n              chosenEvent={chosenEvent}\n              chosenDate={chosenDate}\n              handleChosenLocationChange={handleChosenLocationChange}\n              handleChosenRouteChange={handleChosenRouteChange}\n              handleChosenEventChange={handleChosenEventChange}\n              handleChosenDateChange={handleChosenDateChange}\n              {...props}\n            />\n          ) : (\n            <Redirect to=\"/login\" />\n          )\n        }\n      />\n      <Route\n        exact\n        path=\"/route/report\"\n        render={(props) =>\n          hasUser ? (\n            <RouteReport\n              getEntries={getEntries}\n              locations={locations}\n              routes={routes}\n              events={events}\n              entries={entries}\n              uniqueDates={uniqueDates}\n              chosenLocation={chosenLocation}\n              chosenRoute={chosenRoute}\n              chosenEvent={chosenEvent}\n              chosenDate={chosenDate}\n              handleChosenLocationChange={handleChosenLocationChange}\n              handleChosenRouteChange={handleChosenRouteChange}\n              handleChosenEventChange={handleChosenEventChange}\n              handleChosenDateChange={handleChosenDateChange}\n              {...props}\n            />\n          ) : (\n            <Redirect to=\"/login\" />\n          )\n        }\n      />\n    </BrowserRouter>\n  );\n};\n\nexport default EventTranspoTracker;\n"]},"metadata":{},"sourceType":"module"}