{"ast":null,"code":"var _jsxFileName = \"/Users/MainTechPiece/workspace/final-capstone-react-app/src/Logs/LocationLog.js\";\nimport React, { useState, useEffect } from \"react\";\nimport EntryRow from \"./EntryRow\";\nimport Grid from \"@material-ui/core/Grid\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\n\nconst LocationLog = props => {\n  const locations = props.locations;\n  const events = props.events;\n  const chosenLocation = props.chosenLocation;\n  const chosenEvent = props.chosenEvent;\n  const handleChosenLocationChange = props.handleChosenLocationChange;\n  const handleChosenEventChange = props.handleChosenEventChange;\n  const [entries, setEntries] = useState([]);\n  const [location, setLocation] = useState([]); // get entries based on location and event chosen from dropdowns\n\n  const getEntries = (locationId, eventId) => {\n    apiManager.getEntriesByLocationAndEvent(locationId, eventId).then(r => {\n      setEntries(r);\n    });\n  };\n\n  useEffect(() => {\n    getEntries(props.chosenLocation, props.chosenEvent);\n  }, [props.chosenLocation, props.chosenEvent]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"event_header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, \"Location Logs\"), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }\n  }, \"Select Event:\"), /*#__PURE__*/React.createElement(Select, {\n    id: \"eventId\",\n    native: true,\n    onChange: handleChosenEventChange,\n    fullWidth: true,\n    required: true,\n    label: \"??\",\n    value: chosenEvent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }, events ? events.map(event => /*#__PURE__*/React.createElement(\"option\", {\n    key: event.id,\n    value: parseInt(event.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 19\n    }\n  }, event.name)) : /*#__PURE__*/React.createElement(React.Fragment, null))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, \"Select Location:\"), /*#__PURE__*/React.createElement(Select, {\n    id: \"locationId\",\n    native: true,\n    onChange: handleChosenLocationChange,\n    fullWidth: true,\n    required: true,\n    label: \"??\",\n    value: chosenLocation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }, locations ? locations.map(location => /*#__PURE__*/React.createElement(\"option\", {\n    key: location.id,\n    value: parseInt(location.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 19\n    }\n  }, location.name)) : /*#__PURE__*/React.createElement(React.Fragment, null))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"location_log_header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"list-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, locations.filter(location => location.id === chosenLocation).map(location => /*#__PURE__*/React.createElement(EntryRow, Object.assign({\n    key: location.id,\n    location: location\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  })))));\n};\n\nexport default LocationLog;","map":{"version":3,"sources":["/Users/MainTechPiece/workspace/final-capstone-react-app/src/Logs/LocationLog.js"],"names":["React","useState","useEffect","EntryRow","Grid","InputLabel","Select","LocationLog","props","locations","events","chosenLocation","chosenEvent","handleChosenLocationChange","handleChosenEventChange","entries","setEntries","location","setLocation","getEntries","locationId","eventId","apiManager","getEntriesByLocationAndEvent","then","r","map","event","id","parseInt","name","filter"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport EntryRow from \"./EntryRow\";\nimport Grid from \"@material-ui/core/Grid\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\n\nconst LocationLog = (props) => {\n  const locations = props.locations;\n  const events = props.events;\n  const chosenLocation = props.chosenLocation;\n  const chosenEvent = props.chosenEvent;\n  const handleChosenLocationChange = props.handleChosenLocationChange;\n  const handleChosenEventChange = props.handleChosenEventChange;\n  const [entries, setEntries] = useState([]);\n  const [location, setLocation] = useState([]);\n\n  // get entries based on location and event chosen from dropdowns\n  const getEntries = (locationId, eventId) => {\n    apiManager.getEntriesByLocationAndEvent(locationId, eventId).then((r) => {\n      setEntries(r);\n    });\n  };\n\n  useEffect(() => {\n    getEntries(props.chosenLocation, props.chosenEvent);\n  }, [props.chosenLocation, props.chosenEvent]);\n\n  return (\n    <>\n      <div>\n        <h1 className=\"event_header\">Location Logs</h1>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={3}>\n            <InputLabel>Select Event:</InputLabel>\n            <Select\n              id=\"eventId\"\n              native\n              onChange={handleChosenEventChange}\n              fullWidth\n              required\n              label=\"??\"\n              value={chosenEvent}\n            >\n              {events ? (\n                events.map((event) => (\n                  <option key={event.id} value={parseInt(event.id)}>\n                    {event.name}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel>Select Location:</InputLabel>\n            <Select\n              id=\"locationId\"\n              native\n              onChange={handleChosenLocationChange}\n              fullWidth\n              required\n              label=\"??\"\n              value={chosenLocation}\n            >\n              {locations ? (\n                locations.map((location) => (\n                  <option key={location.id} value={parseInt(location.id)}>\n                    {location.name}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n        </Grid>\n      </div>\n      <div className=\"location_log_header\"></div>\n      <div className=\"list-container\">\n        {locations\n          .filter((location) => location.id === chosenLocation)\n          .map((location) => (\n            <EntryRow key={location.id} location={location} {...props} />\n          ))}\n      </div>\n    </>\n  );\n};\n\nexport default LocationLog;\n"]},"metadata":{},"sourceType":"module"}