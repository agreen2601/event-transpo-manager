{"ast":null,"code":"import baseurl from \"./baseurl\"; //  get token for authentication\n// let token = window.sessionStorage.getItem(\"token\");\n// change this into a function everytime i need token, call function\n\nconst token = () => {\n  return window.sessionStorage.getItem(\"token\");\n};\n\nconsole.log(token);\nexport default {\n  getAllEntries() {\n    return fetch(`${baseurl}/entries`).then(r => r.json());\n  },\n\n  getSingleLocation(locationId) {\n    return fetch(`${baseurl}/locations/${locationId}`).then(r => r.json());\n  },\n\n  getEntriesByLocation(locationId) {\n    return fetch(`${baseurl}/entries?locationID=${locationId}`).then(r => r.json());\n  },\n\n  getEntriesByLocationAndEvent(locationId, eventID) {\n    return fetch(`${baseurl}/entries?locationID=${locationId}&eventID=${eventID}`).then(r => r.json());\n  },\n\n  getAllLocations() {\n    return fetch(`${baseurl}/locations`).then(r => r.json());\n  },\n\n  getAllEvents() {\n    return fetch(`${baseurl}/events`).then(r => r.json());\n  },\n\n  postEntry(newEntry) {\n    return fetch(`${baseurl}/entries`, {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `Token ${token}`\n      },\n      body: JSON.stringify(newEntry)\n    }).then(r => r.json());\n  },\n\n  register(userToPost) {\n    return fetch(`${baseurl}/register/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(userToPost)\n    }).then(result => result.json());\n  },\n\n  login(userToLogin) {\n    return fetch(`${baseurl}/login/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(userToLogin)\n    }).then(result => result.json());\n  }\n\n};","map":{"version":3,"sources":["/Users/MainTechPiece/workspace/final-capstone-react-app/src/api/apiManager.js"],"names":["baseurl","token","window","sessionStorage","getItem","console","log","getAllEntries","fetch","then","r","json","getSingleLocation","locationId","getEntriesByLocation","getEntriesByLocationAndEvent","eventID","getAllLocations","getAllEvents","postEntry","newEntry","method","headers","Accept","Authorization","body","JSON","stringify","register","userToPost","result","login","userToLogin"],"mappings":"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","sourcesContent":["import baseurl from \"./baseurl\";\n\n//  get token for authentication\n// let token = window.sessionStorage.getItem(\"token\");\n// change this into a function everytime i need token, call function\n\nconst token = () => {\n  return (window.sessionStorage.getItem(\"token\"))\n}\n\nconsole.log(token)\n\nexport default {\n  getAllEntries() {\n    return fetch(`${baseurl}/entries`).then((r) => r.json());\n  },\n  getSingleLocation(locationId) {\n    return fetch(`${baseurl}/locations/${locationId}`).then((r) => r.json());\n  },\n  getEntriesByLocation(locationId) {\n    return fetch(`${baseurl}/entries?locationID=${locationId}`).then((r) =>\n      r.json()\n    );\n  },\n  getEntriesByLocationAndEvent(locationId, eventID) {\n    return fetch(\n      `${baseurl}/entries?locationID=${locationId}&eventID=${eventID}`\n    ).then((r) => r.json());\n  },\n  getAllLocations() {\n    return fetch(`${baseurl}/locations`).then((r) => r.json());\n  },\n  getAllEvents() {\n    return fetch(`${baseurl}/events`).then((r) => r.json());\n  },\n  postEntry(newEntry) {\n    return fetch(`${baseurl}/entries`, {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `Token ${token}`,\n      },\n      body: JSON.stringify(newEntry),\n    }).then((r) => r.json());\n  },\n  register(userToPost) {\n    return fetch(`${baseurl}/register/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(userToPost),\n    }).then((result) => result.json());\n  },\n  login(userToLogin) {\n    return fetch(`${baseurl}/login/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(userToLogin),\n    }).then((result) => result.json());\n  },\n};\n"]},"metadata":{},"sourceType":"module"}