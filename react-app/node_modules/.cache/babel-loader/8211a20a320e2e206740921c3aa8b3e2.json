{"ast":null,"code":"var _jsxFileName = \"/Users/MainTechPiece/workspace/event-transpo-manager/react-app/src/forms/assignmentAddForm.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Select from \"@material-ui/core/Select\";\nimport apiManager from \"../api/apiManager\";\nimport moment from \"moment\";\n\nconst AssignmentAddForm = props => {\n  const chosenDate = props.chosenDate;\n  const [assignment, setAssignment] = useState({\n    start_time: moment().format(\"HH:mm\"),\n    end_time: \"23:59\",\n    driver_id: \"\",\n    vehicle_id: \"\",\n    // route_id: parseInt(props.match.params.routeId),\n    date_id: chosenDate\n  });\n  assignment.route_id = props.match.params.routeId;\n  const [dates, setDates] = useState([]);\n  const [routes, setRoutes] = useState([]);\n  const [drivers, setDrivers] = useState([]);\n  const [vehicles, setVehicles] = useState([]);\n\n  const handleAssignmentChange = event => {\n    const stateToChange = { ...assignment\n    };\n\n    if (event.target.id === \"start_time\" || event.target.id === \"end_time\") {\n      stateToChange[event.target.id] = event.target.value;\n    } else {\n      stateToChange[event.target.id] = parseInt(event.target.value);\n    }\n\n    setAssignment(stateToChange);\n  };\n\n  const getAllDropDowns = () => {\n    return apiManager.getType(\"dates\").then(r => {\n      r.sort((a, b) => a.date > b.date ? 1 : -1);\n      setDates(r);\n    }), apiManager.getType(\"routes\").then(r => {\n      r.sort((a, b) => a.name > b.name ? 1 : -1);\n      setRoutes(r);\n    }), apiManager.getType(\"drivers\").then(r => {\n      r.sort((a, b) => a.name.localeCompare(b.name));\n      setDrivers(r);\n    }), apiManager.getType(\"vehicles\").then(r => {\n      r.sort((a, b) => a.company.localeCompare(b.company)).sort((a, b) => a.number.localeCompare(b.number));\n      setVehicles(r);\n    });\n  };\n\n  useEffect(() => {\n    getAllDropDowns();\n  }, []); // get all drivers, check if driver already in system, post if not, send to route view\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    apiManager.getAssignmentsByDateDriver(assignment.date_id, assignment.driver_id).then(assignments => {\n      if (assignments.length > 0) {\n        alert(`This driver has already been assigned on this day.`);\n      } else {\n        apiManager.addType(\"assignments\", assignment).then(() => props.history.push(`/route/view`));\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Typography, {\n    component: \"h1\",\n    variant: \"h5\",\n    className: \"page-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, \"Assignment Form\"), /*#__PURE__*/React.createElement(\"form\", {\n    className: \"drop-downs\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }, \"Driver:\"), /*#__PURE__*/React.createElement(Select, {\n    id: \"driver_id\",\n    native: true,\n    onChange: handleAssignmentChange,\n    fullWidth: true,\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    \"aria-label\": \"None\",\n    value: \"\",\n    \"data-name\": \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 15\n    }\n  }, \"Choose Driver\"), drivers ? drivers.map(driver => /*#__PURE__*/React.createElement(\"option\", {\n    key: driver.id,\n    value: parseInt(driver.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 19\n    }\n  }, driver.name)) : /*#__PURE__*/React.createElement(React.Fragment, null))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }, \"Vehicle:\"), /*#__PURE__*/React.createElement(Select, {\n    id: \"vehicle_id\",\n    native: true,\n    onChange: handleAssignmentChange,\n    fullWidth: true,\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    \"aria-label\": \"None\",\n    value: \"\",\n    \"data-name\": \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 15\n    }\n  }, \"Choose Vehicle\"), vehicles ? vehicles.map(vehicle => /*#__PURE__*/React.createElement(\"option\", {\n    key: vehicle.id,\n    value: parseInt(vehicle.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 19\n    }\n  }, vehicle.company, \" \", vehicle.number)) : /*#__PURE__*/React.createElement(React.Fragment, null))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    htmlFor: \"age-native-simple\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }\n  }, \"Start Time: \"), /*#__PURE__*/React.createElement(TextField, {\n    id: \"start_time\",\n    type: \"time\",\n    fullWidth: true,\n    value: assignment.start_time,\n    onChange: handleAssignmentChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    htmlFor: \"age-native-simple\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }\n  }, \"End Time: \"), /*#__PURE__*/React.createElement(TextField, {\n    id: \"end_time\",\n    type: \"time\",\n    fullWidth: true,\n    value: assignment.end_time,\n    onChange: handleAssignmentChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"submit-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    variant: \"contained\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 11\n    }\n  }, \"Submit\"))));\n};\n\nexport default AssignmentAddForm;","map":{"version":3,"sources":["/Users/MainTechPiece/workspace/event-transpo-manager/react-app/src/forms/assignmentAddForm.js"],"names":["React","useState","useEffect","Grid","Button","TextField","InputLabel","Typography","Select","apiManager","moment","AssignmentAddForm","props","chosenDate","assignment","setAssignment","start_time","format","end_time","driver_id","vehicle_id","date_id","route_id","match","params","routeId","dates","setDates","routes","setRoutes","drivers","setDrivers","vehicles","setVehicles","handleAssignmentChange","event","stateToChange","target","id","value","parseInt","getAllDropDowns","getType","then","r","sort","a","b","date","name","localeCompare","company","number","handleSubmit","e","preventDefault","getAssignmentsByDateDriver","assignments","length","alert","addType","history","push","map","driver","vehicle"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Select from \"@material-ui/core/Select\";\nimport apiManager from \"../api/apiManager\";\nimport moment from \"moment\";\n\nconst AssignmentAddForm = (props) => {\n  const chosenDate = props.chosenDate;\n  const [assignment, setAssignment] = useState({\n    start_time: moment().format(\"HH:mm\"),\n    end_time: \"23:59\",\n    driver_id: \"\",\n    vehicle_id: \"\",\n    // route_id: parseInt(props.match.params.routeId),\n    date_id: chosenDate,\n  });\n\n  assignment.route_id = props.match.params.routeId;\n\n  const [dates, setDates] = useState([]);\n  const [routes, setRoutes] = useState([]);\n  const [drivers, setDrivers] = useState([]);\n  const [vehicles, setVehicles] = useState([]);\n\n  const handleAssignmentChange = (event) => {\n    const stateToChange = { ...assignment };\n    if (event.target.id === \"start_time\" || event.target.id === \"end_time\") {\n      stateToChange[event.target.id] = event.target.value;\n    } else {\n      stateToChange[event.target.id] = parseInt(event.target.value);\n    }\n    setAssignment(stateToChange);\n  };\n\n  const getAllDropDowns = () => {\n    return (\n      apiManager.getType(\"dates\").then((r) => {\n        r.sort((a, b) => (a.date > b.date ? 1 : -1));\n        setDates(r);\n      }),\n      apiManager.getType(\"routes\").then((r) => {\n        r.sort((a, b) => (a.name > b.name ? 1 : -1));\n        setRoutes(r);\n      }),\n      apiManager.getType(\"drivers\").then((r) => {\n        r.sort((a, b) => a.name.localeCompare(b.name));\n        setDrivers(r);\n      }),\n      apiManager.getType(\"vehicles\").then((r) => {\n        r.sort((a, b) => a.company.localeCompare(b.company)).sort((a, b) =>\n          a.number.localeCompare(b.number)\n        );\n        setVehicles(r);\n      })\n    );\n  };\n\n  useEffect(() => {\n    getAllDropDowns();\n  }, []);\n\n  // get all drivers, check if driver already in system, post if not, send to route view\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    apiManager\n      .getAssignmentsByDateDriver(assignment.date_id, assignment.driver_id)\n      .then((assignments) => {\n        if (assignments.length > 0) {\n          alert(`This driver has already been assigned on this day.`);\n        } else {\n          apiManager\n            .addType(\"assignments\", assignment)\n            .then(() => props.history.push(`/route/view`));\n        }\n      });\n  };\n\n  return (\n    <>\n      <Typography component=\"h1\" variant=\"h5\" className=\"page-header\">\n        Assignment Form\n      </Typography>\n      <form className=\"drop-downs\" onSubmit={handleSubmit}>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={3}>\n            <InputLabel>Driver:</InputLabel>\n            <Select\n              id=\"driver_id\"\n              native\n              onChange={handleAssignmentChange}\n              fullWidth\n              required\n            >\n              <option aria-label=\"None\" value=\"\" data-name=\"\">\n                Choose Driver\n              </option>\n              {drivers ? (\n                drivers.map((driver) => (\n                  <option key={driver.id} value={parseInt(driver.id)}>\n                    {driver.name}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel>Vehicle:</InputLabel>\n            <Select\n              id=\"vehicle_id\"\n              native\n              onChange={handleAssignmentChange}\n              fullWidth\n              required\n            >\n              <option aria-label=\"None\" value=\"\" data-name=\"\">\n                Choose Vehicle\n              </option>\n              {vehicles ? (\n                vehicles.map((vehicle) => (\n                  <option key={vehicle.id} value={parseInt(vehicle.id)}>\n                    {vehicle.company} {vehicle.number}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n          {/* <Grid item xs={12} md={3}>\n            <InputLabel>Route:</InputLabel>\n            <Select\n              id=\"route_id\"\n              native\n              onChange={handleAssignmentChange}\n              fullWidth\n              required\n              value={props.match.params.routeId}\n            >\n              <option aria-label=\"None\" value=\"\" data-name=\"\">\n                Choose Route\n              </option>\n              {routes ? (\n                routes.map((route) => (\n                  <option key={route.id} value={parseInt(route.id)}>\n                    {route.name} {route.description}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel>Date:</InputLabel>\n            <Select\n              id=\"date_id\"\n              native\n              onChange={handleAssignmentChange}\n              fullWidth\n              required\n              value={chosenDate}\n            >\n              <option aria-label=\"None\" value=\"\" data-name=\"\">\n                Choose Date\n              </option>\n              {dates ? (\n                dates.map((date) => (\n                  <option key={date.id} value={parseInt(date.id)}>\n                    {date.date}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid> */}\n          <Grid item xs={12} md={3}>\n            <InputLabel htmlFor=\"age-native-simple\">Start Time: </InputLabel>\n            <TextField\n              id=\"start_time\"\n              type=\"time\"\n              fullWidth\n              value={assignment.start_time}\n              onChange={handleAssignmentChange}\n            />\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel htmlFor=\"age-native-simple\">End Time: </InputLabel>\n            <TextField\n              id=\"end_time\"\n              type=\"time\"\n              fullWidth\n              value={assignment.end_time}\n              onChange={handleAssignmentChange}\n            />\n          </Grid>\n        </Grid>\n        <div className=\"submit-button\">\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n            Submit\n          </Button>\n        </div>\n      </form>\n    </>\n  );\n};\n\nexport default AssignmentAddForm;\n"]},"metadata":{},"sourceType":"module"}