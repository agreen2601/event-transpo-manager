{"ast":null,"code":"var _jsxFileName = \"/Users/MainTechPiece/workspace/event-transpo-manager/react-app/src/eventTranspoTracker.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { BrowserRouter, Route, Redirect } from \"react-router-dom\";\nimport EntryForm from \"./forms/entryForm\";\nimport EntryEditForm from \"./forms/entryEditForm\";\nimport apiManager from \"./api/apiManager\"; // import RouteReport from \"./reports/routeReport\";\n// import Log from \"./reports/log\";\n\nconst EventTranspoTracker = props => {\n  const hasUser = props.hasUser; // // places routes and shuttles fill the dropdown menus\n  // // places filter based on chosenRoute\n  // // chosenPlace chosenRoute and chosenShuttle are the choices made from the dropdowns\n  // const [places, setPlaces] = useState([]);\n  // const [routes, setRoutes] = useState([]);\n  // const [shuttles, setShuttles] = useState([]);\n  // const [entries, setEntries] = useState([]);\n  // const [chosenPlaceId, setChosenPlaceId] = useState(\"\");\n  // const [chosenPlaceName, setChosenPlaceName] = useState(\"\");\n  // const [chosenRoute, setChosenRoute] = useState(\"\");\n  // const [chosenShuttleId, setChosenShuttleId] = useState(\"\");\n  // const [chosenShuttleName, setChosenShuttleName] = useState(\"\");\n  // const [chosenDate, setChosenDate] = useState(\"\");\n  // // get and sort in alpha order all places for the dropdown menus\n  // const getPlaces = () => {\n  //   apiManager.getAllType(\"places\").then((r) => {\n  //     r.sort((a, b) => a.name.localeCompare(b.name));\n  //     setPlaces(r);\n  //   });\n  // };\n  // // set chosePlace based on choice from dropdown menu\n  // const handleChosenPlaceChange = (e) => {\n  //   setChosenPlaceId(e.target.value);\n  //   setChosenPlaceName(e.target.options[e.target.selectedIndex].dataset.name);\n  //   if (e.target.value !== \"\") {\n  //     // apiManager.getSingleType(\"places\", placeId).then((r) => {\n  //     //   apiManager.getSingleType(\"routes\", r.route_id).then((re) => {\n  //     //     // setRoutes([re]);\n  //     //     // setChosenRoute(re.name)\n  //     //   });\n  //     // });\n  //   } else {\n  //     getRoutes();\n  //   }\n  // };\n  // // // get and sort in alpha order all routes for the dropdown menus and pass them to the form log and graph\n  // const getRoutes = () => {\n  //   apiManager.getAllType(\"routes\").then((r) => {\n  //     r.sort((a, b) => a.name.localeCompare(b.name));\n  //     setRoutes(r);\n  //   });\n  // };\n  // // // set choseroute based on choice from dropdown menu on form log and graph\n  // const handleChosenRouteChange = (e) => {\n  //   const routeId = e.target.value;\n  //   setChosenRoute(routeId);\n  //   setChosenPlaceId(\"\");\n  //   setChosenPlaceName(\"\");\n  //   apiManager.getAllType(\"places\").then((r) => {\n  //     if (routeId !== \"\") {\n  //       setPlaces(\n  //         r\n  //           .filter((each) => each.route.name === routeId)\n  //           .sort((a, b) => a.name.localeCompare(b.name))\n  //       );\n  //     } else {\n  //       setPlaces(r.sort((a, b) => a.name.localeCompare(b.name)));\n  //     }\n  //   });\n  // };\n  // // get and sort in alpha order all shuttles for the dropdown menus\n  // const getShuttles = () => {\n  //   apiManager.getAllType(\"shuttles\").then((r) => {\n  //     r.sort((a, b) => a.name.localeCompare(b.name));\n  //     setShuttles(r);\n  //   });\n  // };\n  // // set chosenShuttleId based on choice from dropdown menu\n  // const handleChosenShuttleChange = (e) => {\n  //   setChosenShuttleId(e.target.value);\n  //   setChosenShuttleName(e.target.options[e.target.selectedIndex].dataset.name);\n  // };\n  // // get all entries then find unique dates for the dropdown menus\n  // const getEntries = () => {\n  //   apiManager.getAllType(\"entries\").then((r) => {\n  //     r.sort((a, b) => a.date.localeCompare(b.date));\n  //     setEntries(r);\n  //   });\n  // };\n  // const uniqueDates = [...new Set(entries.map((entry) => entry.date))];\n  // // set chosenDate based on choice from dropdown menu\n  // const handleChosenDateChange = (e) => {\n  //   const dateId = e.target.value;\n  //   setChosenDate(dateId);\n  // };\n  // useEffect(() => {\n  //   getShuttles();\n  //   getEntries();\n  //   getPlaces();\n  //   getRoutes();\n  // }, []);\n\n  return /*#__PURE__*/React.createElement(BrowserRouter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }, \"tracker\"), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/entry/form\",\n    render: props => hasUser ? /*#__PURE__*/React.createElement(EntryForm, Object.assign({\n      places: places,\n      routes: routes,\n      shuttles: shuttles,\n      chosenPlaceId: chosenPlaceId,\n      chosenRoute: chosenRoute,\n      chosenShuttleId: chosenShuttleId,\n      chosenDate: chosenDate,\n      handleChosenPlaceChange: handleChosenPlaceChange,\n      handleChosenRouteChange: handleChosenRouteChange,\n      handleChosenShuttleChange: handleChosenShuttleChange,\n      handleChosenDateChange: handleChosenDateChange\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }\n    })) : /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 13\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/entry/edit/form/:entryId(\\\\d+)\",\n    render: props =>\n    /*#__PURE__*/\n    // hasUser ? (\n    React.createElement(EntryEditForm, Object.assign({\n      places: places,\n      routes: routes,\n      shuttles: shuttles,\n      chosenPlaceId: chosenPlaceId,\n      chosenRoute: chosenRoute,\n      chosenShuttleId: chosenShuttleId,\n      chosenDate: chosenDate,\n      handleChosenPlaceChange: handleChosenPlaceChange,\n      handleChosenRouteChange: handleChosenRouteChange,\n      handleChosenShuttleChange: handleChosenShuttleChange,\n      handleChosenDateChange: handleChosenDateChange\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 13\n      }\n    })) // ) : (\n    //   <Redirect to=\"/login\" />\n    // )\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/log\",\n    render: props =>\n    /*#__PURE__*/\n    // hasUser ? (\n    React.createElement(Log, Object.assign({\n      getEntries: getEntries,\n      places: places,\n      routes: routes,\n      shuttles: shuttles,\n      entries: entries,\n      uniqueDates: uniqueDates,\n      chosenPlaceId: chosenPlaceId,\n      chosenPlaceName: chosenPlaceName,\n      chosenRoute: chosenRoute,\n      chosenShuttleId: chosenShuttleId,\n      chosenShuttleName: chosenShuttleName,\n      chosenDate: chosenDate,\n      handleChosenPlaceChange: handleChosenPlaceChange,\n      handleChosenRouteChange: handleChosenRouteChange,\n      handleChosenShuttleChange: handleChosenShuttleChange,\n      handleChosenDateChange: handleChosenDateChange\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 13\n      }\n    })) // ) : (\n    //   <Redirect to=\"/login\" />\n    // )\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/graph\",\n    render: props => hasUser ? /*#__PURE__*/React.createElement(RouteReport, Object.assign({\n      getEntries: getEntries,\n      places: places,\n      routes: routes,\n      shuttles: shuttles,\n      entries: entries,\n      uniqueDates: uniqueDates,\n      chosenPlaceId: chosenPlaceId,\n      chosenPlaceName: chosenPlaceName,\n      chosenRoute: chosenRoute,\n      chosenShuttleId: chosenShuttleId,\n      chosenShuttleName: chosenShuttleName,\n      chosenDate: chosenDate,\n      handleChosenPlaceChange: handleChosenPlaceChange,\n      handleChosenRouteChange: handleChosenRouteChange,\n      handleChosenShuttleChange: handleChosenShuttleChange,\n      handleChosenDateChange: handleChosenDateChange\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 13\n      }\n    })) : /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 13\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default EventTranspoTracker;","map":{"version":3,"sources":["/Users/MainTechPiece/workspace/event-transpo-manager/react-app/src/eventTranspoTracker.js"],"names":["React","useState","useEffect","BrowserRouter","Route","Redirect","EntryForm","EntryEditForm","apiManager","EventTranspoTracker","props","hasUser","places","routes","shuttles","chosenPlaceId","chosenRoute","chosenShuttleId","chosenDate","handleChosenPlaceChange","handleChosenRouteChange","handleChosenShuttleChange","handleChosenDateChange","getEntries","entries","uniqueDates","chosenPlaceName","chosenShuttleName"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,aAAT,EAAwBC,KAAxB,EAA+BC,QAA/B,QAA+C,kBAA/C;AACA,OAAOC,SAAP,MAAsB,mBAAtB;AACA,OAAOC,aAAP,MAA0B,uBAA1B;AACA,OAAOC,UAAP,MAAuB,kBAAvB,C,CACA;AACA;;AAEA,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;AACrC,QAAMC,OAAO,GAAGD,KAAK,CAACC,OAAtB,CADqC,CAGrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,eAGE,oBAAC,KAAD;AACE,IAAA,KAAK,MADP;AAEE,IAAA,IAAI,EAAC,aAFP;AAGE,IAAA,MAAM,EAAGD,KAAD,IACNC,OAAO,gBACL,oBAAC,SAAD;AACE,MAAA,MAAM,EAAEC,MADV;AAEE,MAAA,MAAM,EAAEC,MAFV;AAGE,MAAA,QAAQ,EAAEC,QAHZ;AAIE,MAAA,aAAa,EAAEC,aAJjB;AAKE,MAAA,WAAW,EAAEC,WALf;AAME,MAAA,eAAe,EAAEC,eANnB;AAOE,MAAA,UAAU,EAAEC,UAPd;AAQE,MAAA,uBAAuB,EAAEC,uBAR3B;AASE,MAAA,uBAAuB,EAAEC,uBAT3B;AAUE,MAAA,yBAAyB,EAAEC,yBAV7B;AAWE,MAAA,sBAAsB,EAAEC;AAX1B,OAYMZ,KAZN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADK,gBAgBL,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApBN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,eA2BE,oBAAC,KAAD;AACE,IAAA,KAAK,MADP;AAEE,IAAA,IAAI,EAAC,iCAFP;AAGE,IAAA,MAAM,EAAGA,KAAD;AAAA;AACN;AACE,wBAAC,aAAD;AACE,MAAA,MAAM,EAAEE,MADV;AAEE,MAAA,MAAM,EAAEC,MAFV;AAGE,MAAA,QAAQ,EAAEC,QAHZ;AAIE,MAAA,aAAa,EAAEC,aAJjB;AAKE,MAAA,WAAW,EAAEC,WALf;AAME,MAAA,eAAe,EAAEC,eANnB;AAOE,MAAA,UAAU,EAAEC,UAPd;AAQE,MAAA,uBAAuB,EAAEC,uBAR3B;AASE,MAAA,uBAAuB,EAAEC,uBAT3B;AAUE,MAAA,yBAAyB,EAAEC,yBAV7B;AAWE,MAAA,sBAAsB,EAAEC;AAX1B,OAYMZ,KAZN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAFE,CAgBJ;AACA;AACA;AArBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA3BF,eAmDE,oBAAC,KAAD;AACE,IAAA,KAAK,MADP;AAEE,IAAA,IAAI,EAAC,MAFP;AAGE,IAAA,MAAM,EAAGA,KAAD;AAAA;AACN;AACE,wBAAC,GAAD;AACE,MAAA,UAAU,EAAEa,UADd;AAEE,MAAA,MAAM,EAAEX,MAFV;AAGE,MAAA,MAAM,EAAEC,MAHV;AAIE,MAAA,QAAQ,EAAEC,QAJZ;AAKE,MAAA,OAAO,EAAEU,OALX;AAME,MAAA,WAAW,EAAEC,WANf;AAOE,MAAA,aAAa,EAAEV,aAPjB;AAQE,MAAA,eAAe,EAAEW,eARnB;AASE,MAAA,WAAW,EAAEV,WATf;AAUE,MAAA,eAAe,EAAEC,eAVnB;AAWE,MAAA,iBAAiB,EAAEU,iBAXrB;AAYE,MAAA,UAAU,EAAET,UAZd;AAaE,MAAA,uBAAuB,EAAEC,uBAb3B;AAcE,MAAA,uBAAuB,EAAEC,uBAd3B;AAeE,MAAA,yBAAyB,EAAEC,yBAf7B;AAgBE,MAAA,sBAAsB,EAAEC;AAhB1B,OAiBMZ,KAjBN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAFE,CAqBJ;AACA;AACA;AA1BJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAnDF,eAgFE,oBAAC,KAAD;AACE,IAAA,KAAK,MADP;AAEE,IAAA,IAAI,EAAC,QAFP;AAGE,IAAA,MAAM,EAAGA,KAAD,IACNC,OAAO,gBACL,oBAAC,WAAD;AACE,MAAA,UAAU,EAAEY,UADd;AAEE,MAAA,MAAM,EAAEX,MAFV;AAGE,MAAA,MAAM,EAAEC,MAHV;AAIE,MAAA,QAAQ,EAAEC,QAJZ;AAKE,MAAA,OAAO,EAAEU,OALX;AAME,MAAA,WAAW,EAAEC,WANf;AAOE,MAAA,aAAa,EAAEV,aAPjB;AAQE,MAAA,eAAe,EAAEW,eARnB;AASE,MAAA,WAAW,EAAEV,WATf;AAUE,MAAA,eAAe,EAAEC,eAVnB;AAWE,MAAA,iBAAiB,EAAEU,iBAXrB;AAYE,MAAA,UAAU,EAAET,UAZd;AAaE,MAAA,uBAAuB,EAAEC,uBAb3B;AAcE,MAAA,uBAAuB,EAAEC,uBAd3B;AAeE,MAAA,yBAAyB,EAAEC,yBAf7B;AAgBE,MAAA,sBAAsB,EAAEC;AAhB1B,OAiBMZ,KAjBN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADK,gBAqBL,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAzBN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhFF,CADF;AAgHD,CAxND;;AA0NA,eAAeD,mBAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter, Route, Redirect } from \"react-router-dom\";\nimport EntryForm from \"./forms/entryForm\";\nimport EntryEditForm from \"./forms/entryEditForm\";\nimport apiManager from \"./api/apiManager\";\n// import RouteReport from \"./reports/routeReport\";\n// import Log from \"./reports/log\";\n\nconst EventTranspoTracker = (props) => {\n  const hasUser = props.hasUser;\n\n  // // places routes and shuttles fill the dropdown menus\n  // // places filter based on chosenRoute\n  // // chosenPlace chosenRoute and chosenShuttle are the choices made from the dropdowns\n  // const [places, setPlaces] = useState([]);\n  // const [routes, setRoutes] = useState([]);\n  // const [shuttles, setShuttles] = useState([]);\n  // const [entries, setEntries] = useState([]);\n  // const [chosenPlaceId, setChosenPlaceId] = useState(\"\");\n  // const [chosenPlaceName, setChosenPlaceName] = useState(\"\");\n  // const [chosenRoute, setChosenRoute] = useState(\"\");\n  // const [chosenShuttleId, setChosenShuttleId] = useState(\"\");\n  // const [chosenShuttleName, setChosenShuttleName] = useState(\"\");\n  // const [chosenDate, setChosenDate] = useState(\"\");\n\n  // // get and sort in alpha order all places for the dropdown menus\n  // const getPlaces = () => {\n  //   apiManager.getAllType(\"places\").then((r) => {\n  //     r.sort((a, b) => a.name.localeCompare(b.name));\n  //     setPlaces(r);\n  //   });\n  // };\n\n  // // set chosePlace based on choice from dropdown menu\n  // const handleChosenPlaceChange = (e) => {\n  //   setChosenPlaceId(e.target.value);\n  //   setChosenPlaceName(e.target.options[e.target.selectedIndex].dataset.name);\n  //   if (e.target.value !== \"\") {\n  //     // apiManager.getSingleType(\"places\", placeId).then((r) => {\n  //     //   apiManager.getSingleType(\"routes\", r.route_id).then((re) => {\n  //     //     // setRoutes([re]);\n  //     //     // setChosenRoute(re.name)\n  //     //   });\n  //     // });\n  //   } else {\n  //     getRoutes();\n  //   }\n  // };\n\n  // // // get and sort in alpha order all routes for the dropdown menus and pass them to the form log and graph\n  // const getRoutes = () => {\n  //   apiManager.getAllType(\"routes\").then((r) => {\n  //     r.sort((a, b) => a.name.localeCompare(b.name));\n  //     setRoutes(r);\n  //   });\n  // };\n\n  // // // set choseroute based on choice from dropdown menu on form log and graph\n  // const handleChosenRouteChange = (e) => {\n  //   const routeId = e.target.value;\n  //   setChosenRoute(routeId);\n  //   setChosenPlaceId(\"\");\n  //   setChosenPlaceName(\"\");\n  //   apiManager.getAllType(\"places\").then((r) => {\n  //     if (routeId !== \"\") {\n  //       setPlaces(\n  //         r\n  //           .filter((each) => each.route.name === routeId)\n  //           .sort((a, b) => a.name.localeCompare(b.name))\n  //       );\n  //     } else {\n  //       setPlaces(r.sort((a, b) => a.name.localeCompare(b.name)));\n  //     }\n  //   });\n  // };\n\n  // // get and sort in alpha order all shuttles for the dropdown menus\n  // const getShuttles = () => {\n  //   apiManager.getAllType(\"shuttles\").then((r) => {\n  //     r.sort((a, b) => a.name.localeCompare(b.name));\n  //     setShuttles(r);\n  //   });\n  // };\n\n  // // set chosenShuttleId based on choice from dropdown menu\n  // const handleChosenShuttleChange = (e) => {\n  //   setChosenShuttleId(e.target.value);\n  //   setChosenShuttleName(e.target.options[e.target.selectedIndex].dataset.name);\n  // };\n\n  // // get all entries then find unique dates for the dropdown menus\n  // const getEntries = () => {\n  //   apiManager.getAllType(\"entries\").then((r) => {\n  //     r.sort((a, b) => a.date.localeCompare(b.date));\n  //     setEntries(r);\n  //   });\n  // };\n  // const uniqueDates = [...new Set(entries.map((entry) => entry.date))];\n\n  // // set chosenDate based on choice from dropdown menu\n  // const handleChosenDateChange = (e) => {\n  //   const dateId = e.target.value;\n  //   setChosenDate(dateId);\n  // };\n\n  // useEffect(() => {\n  //   getShuttles();\n  //   getEntries();\n  //   getPlaces();\n  //   getRoutes();\n  // }, []);\n\n  return (\n    <BrowserRouter>\n      <div>tracker</div>\n      {/* <Route exact path=\"/\" render={() => <Redirect to=\"/entry/form\" />} /> */}\n      <Route\n        exact\n        path=\"/entry/form\"\n        render={(props) =>\n          hasUser ? (\n            <EntryForm\n              places={places}\n              routes={routes}\n              shuttles={shuttles}\n              chosenPlaceId={chosenPlaceId}\n              chosenRoute={chosenRoute}\n              chosenShuttleId={chosenShuttleId}\n              chosenDate={chosenDate}\n              handleChosenPlaceChange={handleChosenPlaceChange}\n              handleChosenRouteChange={handleChosenRouteChange}\n              handleChosenShuttleChange={handleChosenShuttleChange}\n              handleChosenDateChange={handleChosenDateChange}\n              {...props}\n            />\n          ) : (\n            <Redirect to=\"/login\" />\n          )\n        }\n      />\n      <Route\n        exact\n        path=\"/entry/edit/form/:entryId(\\d+)\"\n        render={(props) =>\n          // hasUser ? (\n            <EntryEditForm\n              places={places}\n              routes={routes}\n              shuttles={shuttles}\n              chosenPlaceId={chosenPlaceId}\n              chosenRoute={chosenRoute}\n              chosenShuttleId={chosenShuttleId}\n              chosenDate={chosenDate}\n              handleChosenPlaceChange={handleChosenPlaceChange}\n              handleChosenRouteChange={handleChosenRouteChange}\n              handleChosenShuttleChange={handleChosenShuttleChange}\n              handleChosenDateChange={handleChosenDateChange}\n              {...props}\n            />\n          // ) : (\n          //   <Redirect to=\"/login\" />\n          // )\n        }\n      />\n      <Route\n        exact\n        path=\"/log\"\n        render={(props) =>\n          // hasUser ? (\n            <Log\n              getEntries={getEntries}\n              places={places}\n              routes={routes}\n              shuttles={shuttles}\n              entries={entries}\n              uniqueDates={uniqueDates}\n              chosenPlaceId={chosenPlaceId}\n              chosenPlaceName={chosenPlaceName}\n              chosenRoute={chosenRoute}\n              chosenShuttleId={chosenShuttleId}\n              chosenShuttleName={chosenShuttleName}\n              chosenDate={chosenDate}\n              handleChosenPlaceChange={handleChosenPlaceChange}\n              handleChosenRouteChange={handleChosenRouteChange}\n              handleChosenShuttleChange={handleChosenShuttleChange}\n              handleChosenDateChange={handleChosenDateChange}\n              {...props}\n            />\n          // ) : (\n          //   <Redirect to=\"/login\" />\n          // )\n        }\n      />\n      <Route\n        exact\n        path=\"/graph\"\n        render={(props) =>\n          hasUser ? (\n            <RouteReport\n              getEntries={getEntries}\n              places={places}\n              routes={routes}\n              shuttles={shuttles}\n              entries={entries}\n              uniqueDates={uniqueDates}\n              chosenPlaceId={chosenPlaceId}\n              chosenPlaceName={chosenPlaceName}\n              chosenRoute={chosenRoute}\n              chosenShuttleId={chosenShuttleId}\n              chosenShuttleName={chosenShuttleName}\n              chosenDate={chosenDate}\n              handleChosenPlaceChange={handleChosenPlaceChange}\n              handleChosenRouteChange={handleChosenRouteChange}\n              handleChosenShuttleChange={handleChosenShuttleChange}\n              handleChosenDateChange={handleChosenDateChange}\n              {...props}\n            />\n          ) : (\n            <Redirect to=\"/login\" />\n          )\n        }\n      />\n    </BrowserRouter>\n  );\n};\n\nexport default EventTranspoTracker;\n"]},"metadata":{},"sourceType":"module"}