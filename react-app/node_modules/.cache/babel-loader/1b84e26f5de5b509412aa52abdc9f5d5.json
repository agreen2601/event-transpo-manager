{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import { BrowserRouter, Route, Redirect } from \"react-router-dom\";\n// import EntryForm from \"./forms/entryForm\";\n// import EntryEditForm from \"./forms/entryEditForm\";\n// import apiManager from \"./api/apiManager\";\n// import RouteReport from \"./reports/routeReport\";\n// import Log from \"./reports/log\";\n// const EventTranspoTracker = (props) => {\n//   const hasUser = props.hasUser;\n//   // places routes and shuttles fill the dropdown menus\n//   // places filter based on chosenRoute\n//   // chosenPlace chosenRoute and chosenShuttle are the choices made from the dropdowns\n//   const [places, setPlaces] = useState([]);\n//   const [routes, setRoutes] = useState([]);\n//   const [shuttles, setShuttles] = useState([]);\n//   const [entries, setEntries] = useState([]);\n//   const [chosenPlaceId, setChosenPlaceId] = useState(\"\");\n//   const [chosenPlaceName, setChosenPlaceName] = useState(\"\");\n//   const [chosenRoute, setChosenRoute] = useState(\"\");\n//   const [chosenShuttleId, setChosenShuttleId] = useState(\"\");\n//   const [chosenShuttleName, setChosenShuttleName] = useState(\"\");\n//   const [chosenDate, setChosenDate] = useState(\"\");\n//   // get and sort in alpha order all places for the dropdown menus\n//   const getPlaces = () => {\n//     apiManager.getAllType(\"places\").then((r) => {\n//       r.sort((a, b) => a.name.localeCompare(b.name));\n//       setPlaces(r);\n//     });\n//   };\n//   // set chosePlace based on choice from dropdown menu\n//   const handleChosenPlaceChange = (e) => {\n//     setChosenPlaceId(e.target.value);\n//     setChosenPlaceName(e.target.options[e.target.selectedIndex].dataset.name);\n//     if (e.target.value !== \"\") {\n//       // apiManager.getSingleType(\"places\", placeId).then((r) => {\n//       //   apiManager.getSingleType(\"routes\", r.route_id).then((re) => {\n//       //     // setRoutes([re]);\n//       //     // setChosenRoute(re.name)\n//       //   });\n//       // });\n//     } else {\n//       getRoutes();\n//     }\n//   };\n//   // // get and sort in alpha order all routes for the dropdown menus and pass them to the form log and graph\n//   const getRoutes = () => {\n//     apiManager.getAllType(\"routes\").then((r) => {\n//       r.sort((a, b) => a.name.localeCompare(b.name));\n//       setRoutes(r);\n//     });\n//   };\n//   // // set choseroute based on choice from dropdown menu on form log and graph\n//   const handleChosenRouteChange = (e) => {\n//     const routeId = e.target.value;\n//     setChosenRoute(routeId);\n//     setChosenPlaceId(\"\");\n//     setChosenPlaceName(\"\");\n//     apiManager.getAllType(\"places\").then((r) => {\n//       if (routeId !== \"\") {\n//         setPlaces(\n//           r\n//             .filter((each) => each.route.name === routeId)\n//             .sort((a, b) => a.name.localeCompare(b.name))\n//         );\n//       } else {\n//         setPlaces(r.sort((a, b) => a.name.localeCompare(b.name)));\n//       }\n//     });\n//   };\n//   // get and sort in alpha order all shuttles for the dropdown menus\n//   const getShuttles = () => {\n//     apiManager.getAllType(\"shuttles\").then((r) => {\n//       r.sort((a, b) => a.name.localeCompare(b.name));\n//       setShuttles(r);\n//     });\n//   };\n//   // set chosenShuttleId based on choice from dropdown menu\n//   const handleChosenShuttleChange = (e) => {\n//     setChosenShuttleId(e.target.value);\n//     setChosenShuttleName(e.target.options[e.target.selectedIndex].dataset.name);\n//   };\n//   // get all entries then find unique dates for the dropdown menus\n//   const getEntries = () => {\n//     apiManager.getAllType(\"entries\").then((r) => {\n//       r.sort((a, b) => a.date.localeCompare(b.date));\n//       setEntries(r);\n//     });\n//   };\n//   const uniqueDates = [...new Set(entries.map((entry) => entry.date))];\n//   // set chosenDate based on choice from dropdown menu\n//   const handleChosenDateChange = (e) => {\n//     const dateId = e.target.value;\n//     setChosenDate(dateId);\n//   };\n//   useEffect(() => {\n//     getShuttles();\n//     getEntries();\n//     getPlaces();\n//     getRoutes();\n//   }, []);\n//   return (\n//     <BrowserRouter>\n//       <div>tracker</div>\n//       {/* <Route exact path=\"/\" render={() => <Redirect to=\"/entry/form\" />} />\n//       <Route\n//         exact\n//         path=\"/entry/form\"\n//         render={(props) =>\n//           hasUser ? (\n//             <EntryForm\n//               places={places}\n//               routes={routes}\n//               shuttles={shuttles}\n//               chosenPlaceId={chosenPlaceId}\n//               chosenRoute={chosenRoute}\n//               chosenShuttleId={chosenShuttleId}\n//               chosenDate={chosenDate}\n//               handleChosenPlaceChange={handleChosenPlaceChange}\n//               handleChosenRouteChange={handleChosenRouteChange}\n//               handleChosenShuttleChange={handleChosenShuttleChange}\n//               handleChosenDateChange={handleChosenDateChange}\n//               {...props}\n//             />\n//           ) : (\n//             <Redirect to=\"/login\" />\n//           )\n//         }\n//       />\n//       <Route\n//         exact\n//         path=\"/entry/edit/form/:entryId(\\d+)\"\n//         render={(props) =>\n//           // hasUser ? (\n//             <EntryEditForm\n//               places={places}\n//               routes={routes}\n//               shuttles={shuttles}\n//               chosenPlaceId={chosenPlaceId}\n//               chosenRoute={chosenRoute}\n//               chosenShuttleId={chosenShuttleId}\n//               chosenDate={chosenDate}\n//               handleChosenPlaceChange={handleChosenPlaceChange}\n//               handleChosenRouteChange={handleChosenRouteChange}\n//               handleChosenShuttleChange={handleChosenShuttleChange}\n//               handleChosenDateChange={handleChosenDateChange}\n//               {...props}\n//             />\n//           // ) : (\n//           //   <Redirect to=\"/login\" />\n//           // )\n//         }\n//       />\n//       <Route\n//         exact\n//         path=\"/log\"\n//         render={(props) =>\n//           // hasUser ? (\n//             <Log\n//               getEntries={getEntries}\n//               places={places}\n//               routes={routes}\n//               shuttles={shuttles}\n//               entries={entries}\n//               uniqueDates={uniqueDates}\n//               chosenPlaceId={chosenPlaceId}\n//               chosenPlaceName={chosenPlaceName}\n//               chosenRoute={chosenRoute}\n//               chosenShuttleId={chosenShuttleId}\n//               chosenShuttleName={chosenShuttleName}\n//               chosenDate={chosenDate}\n//               handleChosenPlaceChange={handleChosenPlaceChange}\n//               handleChosenRouteChange={handleChosenRouteChange}\n//               handleChosenShuttleChange={handleChosenShuttleChange}\n//               handleChosenDateChange={handleChosenDateChange}\n//               {...props}\n//             />\n//           // ) : (\n//           //   <Redirect to=\"/login\" />\n//           // )\n//         }\n//       />\n//       <Route\n//         exact\n//         path=\"/graph\"\n//         render={(props) =>\n//           hasUser ? (\n//             <RouteReport\n//               getEntries={getEntries}\n//               places={places}\n//               routes={routes}\n//               shuttles={shuttles}\n//               entries={entries}\n//               uniqueDates={uniqueDates}\n//               chosenPlaceId={chosenPlaceId}\n//               chosenPlaceName={chosenPlaceName}\n//               chosenRoute={chosenRoute}\n//               chosenShuttleId={chosenShuttleId}\n//               chosenShuttleName={chosenShuttleName}\n//               chosenDate={chosenDate}\n//               handleChosenPlaceChange={handleChosenPlaceChange}\n//               handleChosenRouteChange={handleChosenRouteChange}\n//               handleChosenShuttleChange={handleChosenShuttleChange}\n//               handleChosenDateChange={handleChosenDateChange}\n//               {...props}\n//             />\n//           ) : (\n//             <Redirect to=\"/login\" />\n//           )\n//         }\n//       /> */}\n//     </BrowserRouter>\n//   );\n// };\n// export default EventTranspoTracker;","map":{"version":3,"sources":["/Users/MainTechPiece/workspace/event-transpo-manager/react-app/src/eventTranspoTracker.js"],"names":[],"mappingssourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import { BrowserRouter, Route, Redirect } from \"react-router-dom\";\n// import EntryForm from \"./forms/entryForm\";\n// import EntryEditForm from \"./forms/entryEditForm\";\n// import apiManager from \"./api/apiManager\";\n// import RouteReport from \"./reports/routeReport\";\n// import Log from \"./reports/log\";\n\n// const EventTranspoTracker = (props) => {\n//   const hasUser = props.hasUser;\n\n//   // places routes and shuttles fill the dropdown menus\n//   // places filter based on chosenRoute\n//   // chosenPlace chosenRoute and chosenShuttle are the choices made from the dropdowns\n//   const [places, setPlaces] = useState([]);\n//   const [routes, setRoutes] = useState([]);\n//   const [shuttles, setShuttles] = useState([]);\n//   const [entries, setEntries] = useState([]);\n//   const [chosenPlaceId, setChosenPlaceId] = useState(\"\");\n//   const [chosenPlaceName, setChosenPlaceName] = useState(\"\");\n//   const [chosenRoute, setChosenRoute] = useState(\"\");\n//   const [chosenShuttleId, setChosenShuttleId] = useState(\"\");\n//   const [chosenShuttleName, setChosenShuttleName] = useState(\"\");\n//   const [chosenDate, setChosenDate] = useState(\"\");\n\n//   // get and sort in alpha order all places for the dropdown menus\n//   const getPlaces = () => {\n//     apiManager.getAllType(\"places\").then((r) => {\n//       r.sort((a, b) => a.name.localeCompare(b.name));\n//       setPlaces(r);\n//     });\n//   };\n\n//   // set chosePlace based on choice from dropdown menu\n//   const handleChosenPlaceChange = (e) => {\n//     setChosenPlaceId(e.target.value);\n//     setChosenPlaceName(e.target.options[e.target.selectedIndex].dataset.name);\n//     if (e.target.value !== \"\") {\n//       // apiManager.getSingleType(\"places\", placeId).then((r) => {\n//       //   apiManager.getSingleType(\"routes\", r.route_id).then((re) => {\n//       //     // setRoutes([re]);\n//       //     // setChosenRoute(re.name)\n//       //   });\n//       // });\n//     } else {\n//       getRoutes();\n//     }\n//   };\n\n//   // // get and sort in alpha order all routes for the dropdown menus and pass them to the form log and graph\n//   const getRoutes = () => {\n//     apiManager.getAllType(\"routes\").then((r) => {\n//       r.sort((a, b) => a.name.localeCompare(b.name));\n//       setRoutes(r);\n//     });\n//   };\n\n//   // // set choseroute based on choice from dropdown menu on form log and graph\n//   const handleChosenRouteChange = (e) => {\n//     const routeId = e.target.value;\n//     setChosenRoute(routeId);\n//     setChosenPlaceId(\"\");\n//     setChosenPlaceName(\"\");\n//     apiManager.getAllType(\"places\").then((r) => {\n//       if (routeId !== \"\") {\n//         setPlaces(\n//           r\n//             .filter((each) => each.route.name === routeId)\n//             .sort((a, b) => a.name.localeCompare(b.name))\n//         );\n//       } else {\n//         setPlaces(r.sort((a, b) => a.name.localeCompare(b.name)));\n//       }\n//     });\n//   };\n\n//   // get and sort in alpha order all shuttles for the dropdown menus\n//   const getShuttles = () => {\n//     apiManager.getAllType(\"shuttles\").then((r) => {\n//       r.sort((a, b) => a.name.localeCompare(b.name));\n//       setShuttles(r);\n//     });\n//   };\n\n//   // set chosenShuttleId based on choice from dropdown menu\n//   const handleChosenShuttleChange = (e) => {\n//     setChosenShuttleId(e.target.value);\n//     setChosenShuttleName(e.target.options[e.target.selectedIndex].dataset.name);\n//   };\n\n//   // get all entries then find unique dates for the dropdown menus\n//   const getEntries = () => {\n//     apiManager.getAllType(\"entries\").then((r) => {\n//       r.sort((a, b) => a.date.localeCompare(b.date));\n//       setEntries(r);\n//     });\n//   };\n//   const uniqueDates = [...new Set(entries.map((entry) => entry.date))];\n\n//   // set chosenDate based on choice from dropdown menu\n//   const handleChosenDateChange = (e) => {\n//     const dateId = e.target.value;\n//     setChosenDate(dateId);\n//   };\n\n//   useEffect(() => {\n//     getShuttles();\n//     getEntries();\n//     getPlaces();\n//     getRoutes();\n//   }, []);\n\n//   return (\n//     <BrowserRouter>\n//       <div>tracker</div>\n//       {/* <Route exact path=\"/\" render={() => <Redirect to=\"/entry/form\" />} />\n//       <Route\n//         exact\n//         path=\"/entry/form\"\n//         render={(props) =>\n//           hasUser ? (\n//             <EntryForm\n//               places={places}\n//               routes={routes}\n//               shuttles={shuttles}\n//               chosenPlaceId={chosenPlaceId}\n//               chosenRoute={chosenRoute}\n//               chosenShuttleId={chosenShuttleId}\n//               chosenDate={chosenDate}\n//               handleChosenPlaceChange={handleChosenPlaceChange}\n//               handleChosenRouteChange={handleChosenRouteChange}\n//               handleChosenShuttleChange={handleChosenShuttleChange}\n//               handleChosenDateChange={handleChosenDateChange}\n//               {...props}\n//             />\n//           ) : (\n//             <Redirect to=\"/login\" />\n//           )\n//         }\n//       />\n//       <Route\n//         exact\n//         path=\"/entry/edit/form/:entryId(\\d+)\"\n//         render={(props) =>\n//           // hasUser ? (\n//             <EntryEditForm\n//               places={places}\n//               routes={routes}\n//               shuttles={shuttles}\n//               chosenPlaceId={chosenPlaceId}\n//               chosenRoute={chosenRoute}\n//               chosenShuttleId={chosenShuttleId}\n//               chosenDate={chosenDate}\n//               handleChosenPlaceChange={handleChosenPlaceChange}\n//               handleChosenRouteChange={handleChosenRouteChange}\n//               handleChosenShuttleChange={handleChosenShuttleChange}\n//               handleChosenDateChange={handleChosenDateChange}\n//               {...props}\n//             />\n//           // ) : (\n//           //   <Redirect to=\"/login\" />\n//           // )\n//         }\n//       />\n//       <Route\n//         exact\n//         path=\"/log\"\n//         render={(props) =>\n//           // hasUser ? (\n//             <Log\n//               getEntries={getEntries}\n//               places={places}\n//               routes={routes}\n//               shuttles={shuttles}\n//               entries={entries}\n//               uniqueDates={uniqueDates}\n//               chosenPlaceId={chosenPlaceId}\n//               chosenPlaceName={chosenPlaceName}\n//               chosenRoute={chosenRoute}\n//               chosenShuttleId={chosenShuttleId}\n//               chosenShuttleName={chosenShuttleName}\n//               chosenDate={chosenDate}\n//               handleChosenPlaceChange={handleChosenPlaceChange}\n//               handleChosenRouteChange={handleChosenRouteChange}\n//               handleChosenShuttleChange={handleChosenShuttleChange}\n//               handleChosenDateChange={handleChosenDateChange}\n//               {...props}\n//             />\n//           // ) : (\n//           //   <Redirect to=\"/login\" />\n//           // )\n//         }\n//       />\n//       <Route\n//         exact\n//         path=\"/graph\"\n//         render={(props) =>\n//           hasUser ? (\n//             <RouteReport\n//               getEntries={getEntries}\n//               places={places}\n//               routes={routes}\n//               shuttles={shuttles}\n//               entries={entries}\n//               uniqueDates={uniqueDates}\n//               chosenPlaceId={chosenPlaceId}\n//               chosenPlaceName={chosenPlaceName}\n//               chosenRoute={chosenRoute}\n//               chosenShuttleId={chosenShuttleId}\n//               chosenShuttleName={chosenShuttleName}\n//               chosenDate={chosenDate}\n//               handleChosenPlaceChange={handleChosenPlaceChange}\n//               handleChosenRouteChange={handleChosenRouteChange}\n//               handleChosenShuttleChange={handleChosenShuttleChange}\n//               handleChosenDateChange={handleChosenDateChange}\n//               {...props}\n//             />\n//           ) : (\n//             <Redirect to=\"/login\" />\n//           )\n//         }\n//       /> */}\n//     </BrowserRouter>\n//   );\n// };\n\n// export default EventTranspoTracker;\n"]},"metadata":{},"sourceType":"module"}