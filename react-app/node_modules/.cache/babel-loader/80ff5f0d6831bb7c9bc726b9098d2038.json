{"ast":null,"code":"var _jsxFileName = \"/Users/MainTechPiece/workspace/event-transpo-manager/react-app/src/forms/assignmentForm.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Select from \"@material-ui/core/Select\";\nimport { Link } from \"react-router-dom\";\nimport apiManager from \"../api/apiManager\";\nimport moment from \"moment\";\n\nconst AssignmentForm = props => {\n  const [assignment, setAssignment] = useState({\n    start_time: moment().format(\"HH:mm\"),\n    end_time: \"\",\n    vehicle_id: \"\",\n    driver_id: \"\",\n    route_id: \"\",\n    date_id: \"\"\n  });\n  const [vehicles, setVehicles] = useState([]);\n  const [drivers, setDrivers] = useState([]);\n  const [routes, setRoutes] = useState([]);\n  const [dates, setDates] = useState([]);\n\n  const getAllDropDowns = () => {\n    return apiManager.getAllType(\"vehicles\").then(vehiclesFromApi => {\n      vehiclesFromApi.sort((a, b) => a.company.localeCompare(b.company));\n      setVehicles(vehiclesFromApi);\n    }), apiManager.getAllType(\"drivers\").then(driversFromApi => {\n      driversFromApi.sort((a, b) => a.name.localeCompare(b.name));\n      setDrivers(driversFromApi);\n    }), apiManager.getAllType(\"routes\").then(routesFromApi => {\n      routesFromApi.sort((a, b) => a.name > b.name ? 1 : -1);\n      setRoutes(routesFromApi);\n    }), apiManager.getAllType(\"dates\").then(datesFromApi => {\n      datesFromApi.sort((a, b) => a.number > b.number ? -1 : 1);\n      setDates(datesFromApi);\n    });\n  };\n\n  const handleAssignmentChange = event => {\n    const stateToChange = { ...assignment\n    };\n\n    if (event.target.id === \"start_time\" || event.target.id === \"end_time\") {\n      stateToChange[event.target.id] = event.target.value;\n    } else {\n      stateToChange[event.target.id] = event.target.value;\n    }\n\n    setAssignment(stateToChange);\n  };\n\n  useEffect(() => {\n    getAllDropDowns();\n  }, []); // get all drivers, check if driver already in system, post if not, send to vehicle form\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    apiManager.getAllType(\"assignments\").then(assignments => {\n      const assign = assignments.find(assign => assign.date_id === assignment.date_id && assign.driver_id === assignment.driver_id);\n\n      if (assign === undefined) {\n        apiManager.addType(\"assignments\", assignment).then(() => props.history.push(`/routeview`));\n      } else {\n        alert(`${assign.driver.name} has already been assigned to route ${assign.route.number} on ${assign.date.date}.`);\n      }\n    });\n  }; // const submit = () => {\n  //   apiManager.getAssignments().then(assignments => {\n  //     const assign = assignments.find(\n  //       assign =>\n  //         assign.dateId === assignment.dateId &&\n  //         assign.driverId === assignment.driverId\n  //     );\n  //     if (assign === undefined) {\n  //       apiManager\n  //         .addType(\"assignments\", assignment)\n  //         .then(() =>\n  //           props.history.push(`/routeview`)\n  //         );\n  //     } else {\n  //       alert(\n  //         `${assign.driver.name} has already been assigned to route ${assign.route.number} on ${assign.date.date}.`\n  //       );\n  //     }\n  //   });\n  // };\n\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Typography, {\n    component: \"h1\",\n    variant: \"h5\",\n    className: \"page-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }, \"Assignment Form\"), /*#__PURE__*/React.createElement(\"form\", {\n    className: \"drop-downs\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }, \"Driver:\"), /*#__PURE__*/React.createElement(Select, {\n    id: \"driver_id\",\n    native: true,\n    onChange: handleAssignmentChange,\n    fullWidth: true,\n    required: true // value=\"driver_id\"\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    \"aria-label\": \"None\",\n    value: \"\",\n    \"data-name\": \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 15\n    }\n  }, \"Choose Driver\"), drivers ? drivers.map(driver => /*#__PURE__*/React.createElement(\"option\", {\n    key: driver.id,\n    value: parseInt(driver.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 19\n    }\n  }, driver.name)) : /*#__PURE__*/React.createElement(React.Fragment, null))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }\n  }, \"Vehicle:\"), /*#__PURE__*/React.createElement(Select, {\n    id: \"vehicle_id\",\n    native: true,\n    onChange: handleAssignmentChange,\n    fullWidth: true,\n    required: true // value=\"vehicle_id\"\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    \"aria-label\": \"None\",\n    value: \"\",\n    \"data-name\": \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 15\n    }\n  }, \"Choose Vehicle\"), vehicles ? vehicles.map(vehicle => /*#__PURE__*/React.createElement(\"option\", {\n    key: vehicle.id,\n    value: parseInt(vehicle.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 19\n    }\n  }, vehicle.company, \" \", vehicle.number)) : /*#__PURE__*/React.createElement(React.Fragment, null))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }\n  }, \"Route:\"), /*#__PURE__*/React.createElement(Select, {\n    id: \"route_id\",\n    native: true,\n    onChange: handleAssignmentChange,\n    fullWidth: true,\n    required: true // value=\"route_id\"\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    \"aria-label\": \"None\",\n    value: \"\",\n    \"data-name\": \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 15\n    }\n  }, \"Choose Route\"), routes ? routes.map(route => /*#__PURE__*/React.createElement(\"option\", {\n    key: route.id,\n    value: parseInt(route.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 19\n    }\n  }, route.name)) : /*#__PURE__*/React.createElement(React.Fragment, null))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }\n  }, \"Date:\"), /*#__PURE__*/React.createElement(Select, {\n    id: \"date_id\",\n    native: true,\n    onChange: handleAssignmentChange,\n    fullWidth: true,\n    required: true // value=\"date_id\"\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    \"aria-label\": \"None\",\n    value: \"\",\n    \"data-name\": \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 15\n    }\n  }, \"Choose Date\"), dates ? dates.map(date => /*#__PURE__*/React.createElement(\"option\", {\n    key: date.id,\n    value: parseInt(date.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 19\n    }\n  }, date.date)) : /*#__PURE__*/React.createElement(React.Fragment, null))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    htmlFor: \"age-native-simple\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 13\n    }\n  }, \"Start Time: \"), /*#__PURE__*/React.createElement(TextField, {\n    id: \"start_time\",\n    type: \"time\",\n    fullWidth: true,\n    value: assignment.start_time,\n    onChange: handleAssignmentChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    htmlFor: \"age-native-simple\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 13\n    }\n  }, \"End Time: \"), /*#__PURE__*/React.createElement(TextField, {\n    id: \"end_time\",\n    type: \"time\",\n    fullWidth: true,\n    value: assignment.end_time,\n    onChange: handleAssignmentChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"submit-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    variant: \"contained\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 11\n    }\n  }, \"Submit\"))));\n};\n\nexport default AssignmentForm;","map":{"version":3,"sources":["/Users/MainTechPiece/workspace/event-transpo-manager/react-app/src/forms/assignmentForm.js"],"names":["React","useState","useEffect","Grid","Button","TextField","InputLabel","Typography","Select","Link","apiManager","moment","AssignmentForm","props","assignment","setAssignment","start_time","format","end_time","vehicle_id","driver_id","route_id","date_id","vehicles","setVehicles","drivers","setDrivers","routes","setRoutes","dates","setDates","getAllDropDowns","getAllType","then","vehiclesFromApi","sort","a","b","company","localeCompare","driversFromApi","name","routesFromApi","datesFromApi","number","handleAssignmentChange","event","stateToChange","target","id","value","handleSubmit","e","preventDefault","assignments","assign","find","undefined","addType","history","push","alert","driver","route","date","map","parseInt","vehicle"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Select from \"@material-ui/core/Select\";\nimport { Link } from \"react-router-dom\";\nimport apiManager from \"../api/apiManager\";\nimport moment from \"moment\";\n\nconst AssignmentForm = (props) => {\n  const [assignment, setAssignment] = useState({\n    start_time: moment().format(\"HH:mm\"),\n    end_time: \"\",\n    vehicle_id: \"\",\n    driver_id: \"\",\n    route_id: \"\",\n    date_id: \"\",\n  });\n\n  const [vehicles, setVehicles] = useState([]);\n  const [drivers, setDrivers] = useState([]);\n  const [routes, setRoutes] = useState([]);\n  const [dates, setDates] = useState([]);\n\n  const getAllDropDowns = () => {\n    return (\n      apiManager.getAllType(\"vehicles\").then((vehiclesFromApi) => {\n        vehiclesFromApi.sort((a, b) => a.company.localeCompare(b.company));\n        setVehicles(vehiclesFromApi);\n      }),\n      apiManager.getAllType(\"drivers\").then((driversFromApi) => {\n        driversFromApi.sort((a, b) => a.name.localeCompare(b.name));\n        setDrivers(driversFromApi);\n      }),\n      apiManager.getAllType(\"routes\").then((routesFromApi) => {\n        routesFromApi.sort((a, b) => (a.name > b.name ? 1 : -1));\n        setRoutes(routesFromApi);\n      }),\n      apiManager.getAllType(\"dates\").then((datesFromApi) => {\n        datesFromApi.sort((a, b) => (a.number > b.number ? -1 : 1));\n        setDates(datesFromApi);\n      })\n    );\n  };\n\n  const handleAssignmentChange = (event) => {\n    const stateToChange = { ...assignment };\n    if (event.target.id === \"start_time\" || event.target.id === \"end_time\") {\n      stateToChange[event.target.id] = event.target.value;\n    } else {\n      stateToChange[event.target.id] = event.target.value;\n    }\n    setAssignment(stateToChange);\n  };\n\n  useEffect(() => {\n    getAllDropDowns();\n  }, []);\n\n  // get all drivers, check if driver already in system, post if not, send to vehicle form\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    apiManager.getAllType(\"assignments\").then((assignments) => {\n      const assign = assignments.find(\n        (assign) =>\n          assign.date_id === assignment.date_id &&\n          assign.driver_id === assignment.driver_id\n      );\n      if (assign === undefined) {\n        apiManager\n          .addType(\"assignments\", assignment)\n          .then(() => props.history.push(`/routeview`));\n      } else {\n        alert(\n          `${assign.driver.name} has already been assigned to route ${assign.route.number} on ${assign.date.date}.`\n        );\n      }\n    });\n  };\n\n  // const submit = () => {\n  //   apiManager.getAssignments().then(assignments => {\n  //     const assign = assignments.find(\n  //       assign =>\n  //         assign.dateId === assignment.dateId &&\n  //         assign.driverId === assignment.driverId\n  //     );\n  //     if (assign === undefined) {\n  //       apiManager\n  //         .addType(\"assignments\", assignment)\n  //         .then(() =>\n  //           props.history.push(`/routeview`)\n  //         );\n  //     } else {\n  //       alert(\n  //         `${assign.driver.name} has already been assigned to route ${assign.route.number} on ${assign.date.date}.`\n  //       );\n  //     }\n  //   });\n  // };\n\n  return (\n    <>\n      <Typography component=\"h1\" variant=\"h5\" className=\"page-header\">\n        Assignment Form\n      </Typography>\n      <form className=\"drop-downs\" onSubmit={handleSubmit}>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={3}>\n            <InputLabel>Driver:</InputLabel>\n            <Select\n              id=\"driver_id\"\n              native\n              onChange={handleAssignmentChange}\n              fullWidth\n              required\n              // value=\"driver_id\"\n            >\n              <option aria-label=\"None\" value=\"\" data-name=\"\">\n                Choose Driver\n              </option>\n              {drivers ? (\n                drivers.map((driver) => (\n                  <option key={driver.id} value={parseInt(driver.id)}>\n                    {driver.name}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel>Vehicle:</InputLabel>\n            <Select\n              id=\"vehicle_id\"\n              native\n              onChange={handleAssignmentChange}\n              fullWidth\n              required\n              // value=\"vehicle_id\"\n            >\n              <option aria-label=\"None\" value=\"\" data-name=\"\">\n                Choose Vehicle\n              </option>\n              {vehicles ? (\n                vehicles.map((vehicle) => (\n                  <option key={vehicle.id} value={parseInt(vehicle.id)}>\n                    {vehicle.company} {vehicle.number}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel>Route:</InputLabel>\n            <Select\n              id=\"route_id\"\n              native\n              onChange={handleAssignmentChange}\n              fullWidth\n              required\n              // value=\"route_id\"\n            >\n              <option aria-label=\"None\" value=\"\" data-name=\"\">\n                Choose Route\n              </option>\n              {routes ? (\n                routes.map((route) => (\n                  <option key={route.id} value={parseInt(route.id)}>\n                    {route.name}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel>Date:</InputLabel>\n            <Select\n              id=\"date_id\"\n              native\n              onChange={handleAssignmentChange}\n              fullWidth\n              required\n              // value=\"date_id\"\n            >\n              <option aria-label=\"None\" value=\"\" data-name=\"\">\n                Choose Date\n              </option>\n              {dates ? (\n                dates.map((date) => (\n                  <option key={date.id} value={parseInt(date.id)}>\n                    {date.date}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel htmlFor=\"age-native-simple\">Start Time: </InputLabel>\n            <TextField\n              id=\"start_time\"\n              type=\"time\"\n              fullWidth\n              value={assignment.start_time}\n              onChange={handleAssignmentChange}\n            />\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel htmlFor=\"age-native-simple\">End Time: </InputLabel>\n            <TextField\n              id=\"end_time\"\n              type=\"time\"\n              fullWidth\n              value={assignment.end_time}\n              onChange={handleAssignmentChange}\n            />\n          </Grid>\n        </Grid>\n        <div className=\"submit-button\">\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n            Submit\n          </Button>\n        </div>\n      </form>\n    </>\n  );\n};\n\nexport default AssignmentForm;\n"]},"metadata":{},"sourceType":"module"}