{"ast":null,"code":"var _jsxFileName = \"/Users/MainTechPiece/workspace/event-transpo-manager/react-app/src/routeView/routeCard.js\";\nimport React, { useEffect, useState } from \"../../node_modules/react\";\nimport Grid from '@material-ui/core/Grid';\nimport apiManager from \"../api/apiManager\";\nimport AssignmentCard from \"./assignmentCard\";\n\nconst RouteCard = props => {\n  const chosenDate = props.chosenDate;\n  const route = props.route;\n  const [assignments, setAssignments] = useState([]);\n  useEffect(() => {\n    apiManager.getAssignmentsByDateRoute(parseInt(chosenDate), route.id).then(r => {\n      setAssignments(r);\n    });\n  }, [chosenDate]); // const removeAssignment = (type, id, dateId, routeId) => {\n  //   apiManager.deleteTypeWithId(type, id).then(() =>\n  //     apiManager\n  //       .getAssignmentsByDateRoute(dateId, routeId)\n  //       .then((APIResult) => {\n  //         setAssignments(APIResult);\n  //       })\n  //   );\n  // };\n  // const routeHeader = {\n  //   color: props.route.color,\n  //   fontSize: \"larger\",\n  //   fontWeight: 600,\n  //   marginRight: \"20px\"\n  // };\n\n  const routeBorder = {\n    borderColor: route.color,\n    color: route.color,\n    borderWidth: \"thin\"\n  };\n  return /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 3,\n    className: \"route_border\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"route_heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, parseInt(route.name) < 10 ? /*#__PURE__*/React.createElement(\"span\", {\n    style: routeBorder,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }, \"Route \", route.name.slice(1), \" \", route.description) : /*#__PURE__*/React.createElement(\"span\", {\n    style: routeBorder,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, \"Route \", route.name, \" \", route.description)), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"add_driver_icon\",\n    onClick: () => props.history.push(`/add/${props.route.id}`),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, \"add driver\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, assignments.map(assignment => /*#__PURE__*/React.createElement(AssignmentCard, Object.assign({\n    key: assignment.id,\n    assignment: assignment // removeAssignment={removeAssignment}\n\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }))))));\n};\n\nexport default RouteCard;","map":{"version":3,"sources":["/Users/MainTechPiece/workspace/event-transpo-manager/react-app/src/routeView/routeCard.js"],"names":["React","useEffect","useState","Grid","apiManager","AssignmentCard","RouteCard","props","chosenDate","route","assignments","setAssignments","getAssignmentsByDateRoute","parseInt","id","then","r","routeBorder","borderColor","color","borderWidth","name","slice","description","history","push","map","assignment"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,0BAA3C;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAC3B,QAAMC,UAAU,GAAGD,KAAK,CAACC,UAAzB;AACA,QAAMC,KAAK,GAAGF,KAAK,CAACE,KAApB;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAC,EAAD,CAA9C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,UAAU,CACPQ,yBADH,CAC6BC,QAAQ,CAACL,UAAD,CADrC,EACmDC,KAAK,CAACK,EADzD,EAEGC,IAFH,CAESC,CAAD,IAAO;AACXL,MAAAA,cAAc,CAACK,CAAD,CAAd;AACD,KAJH;AAKD,GANQ,EAMN,CAACR,UAAD,CANM,CAAT,CAL2B,CAa3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMS,WAAW,GAAG;AAClBC,IAAAA,WAAW,EAAET,KAAK,CAACU,KADD;AAElBA,IAAAA,KAAK,EAAEV,KAAK,CAACU,KAFK;AAGlBC,IAAAA,WAAW,EAAE;AAHK,GAApB;AAMA,sBACE,oBAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,CAAf;AAAkB,IAAA,SAAS,EAAC,cAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGP,QAAQ,CAACJ,KAAK,CAACY,IAAP,CAAR,GAAuB,EAAvB,gBACC;AAAM,IAAA,KAAK,EAAEJ,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACSR,KAAK,CAACY,IAAN,CAAWC,KAAX,CAAiB,CAAjB,CADT,OAC+Bb,KAAK,CAACc,WADrC,CADD,gBAKC;AAAM,IAAA,KAAK,EAAEN,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACSR,KAAK,CAACY,IADf,OACsBZ,KAAK,CAACc,WAD5B,CANJ,CADF,eA0BE;AACE,IAAA,SAAS,EAAC,iBADZ;AAEE,IAAA,OAAO,EAAE,MAAMhB,KAAK,CAACiB,OAAN,CAAcC,IAAd,CAAoB,QAAOlB,KAAK,CAACE,KAAN,CAAYK,EAAG,EAA1C,CAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBA1BF,eAgCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGJ,WAAW,CAACgB,GAAZ,CAAiBC,UAAD,iBACf,oBAAC,cAAD;AACE,IAAA,GAAG,EAAEA,UAAU,CAACb,EADlB;AAEE,IAAA,UAAU,EAAEa,UAFd,CAGE;;AAHF,KAIMpB,KAJN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADD,CADH,CAhCF,CADF,CADF;AA+CD,CAnFD;;AAqFA,eAAeD,SAAf","sourcesContent":["import React, { useEffect, useState } from \"../../node_modules/react\";\nimport Grid from '@material-ui/core/Grid';\nimport apiManager from \"../api/apiManager\";\nimport AssignmentCard from \"./assignmentCard\";\n\nconst RouteCard = (props) => {\n  const chosenDate = props.chosenDate;\n  const route = props.route;\n  const [assignments, setAssignments] = useState([]);\n\n  useEffect(() => {\n    apiManager\n      .getAssignmentsByDateRoute(parseInt(chosenDate), route.id)\n      .then((r) => {\n        setAssignments(r);\n      });\n  }, [chosenDate]);\n\n  // const removeAssignment = (type, id, dateId, routeId) => {\n  //   apiManager.deleteTypeWithId(type, id).then(() =>\n  //     apiManager\n  //       .getAssignmentsByDateRoute(dateId, routeId)\n  //       .then((APIResult) => {\n  //         setAssignments(APIResult);\n  //       })\n  //   );\n  // };\n\n  // const routeHeader = {\n  //   color: props.route.color,\n  //   fontSize: \"larger\",\n  //   fontWeight: 600,\n  //   marginRight: \"20px\"\n  // };\n\n  const routeBorder = {\n    borderColor: route.color,\n    color: route.color,\n    borderWidth: \"thin\",\n  };\n\n  return (\n    <Grid container>\n      <Grid item xs={3} className=\"route_border\">\n        <div className=\"route_heading\">\n          {parseInt(route.name) < 10 ? (\n            <span style={routeBorder}>\n              Route {route.name.slice(1)} {route.description}\n            </span>\n          ) : (\n            <span style={routeBorder}>\n              Route {route.name} {route.description}\n            </span>\n          )}\n          {/* <span className=\"assigned\">\n            ({assignments.length} assigned -{\"\\u00A0\"}\n            {props.route.numOfVehNeeded - assignments.length} needed)\n          </span> */}\n          {/* {favoriteRouteIDs.length !== 0 ? (\n            <span className=\"route_icon\" id-=\"unStar\" onClick={unStar}>\n              unstar\n            </span>\n          ) : null}\n          {favoriteRouteIDs.length === 0 ? (\n            <span className=\"route_icon\" id=\"star\" onClick={star}>\n              star\n            </span>\n          ) : null} */}\n        </div>\n        <span\n          className=\"add_driver_icon\"\n          onClick={() => props.history.push(`/add/${props.route.id}`)}\n        >\n          add driver\n        </span>\n        <div>\n          {assignments.map((assignment) => (\n            <AssignmentCard\n              key={assignment.id}\n              assignment={assignment}\n              // removeAssignment={removeAssignment}\n              {...props}\n            />\n          ))}\n        </div>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default RouteCard;\n"]},"metadata":{},"sourceType":"module"}