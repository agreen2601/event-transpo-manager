{"ast":null,"code":"var _jsxFileName = \"/Users/MainTechPiece/workspace/event-transpo-manager/react-app/src/appViews.js\";\nimport React, { useState, useEffect } from \"react\";\nimport NavBar from \"./nav/NavBar\";\nimport EventTranspoTracker from \"./eventTranspoTracker\";\nimport EventTranspoManager from \"./EventTranspoManager\";\nimport \"./styles.css\";\n\nconst appViews = props => {\n  const isAuthenticated = () => sessionStorage.getItem(\"token\") !== null;\n\n  const [hasUser, setHasUser] = useState(isAuthenticated());\n\n  const setUserToken = resp => {\n    sessionStorage.setItem(\"token\", resp.token);\n    sessionStorage.setItem(\"userID\", resp.user_id);\n    setHasUser(isAuthenticated());\n  };\n\n  const clearUser = () => {\n    sessionStorage.clear();\n    setHasUser(isAuthenticated());\n  };\n\n  const [mode, setMode] = useState(false);\n\n  const handleModeChange = () => {\n    setMode(!isChecked);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(NavBar, Object.assign({\n    hasUser: hasUser,\n    clearUser: clearUser,\n    handleModeChange: handleModeChange\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/login\",\n    render: props => mode == false ? /*#__PURE__*/React.createElement(EventTranspoTracker, Object.assign({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }\n    })) : /*#__PURE__*/React.createElement(EventTranspoManager, Object.assign({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default appViews;","map":{"version":3,"sources":["/Users/MainTechPiece/workspace/event-transpo-manager/react-app/src/appViews.js"],"names":["React","useState","useEffect","NavBar","EventTranspoTracker","EventTranspoManager","appViews","props","isAuthenticated","sessionStorage","getItem","hasUser","setHasUser","setUserToken","resp","setItem","token","user_id","clearUser","clear","mode","setMode","handleModeChange","isChecked"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,OAAO,cAAP;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAC1B,QAAMC,eAAe,GAAG,MAAMC,cAAc,CAACC,OAAf,CAAuB,OAAvB,MAAoC,IAAlE;;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAACO,eAAe,EAAhB,CAAtC;;AAEA,QAAMK,YAAY,GAAIC,IAAD,IAAU;AAC7BL,IAAAA,cAAc,CAACM,OAAf,CAAuB,OAAvB,EAAgCD,IAAI,CAACE,KAArC;AACAP,IAAAA,cAAc,CAACM,OAAf,CAAuB,QAAvB,EAAiCD,IAAI,CAACG,OAAtC;AACAL,IAAAA,UAAU,CAACJ,eAAe,EAAhB,CAAV;AACD,GAJD;;AAMA,QAAMU,SAAS,GAAG,MAAM;AACtBT,IAAAA,cAAc,CAACU,KAAf;AACAP,IAAAA,UAAU,CAACJ,eAAe,EAAhB,CAAV;AACD,GAHD;;AAKA,QAAM,CAACY,IAAD,EAAOC,OAAP,IAAkBpB,QAAQ,CAAC,KAAD,CAAhC;;AACA,QAAMqB,gBAAgB,GAAG,MAAM;AAC7BD,IAAAA,OAAO,CAAC,CAACE,SAAF,CAAP;AACD,GAFD;;AAIA,sBACE,uDACE,oBAAC,MAAD;AACE,IAAA,OAAO,EAAEZ,OADX;AAEE,IAAA,SAAS,EAAEO,SAFb;AAGE,IAAA,gBAAgB,EAAEI;AAHpB,KAIMf,KAJN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,eAOE,oBAAC,KAAD;AACE,IAAA,KAAK,MADP;AAEE,IAAA,IAAI,EAAC,QAFP;AAGE,IAAA,MAAM,EAAGA,KAAD,IACNa,IAAI,IAAI,KAAR,gBACE,oBAAC,mBAAD,oBAAyBb,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF,gBAGE,oBAAC,mBAAD,oBAAyBA,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAPN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,CADF;AAqBD,CAzCD;;AA2CA,eAAeD,QAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport NavBar from \"./nav/NavBar\";\nimport EventTranspoTracker from \"./eventTranspoTracker\";\nimport EventTranspoManager from \"./EventTranspoManager\";\nimport \"./styles.css\";\n\nconst appViews = (props) => {\n  const isAuthenticated = () => sessionStorage.getItem(\"token\") !== null;\n  const [hasUser, setHasUser] = useState(isAuthenticated());\n\n  const setUserToken = (resp) => {\n    sessionStorage.setItem(\"token\", resp.token);\n    sessionStorage.setItem(\"userID\", resp.user_id);\n    setHasUser(isAuthenticated());\n  };\n\n  const clearUser = () => {\n    sessionStorage.clear();\n    setHasUser(isAuthenticated());\n  };\n\n  const [mode, setMode] = useState(false);\n  const handleModeChange = () => {\n    setMode(!isChecked);\n  };\n\n  return (\n    <>\n      <NavBar\n        hasUser={hasUser}\n        clearUser={clearUser}\n        handleModeChange={handleModeChange}\n        {...props}\n      />\n      <Route\n        exact\n        path=\"/login\"\n        render={(props) =>\n          mode == false ? (\n            <EventTranspoTracker {...props} />\n          ) : (\n            <EventTranspoManager {...props} />\n          )\n        }\n      />\n    </>\n  );\n};\n\nexport default appViews;\n"]},"metadata":{},"sourceType":"module"}