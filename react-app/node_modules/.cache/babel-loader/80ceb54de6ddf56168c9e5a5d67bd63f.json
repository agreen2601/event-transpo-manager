{"ast":null,"code":"var _jsxFileName = \"/Users/MainTechPiece/workspace/final-capstone-react-app/src/EventTranspoTracker.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { BrowserRouter, useHistory, Route } from \"react-router-dom\";\nimport Nav_Bar from \"./Navbar\";\nimport EntryForm from \"./forms/EntryForm\";\nimport LocationLog from \"./LocationLog\";\nimport apiManager from \"./api/apiManager\";\n\nconst EventTranspoTracker = props => {\n  let history = useHistory();\n\n  const isAuthenticated = () => sessionStorage.getItem(\"token\") !== null;\n\n  const [hasUser, setHasUser] = useState(isAuthenticated());\n  const [userInfo, setUserInfo] = useState({});\n\n  const setUserToken = resp => {\n    sessionStorage.setItem(\"token\", resp.token);\n    setHasUser(isAuthenticated());\n  };\n\n  const clearUser = () => {\n    sessionStorage.clear();\n    setHasUser(isAuthenticated());\n  }; // locations is all locations to fill the dropdown menus on the form and log\n  // chosenLocation is the choice made from the dropdown\n  // chosenRoute is dependent upon chosen location (fetch location info with locationId then .route_id)\n  // chosenEvent is the choice made from the dropdown\n\n\n  const [locations, setLocations] = useState([]);\n  const [events, setEvents] = useState([]);\n  const [chosenLocation, setChosenLocation] = useState(1);\n  const [chosenRoute, setChosenRoute] = useState(\"\");\n  const [chosenEvent, setChosenEvent] = useState(1); // get all locations for the dropdown menus and pass them to the form and the log\n\n  const getLocations = () => {\n    apiManager.getAllLocations().then(r => {\n      setLocations(r);\n    });\n  }; // get all events for the dropdown menus\n\n\n  const getEvents = () => {\n    apiManager.getAllEvents().then(r => {\n      setEvents(r);\n    });\n  }; // set choseLocation based on choice from dropdown menu on either form or log\n\n\n  const handleChosenLocationChange = e => {\n    const locationId = parseInt(e.target.value);\n    setChosenLocation(locationId);\n  }; // set chosenRoute based on chosenLocation and pass it down to the form\n\n\n  const getRouteByLocation = locationId => {\n    apiManager.getSingleLocation(locationId).then(r => {\n      setChosenRoute(r.route_id);\n    });\n  }; // set chosenEvent based on choice from dropdown menu\n\n\n  const handleChosenEventChange = e => {\n    const eventId = parseInt(e.target.value);\n    setChosenEvent(eventId);\n  }; // watch from change in chosenlocation and update chosenroute at the same time\n\n\n  useEffect(() => {\n    getLocations();\n    getEvents();\n    getRouteByLocation(chosenLocation);\n  }, [chosenLocation]);\n  return /*#__PURE__*/React.createElement(BrowserRouter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Nav_Bar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/entry/form\",\n    render: props => /*#__PURE__*/React.createElement(EntryForm, Object.assign({\n      locations: locations,\n      events: events,\n      chosenLocation: chosenLocation,\n      chosenRoute: chosenRoute,\n      chosenEvent: chosenEvent,\n      handleChosenLocationChange: handleChosenLocationChange,\n      handleChosenEventChange: handleChosenEventChange\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/location/log\",\n    render: props => /*#__PURE__*/React.createElement(LocationLog, Object.assign({\n      locations: locations,\n      events: events,\n      chosenLocation: chosenLocation,\n      chosenEvent: chosenEvent,\n      handleChosenLocationChange: handleChosenLocationChange,\n      handleChosenEventChange: handleChosenEventChange\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default EventTranspoTracker;","map":{"version":3,"sources":["/Users/MainTechPiece/workspace/final-capstone-react-app/src/EventTranspoTracker.js"],"names":["React","useState","useEffect","BrowserRouter","useHistory","Route","Nav_Bar","EntryForm","LocationLog","apiManager","EventTranspoTracker","props","history","isAuthenticated","sessionStorage","getItem","hasUser","setHasUser","userInfo","setUserInfo","setUserToken","resp","setItem","token","clearUser","clear","locations","setLocations","events","setEvents","chosenLocation","setChosenLocation","chosenRoute","setChosenRoute","chosenEvent","setChosenEvent","getLocations","getAllLocations","then","r","getEvents","getAllEvents","handleChosenLocationChange","e","locationId","parseInt","target","value","getRouteByLocation","getSingleLocation","route_id","handleChosenEventChange","eventId"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter, useHistory, Route } from \"react-router-dom\";\nimport Nav_Bar from \"./Navbar\";\nimport EntryForm from \"./forms/EntryForm\";\nimport LocationLog from \"./LocationLog\";\nimport apiManager from \"./api/apiManager\";\n\nconst EventTranspoTracker = (props) => {\n  let history = useHistory();\n  const isAuthenticated = () => sessionStorage.getItem(\"token\") !== null;\n  const [hasUser, setHasUser] = useState(isAuthenticated());\n  const [userInfo, setUserInfo] = useState({});\n\n  const setUserToken = (resp) => {\n    sessionStorage.setItem(\"token\", resp.token);\n    setHasUser(isAuthenticated());\n  };\n\n  const clearUser = () => {\n    sessionStorage.clear();\n    setHasUser(isAuthenticated());\n  };\n\n  // locations is all locations to fill the dropdown menus on the form and log\n  // chosenLocation is the choice made from the dropdown\n  // chosenRoute is dependent upon chosen location (fetch location info with locationId then .route_id)\n  // chosenEvent is the choice made from the dropdown\n  const [locations, setLocations] = useState([]);\n  const [events, setEvents] = useState([]);\n  const [chosenLocation, setChosenLocation] = useState(1);\n  const [chosenRoute, setChosenRoute] = useState(\"\");\n  const [chosenEvent, setChosenEvent] = useState(1);\n\n  // get all locations for the dropdown menus and pass them to the form and the log\n  const getLocations = () => {\n    apiManager.getAllLocations().then((r) => {\n      setLocations(r);\n    });\n  };\n\n  // get all events for the dropdown menus\n  const getEvents = () => {\n    apiManager.getAllEvents().then((r) => {\n      setEvents(r);\n    });\n  };\n\n  // set choseLocation based on choice from dropdown menu on either form or log\n  const handleChosenLocationChange = (e) => {\n    const locationId = parseInt(e.target.value);\n    setChosenLocation(locationId);\n  };\n\n  // set chosenRoute based on chosenLocation and pass it down to the form\n  const getRouteByLocation = (locationId) => {\n    apiManager.getSingleLocation(locationId).then((r) => {\n      setChosenRoute(r.route_id);\n    });\n  };\n\n  // set chosenEvent based on choice from dropdown menu\n  const handleChosenEventChange = (e) => {\n    const eventId = parseInt(e.target.value);\n    setChosenEvent(eventId);\n  };\n\n  // watch from change in chosenlocation and update chosenroute at the same time\n  useEffect(() => {\n    getLocations();\n    getEvents();\n    getRouteByLocation(chosenLocation);\n  }, [chosenLocation]);\n\n  return (\n    <BrowserRouter>\n      <Nav_Bar />\n      <Route\n        exact\n        path=\"/entry/form\"\n        render={(props) => (\n          <EntryForm\n            locations={locations}\n            events={events}\n            chosenLocation={chosenLocation}\n            chosenRoute={chosenRoute}\n            chosenEvent={chosenEvent}\n            handleChosenLocationChange={handleChosenLocationChange}\n            handleChosenEventChange={handleChosenEventChange}\n            {...props}\n          />\n        )}\n      />\n      <Route\n        exact\n        path=\"/location/log\"\n        render={(props) => (\n          <LocationLog\n            locations={locations}\n            events={events}\n            chosenLocation={chosenLocation}\n            chosenEvent={chosenEvent}\n            handleChosenLocationChange={handleChosenLocationChange}\n            handleChosenEventChange={handleChosenEventChange}\n            {...props}\n          />\n        )}\n      />\n    </BrowserRouter>\n  );\n};\n\nexport default EventTranspoTracker;\n"]},"metadata":{},"sourceType":"module"}