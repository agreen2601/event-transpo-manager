{"ast":null,"code":"var _jsxFileName = \"/Users/MainTechPiece/workspace/final-capstone-react-app/src/EventTranspoTracker.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { BrowserRouter, useHistory, Route } from \"react-router-dom\";\nimport Nav_Bar from \"./Navbar\";\nimport EntryForm from \"./forms/EntryForm\";\nimport apiManager from \"./api/apiManager\";\nimport RouteReport from \"./reports/RouteReport\";\nimport LocationLog from \"./logs/LocationLog\";\n\nconst EventTranspoTracker = () => {\n  let history = useHistory();\n\n  const isAuthenticated = () => sessionStorage.getItem(\"token\") !== null;\n\n  const [hasUser, setHasUser] = useState(isAuthenticated());\n  const [userInfo, setUserInfo] = useState({});\n\n  const setUserToken = resp => {\n    sessionStorage.setItem(\"token\", resp.token);\n    setHasUser(isAuthenticated());\n  };\n\n  const clearUser = () => {\n    sessionStorage.clear();\n    setHasUser(isAuthenticated());\n  }; // locations is all locations to fill the dropdown menus on the form and log\n  // chosenLocation is the choice made from the dropdown\n  // chosenRoute is dependent upon chosen location (fetch location info with locationId then .route_id)\n  // chosenEvent is the choice made from the dropdown\n\n\n  const [locations, setLocations] = useState([]);\n  const [events, setEvents] = useState([]);\n  const [entries, setEntries] = useState([]);\n  const [chosenLocation, setChosenLocation] = useState(1);\n  const [chosenRoute, setChosenRoute] = useState(\"\");\n  const [chosenEvent, setChosenEvent] = useState(1);\n  const [chosenDate, setChosenDate] = useState(\"\");\n  let today = new Date().toISOString().slice(0, 10);\n  console.log(today); // get and sort in alpha order all locations for the dropdown menus and pass them to the form and the log\n\n  const getLocations = () => {\n    apiManager.getAllLocations().then(r => {\n      r.sort((a, b) => a.name.localeCompare(b.name));\n      setLocations(r);\n    });\n  }; // set choseLocation based on choice from dropdown menu on form and log\n\n\n  const handleChosenLocationChange = e => {\n    const locationId = parseInt(e.target.value);\n    setChosenLocation(locationId);\n  }; // set chosenRoute based on chosenLocation and pass it down to the form\n\n\n  const getRouteByLocation = locationId => {\n    apiManager.getSingleLocation(locationId).then(r => {\n      setChosenRoute(r.route_id);\n    });\n  }; // get and sort in alpha order all events for the dropdown menus\n\n\n  const getEvents = () => {\n    apiManager.getAllEvents().then(r => {\n      r.sort((a, b) => a.name.localeCompare(b.name));\n      setEvents(r);\n    });\n  }; // set chosenEvent based on choice from dropdown menu\n\n\n  const handleChosenEventChange = e => {\n    const eventId = parseInt(e.target.value);\n    setChosenEvent(eventId);\n  }; // get all entries then find unique dates for the dropdown menus\n\n\n  const getEntries = () => {\n    apiManager.getAllEntries().then(r => {\n      setEntries(r);\n    });\n  };\n\n  const uniqueDates = [...new Set(entries.map(entry => entry.date))]; // set chosenDate based on choice from dropdown menu\n\n  const handleChosenDateChange = e => {\n    const dateId = e.target.value;\n    setChosenDate(dateId);\n  }; // watch from change in chosenlocation and update chosenroute at the same time\n\n\n  useEffect(() => {\n    getLocations();\n    getEvents();\n    getEntries();\n    getRouteByLocation(chosenLocation);\n  }, [chosenLocation, chosenEvent]);\n  return /*#__PURE__*/React.createElement(BrowserRouter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Nav_Bar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/entry/form\",\n    render: props => /*#__PURE__*/React.createElement(EntryForm, Object.assign({\n      locations: locations,\n      events: events,\n      chosenLocation: chosenLocation,\n      chosenRoute: chosenRoute,\n      chosenEvent: chosenEvent,\n      handleChosenLocationChange: handleChosenLocationChange,\n      handleChosenEventChange: handleChosenEventChange\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/location/log\",\n    render: props => /*#__PURE__*/React.createElement(LocationLog, Object.assign({\n      locations: locations,\n      events: events,\n      uniqueDates: uniqueDates,\n      chosenLocation: chosenLocation,\n      chosenEvent: chosenEvent,\n      chosenDate: chosenDate,\n      handleChosenLocationChange: handleChosenLocationChange,\n      handleChosenEventChange: handleChosenEventChange,\n      handleChosenDateChange: handleChosenDateChange\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/route/report\",\n    render: props => /*#__PURE__*/React.createElement(RouteReport, Object.assign({\n      locations: locations,\n      events: events,\n      uniqueDates: uniqueDates,\n      chosenLocation: chosenLocation,\n      chosenRoute: chosenRoute,\n      chosenEvent: chosenEvent,\n      chosenDate: chosenDate,\n      handleChosenLocationChange: handleChosenLocationChange,\n      handleChosenEventChange: handleChosenEventChange,\n      handleChosenDateChange: handleChosenDateChange\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default EventTranspoTracker;","map":{"version":3,"sources":["/Users/MainTechPiece/workspace/final-capstone-react-app/src/EventTranspoTracker.js"],"names":["React","useState","useEffect","BrowserRouter","useHistory","Route","Nav_Bar","EntryForm","apiManager","RouteReport","LocationLog","EventTranspoTracker","history","isAuthenticated","sessionStorage","getItem","hasUser","setHasUser","userInfo","setUserInfo","setUserToken","resp","setItem","token","clearUser","clear","locations","setLocations","events","setEvents","entries","setEntries","chosenLocation","setChosenLocation","chosenRoute","setChosenRoute","chosenEvent","setChosenEvent","chosenDate","setChosenDate","today","Date","toISOString","slice","console","log","getLocations","getAllLocations","then","r","sort","a","b","name","localeCompare","handleChosenLocationChange","e","locationId","parseInt","target","value","getRouteByLocation","getSingleLocation","route_id","getEvents","getAllEvents","handleChosenEventChange","eventId","getEntries","getAllEntries","uniqueDates","Set","map","entry","date","handleChosenDateChange","dateId","props"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter, useHistory, Route } from \"react-router-dom\";\nimport Nav_Bar from \"./Navbar\";\nimport EntryForm from \"./forms/EntryForm\";\nimport apiManager from \"./api/apiManager\";\nimport RouteReport from \"./reports/RouteReport\";\nimport LocationLog from \"./logs/LocationLog\";\n\nconst EventTranspoTracker = () => {\n  let history = useHistory();\n  const isAuthenticated = () => sessionStorage.getItem(\"token\") !== null;\n  const [hasUser, setHasUser] = useState(isAuthenticated());\n  const [userInfo, setUserInfo] = useState({});\n\n  const setUserToken = (resp) => {\n    sessionStorage.setItem(\"token\", resp.token);\n    setHasUser(isAuthenticated());\n  };\n\n  const clearUser = () => {\n    sessionStorage.clear();\n    setHasUser(isAuthenticated());\n  };\n\n  // locations is all locations to fill the dropdown menus on the form and log\n  // chosenLocation is the choice made from the dropdown\n  // chosenRoute is dependent upon chosen location (fetch location info with locationId then .route_id)\n  // chosenEvent is the choice made from the dropdown\n  const [locations, setLocations] = useState([]);\n  const [events, setEvents] = useState([]);\n  const [entries, setEntries] = useState([]);\n  const [chosenLocation, setChosenLocation] = useState(1);\n  const [chosenRoute, setChosenRoute] = useState(\"\");\n  const [chosenEvent, setChosenEvent] = useState(1);\n  const [chosenDate, setChosenDate] = useState(\"\");\n\n  let today = new Date().toISOString().slice(0, 10)\n\n  console.log(today)\n  \n  // get and sort in alpha order all locations for the dropdown menus and pass them to the form and the log\n  const getLocations = () => {\n    apiManager.getAllLocations().then((r) => {\n      r.sort((a, b) => a.name.localeCompare(b.name));\n      setLocations(r);\n    });\n  };\n\n  // set choseLocation based on choice from dropdown menu on form and log\n  const handleChosenLocationChange = (e) => {\n    const locationId = parseInt(e.target.value);\n    setChosenLocation(locationId);\n  };\n\n  // set chosenRoute based on chosenLocation and pass it down to the form\n  const getRouteByLocation = (locationId) => {\n    apiManager.getSingleLocation(locationId).then((r) => {\n      setChosenRoute(r.route_id);\n    });\n  };\n\n  // get and sort in alpha order all events for the dropdown menus\n  const getEvents = () => {\n    apiManager.getAllEvents().then((r) => {\n      r.sort((a, b) => a.name.localeCompare(b.name));\n      setEvents(r);\n    });\n  };\n\n  // set chosenEvent based on choice from dropdown menu\n  const handleChosenEventChange = (e) => {\n    const eventId = parseInt(e.target.value);\n    setChosenEvent(eventId);\n  };\n\n  // get all entries then find unique dates for the dropdown menus\n  const getEntries = () => {\n    apiManager.getAllEntries().then((r) => {\n      setEntries(r);\n    });\n  };\n  const uniqueDates = [...new Set(entries.map((entry) => entry.date))]\n\n  // set chosenDate based on choice from dropdown menu\n  const handleChosenDateChange = (e) => {\n    const dateId = (e.target.value);\n    setChosenDate(dateId);\n  };\n\n  // watch from change in chosenlocation and update chosenroute at the same time\n  useEffect(() => {\n    getLocations();\n    getEvents();\n    getEntries();\n    getRouteByLocation(chosenLocation);\n  }, [chosenLocation, chosenEvent]);\n\n  return (\n    <BrowserRouter>\n      <Nav_Bar />\n      <Route\n        exact\n        path=\"/entry/form\"\n        render={(props) => (\n          <EntryForm\n            locations={locations}\n            events={events}\n            chosenLocation={chosenLocation}\n            chosenRoute={chosenRoute}\n            chosenEvent={chosenEvent}\n            handleChosenLocationChange={handleChosenLocationChange}\n            handleChosenEventChange={handleChosenEventChange}\n            {...props}\n          />\n        )}\n      />\n      <Route\n        exact\n        path=\"/location/log\"\n        render={(props) => (\n          <LocationLog\n            locations={locations}\n            events={events}\n            uniqueDates={uniqueDates}\n            chosenLocation={chosenLocation}\n            chosenEvent={chosenEvent}\n            chosenDate={chosenDate}\n            handleChosenLocationChange={handleChosenLocationChange}\n            handleChosenEventChange={handleChosenEventChange}\n            handleChosenDateChange={handleChosenDateChange}\n            {...props}\n          />\n        )}\n      />\n      <Route\n        exact\n        path=\"/route/report\"\n        render={(props) => (\n          <RouteReport\n            locations={locations}\n            events={events}\n            uniqueDates={uniqueDates}\n            chosenLocation={chosenLocation}\n            chosenRoute={chosenRoute}\n            chosenEvent={chosenEvent}\n            chosenDate={chosenDate}\n            handleChosenLocationChange={handleChosenLocationChange}\n            handleChosenEventChange={handleChosenEventChange}\n            handleChosenDateChange={handleChosenDateChange}\n            {...props}\n          />\n        )}\n      />\n    </BrowserRouter>\n  );\n};\n\nexport default EventTranspoTracker;\n"]},"metadata":{},"sourceType":"module"}