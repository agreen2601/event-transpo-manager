{"ast":null,"code":"var _jsxFileName = \"/Users/MainTechPiece/workspace/final-capstone-react-app/src/auth/login.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { LoginForm } from \"../forms/loginForm\";\nimport { apiManager } from \"../api/apiManager\";\n\nconst Login = props => {\n  const [formData, setFormData] = useState({\n    username: \"\",\n    password: \"\"\n  });\n  const [failedLogin, setFailedLogin] = useState(false);\n\n  const handleFieldChange = evt => {\n    const stateToChange = { ...formData\n    };\n    stateToChange[evt.target.id] = evt.target.value;\n    setFormData(stateToChange);\n  };\n\n  const handleLogin = e => {\n    e.preventDefault();\n    const user = {\n      username: formData.username,\n      password: formData.password\n    };\n    apiManager.login(user).then(resp => {\n      if (\"token\" in resp) {\n        props.setUserToken(resp);\n        props.history.push(\"/\");\n      } // If there is no token,\n      // the login was unsuccessful,\n      // and so an error message is displayed\n      else {\n          setFailedLogin(true);\n        }\n    });\n  };\n\n  useEffect(() => {}, [failedLogin]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleLogin,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(LoginForm, {\n    handleFieldChange: handleFieldChange,\n    failedLogin: failedLogin,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default Login;","map":{"version":3,"sources":["/Users/MainTechPiece/workspace/final-capstone-react-app/src/auth/login.js"],"names":["React","useState","useEffect","LoginForm","apiManager","Login","props","formData","setFormData","username","password","failedLogin","setFailedLogin","handleFieldChange","evt","stateToChange","target","id","value","handleLogin","e","preventDefault","user","login","then","resp","setUserToken","history","push"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SAASC,UAAT,QAA2B,mBAA3B;;AAEA,MAAMC,KAAK,GAAIC,KAAD,IAAW;AACvB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC;AACvCQ,IAAAA,QAAQ,EAAE,EAD6B;AAEvCC,IAAAA,QAAQ,EAAE;AAF6B,GAAD,CAAxC;AAIA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCX,QAAQ,CAAC,KAAD,CAA9C;;AAEA,QAAMY,iBAAiB,GAAIC,GAAD,IAAS;AACjC,UAAMC,aAAa,GAAG,EAAE,GAAGR;AAAL,KAAtB;AACAQ,IAAAA,aAAa,CAACD,GAAG,CAACE,MAAJ,CAAWC,EAAZ,CAAb,GAA+BH,GAAG,CAACE,MAAJ,CAAWE,KAA1C;AACAV,IAAAA,WAAW,CAACO,aAAD,CAAX;AACD,GAJD;;AAMA,QAAMI,WAAW,GAAIC,CAAD,IAAO;AACzBA,IAAAA,CAAC,CAACC,cAAF;AAEA,UAAMC,IAAI,GAAG;AACXb,MAAAA,QAAQ,EAAEF,QAAQ,CAACE,QADR;AAEXC,MAAAA,QAAQ,EAAEH,QAAQ,CAACG;AAFR,KAAb;AAKAN,IAAAA,UAAU,CAACmB,KAAX,CAAiBD,IAAjB,EAAuBE,IAAvB,CAA6BC,IAAD,IAAU;AACpC,UAAI,WAAWA,IAAf,EAAqB;AACnBnB,QAAAA,KAAK,CAACoB,YAAN,CAAmBD,IAAnB;AACAnB,QAAAA,KAAK,CAACqB,OAAN,CAAcC,IAAd,CAAmB,GAAnB;AACD,OAHD,CAIA;AACA;AACA;AANA,WAOK;AACHhB,UAAAA,cAAc,CAAC,IAAD,CAAd;AACD;AACF,KAXD;AAYD,GApBD;;AAsBAV,EAAAA,SAAS,CAAC,MAAM,CAAE,CAAT,EAAW,CAACS,WAAD,CAAX,CAAT;AAEA,sBACE,uDACE;AAAM,IAAA,QAAQ,EAAEQ,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AACE,IAAA,iBAAiB,EAAEN,iBADrB;AAEE,IAAA,WAAW,EAAEF,WAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF;AAUD,CA/CD;;AAiDA,eAAeN,KAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { LoginForm } from \"../forms/loginForm\";\nimport { apiManager } from \"../api/apiManager\";\n\nconst Login = (props) => {\n  const [formData, setFormData] = useState({\n    username: \"\",\n    password: \"\",\n  });\n  const [failedLogin, setFailedLogin] = useState(false);\n\n  const handleFieldChange = (evt) => {\n    const stateToChange = { ...formData };\n    stateToChange[evt.target.id] = evt.target.value;\n    setFormData(stateToChange);\n  };\n\n  const handleLogin = (e) => {\n    e.preventDefault();\n\n    const user = {\n      username: formData.username,\n      password: formData.password,\n    };\n\n    apiManager.login(user).then((resp) => {\n      if (\"token\" in resp) {\n        props.setUserToken(resp);\n        props.history.push(\"/\");\n      }\n      // If there is no token,\n      // the login was unsuccessful,\n      // and so an error message is displayed\n      else {\n        setFailedLogin(true);\n      }\n    });\n  };\n\n  useEffect(() => {}, [failedLogin]);\n\n  return (\n    <>\n      <form onSubmit={handleLogin}>\n        <LoginForm\n          handleFieldChange={handleFieldChange}\n          failedLogin={failedLogin}\n        />\n      </form>\n    </>\n  );\n};\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}