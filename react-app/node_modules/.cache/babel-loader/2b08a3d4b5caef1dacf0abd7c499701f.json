{"ast":null,"code":"var _jsxFileName = \"/Users/MainTechPiece/workspace/event-transpo-manager/react-app/src/forms/assignmentForm.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Select from \"@material-ui/core/Select\";\nimport apiManager from \"../api/apiManager\";\nimport moment from \"moment\";\n\nconst AssignmentForm = props => {\n  const chosenRoute = props.chosenRoute;\n  const handleChosenRouteChange = props.handleChosenRouteChange;\n  const [assignment, setAssignment] = useState({\n    start_time: moment().format(\"HH:mm\"),\n    end_time: \"\",\n    vehicle_id: \"\",\n    driver_id: \"\",\n    date_id: \"\"\n  });\n  assignment.route_id = chosenRoute;\n  const [dates, setDates] = useState([]);\n  const [routes, setRoutes] = useState([]);\n  const [drivers, setDrivers] = useState([]);\n  const [vehicles, setVehicles] = useState([]);\n  const [vehicleNumbers, setVehicleNumbers] = useState([]);\n\n  const getAllDropDowns = () => {\n    return apiManager.getType(\"dates\").then(r => {\n      r.sort((a, b) => a.date > b.date ? 1 : -1);\n      setDates(r);\n    }), apiManager.getType(\"routes\").then(r => {\n      r.sort((a, b) => a.name > b.name ? 1 : -1);\n      setRoutes(r);\n    }), apiManager.getType(\"drivers\").then(r => {\n      r.sort((a, b) => a.name.localeCompare(b.name));\n      setDrivers(r);\n    }), apiManager.getType(\"vehicles\").then(r => {\n      r.sort((a, b) => a.company.localeCompare(b.company));\n      setVehicles(r);\n    });\n  };\n\n  const companies = [...new Set(vehicles.map(vehicle => vehicle.company))];\n\n  const handleAssignmentChange = e => {\n    const stateToChange = { ...assignment\n    };\n    stateToChange[e.target.id] = e.target.value;\n    setAssignment(stateToChange);\n  };\n\n  const [chosenCompany, setChosenCompany] = useState(\"\");\n  const [chosenVehicleNumber, setChosenVehicleNumber] = useState(\"\");\n\n  const handleChosenCompanyChange = e => {\n    setChosenCompany(e.target.value);\n    console.log(chosenCompany); // setChosenVehicleNumber(\"\");\n    // apiManager.getAllType(\"vehicles\").then((r) => {\n    //   if (company !== \"\") {\n    //     setVehicleNumbers(\n    //       r\n    //         .filter((each) => each.company === routeId)\n    //         .sort((a, b) => a.name.localeCompare(b.name))\n    //     );\n    //   } else {\n    //     setPlaces(r.sort((a, b) => a.name.localeCompare(b.name)));\n    //   }\n    // });\n  };\n\n  const handleChosenVehicleNumberChange = e => {\n    setChosenVehicleNumber(e.target.value); // setChosenPlaceName(e.target.options[e.target.selectedIndex].dataset.name);\n\n    if (e.target.value !== \"\") {} else {\n      apiManager.getAllType(\"vehicles\").then(r => {\n        r.sort((a, b) => a.name.localeCompare(b.name));\n        setVehicles(r);\n      });\n    }\n  };\n\n  useEffect(() => {\n    getAllDropDowns();\n  }, []); // get all drivers, check if driver already in system, post if not, send to vehicle form\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    apiManager.getAllType(\"assignments\").then(assignments => {\n      const assign = assignments.find(assign => assign.date_id === assignment.date_id && assign.driver_id === assignment.driver_id);\n\n      if (assign === undefined) {\n        apiManager.addType(\"assignments\", assignment).then(() => props.history.push(`/routeview`));\n      } else {\n        alert(`${assign.driver.name} has already been assigned to route ${assign.route.number} on ${assign.date.date}.`);\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Typography, {\n    component: \"h1\",\n    variant: \"h5\",\n    className: \"page-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }, \"Assignment Form\"), /*#__PURE__*/React.createElement(\"form\", {\n    className: \"drop-downs\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  }, \"Driver:\"), /*#__PURE__*/React.createElement(Select, {\n    id: \"driver_id\",\n    native: true,\n    onChange: handleAssignmentChange,\n    fullWidth: true,\n    required: true // value=\"driver_id\"\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    \"aria-label\": \"None\",\n    value: \"\",\n    \"data-name\": \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 15\n    }\n  }, \"Choose Driver\"), drivers ? drivers.map(driver => /*#__PURE__*/React.createElement(\"option\", {\n    key: driver.id,\n    value: parseInt(driver.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 19\n    }\n  }, driver.name)) : /*#__PURE__*/React.createElement(React.Fragment, null))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }\n  }, \"Company:\"), /*#__PURE__*/React.createElement(Select, {\n    id: \"company_id\",\n    native: true,\n    onChange: handleChosenCompanyChange,\n    fullWidth: true,\n    required: true // value=\"company_id\"\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    \"aria-label\": \"None\",\n    value: \"\",\n    \"data-name\": \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 15\n    }\n  }, \"Choose Company\"), companies ? companies.map(company => /*#__PURE__*/React.createElement(\"option\", {\n    key: company,\n    value: company,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 19\n    }\n  }, company)) : /*#__PURE__*/React.createElement(React.Fragment, null))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }\n  }, \"Vehicle Number:\"), /*#__PURE__*/React.createElement(Select, {\n    id: \"company_id\",\n    native: true,\n    onChange: handleChosenVehicleNumberChange,\n    fullWidth: true,\n    required: true // value=\"company_id\"\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    \"aria-label\": \"None\",\n    value: \"\",\n    \"data-name\": \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 15\n    }\n  }, \"Choose Vehicle Number\"), vehicleNumbers ? vehicleNumbers.map(number => /*#__PURE__*/React.createElement(\"option\", {\n    key: number,\n    value: number,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 19\n    }\n  }, number)) : /*#__PURE__*/React.createElement(React.Fragment, null))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 13\n    }\n  }, \"Route:\"), /*#__PURE__*/React.createElement(Select, {\n    id: \"route_id\",\n    native: true,\n    onChange: handleChosenRouteChange,\n    fullWidth: true,\n    required: true,\n    value: chosenRoute,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    \"aria-label\": \"None\",\n    value: \"\",\n    \"data-name\": \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 15\n    }\n  }, \"Choose Route\"), routes ? routes.map(route => /*#__PURE__*/React.createElement(\"option\", {\n    key: route.id,\n    value: parseInt(route.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 19\n    }\n  }, route.name, \" \", route.description)) : /*#__PURE__*/React.createElement(React.Fragment, null))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 13\n    }\n  }, \"Date:\"), /*#__PURE__*/React.createElement(Select, {\n    id: \"date_id\",\n    native: true,\n    onChange: handleAssignmentChange,\n    fullWidth: true,\n    required: true // value=\"date_id\"\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    \"aria-label\": \"None\",\n    value: \"\",\n    \"data-name\": \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 15\n    }\n  }, \"Choose Date\"), dates ? dates.map(date => /*#__PURE__*/React.createElement(\"option\", {\n    key: date.id,\n    value: parseInt(date.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 19\n    }\n  }, date.date)) : /*#__PURE__*/React.createElement(React.Fragment, null))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    htmlFor: \"age-native-simple\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 13\n    }\n  }, \"Start Time: \"), /*#__PURE__*/React.createElement(TextField, {\n    id: \"start_time\",\n    type: \"time\",\n    fullWidth: true,\n    value: assignment.start_time,\n    onChange: handleAssignmentChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    htmlFor: \"age-native-simple\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 13\n    }\n  }, \"End Time: \"), /*#__PURE__*/React.createElement(TextField, {\n    id: \"end_time\",\n    type: \"time\",\n    fullWidth: true,\n    value: assignment.end_time,\n    onChange: handleAssignmentChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"submit-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    variant: \"contained\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 11\n    }\n  }, \"Submit\"))));\n};\n\nexport default AssignmentForm;","map":{"version":3,"sources":["/Users/MainTechPiece/workspace/event-transpo-manager/react-app/src/forms/assignmentForm.js"],"names":["React","useState","useEffect","Grid","Button","TextField","InputLabel","Typography","Select","apiManager","moment","AssignmentForm","props","chosenRoute","handleChosenRouteChange","assignment","setAssignment","start_time","format","end_time","vehicle_id","driver_id","date_id","route_id","dates","setDates","routes","setRoutes","drivers","setDrivers","vehicles","setVehicles","vehicleNumbers","setVehicleNumbers","getAllDropDowns","getType","then","r","sort","a","b","date","name","localeCompare","company","companies","Set","map","vehicle","handleAssignmentChange","e","stateToChange","target","id","value","chosenCompany","setChosenCompany","chosenVehicleNumber","setChosenVehicleNumber","handleChosenCompanyChange","console","log","handleChosenVehicleNumberChange","getAllType","handleSubmit","preventDefault","assignments","assign","find","undefined","addType","history","push","alert","driver","route","number","parseInt","description"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Select from \"@material-ui/core/Select\";\nimport apiManager from \"../api/apiManager\";\nimport moment from \"moment\";\n\nconst AssignmentForm = (props) => {\n  const chosenRoute = props.chosenRoute;\n  const handleChosenRouteChange = props.handleChosenRouteChange;\n  const [assignment, setAssignment] = useState({\n    start_time: moment().format(\"HH:mm\"),\n    end_time: \"\",\n    vehicle_id: \"\",\n    driver_id: \"\",\n    date_id: \"\",\n  });\n\n  assignment.route_id = chosenRoute;\n\n  const [dates, setDates] = useState([]);\n  const [routes, setRoutes] = useState([]);\n  const [drivers, setDrivers] = useState([]);\n  const [vehicles, setVehicles] = useState([]);\n  const [vehicleNumbers, setVehicleNumbers] = useState([]);\n\n  const getAllDropDowns = () => {\n    return (\n      apiManager.getType(\"dates\").then((r) => {\n        r.sort((a, b) => (a.date > b.date ? 1 : -1));\n        setDates(r);\n      }),\n      apiManager.getType(\"routes\").then((r) => {\n        r.sort((a, b) => (a.name > b.name ? 1 : -1));\n        setRoutes(r);\n      }),\n      apiManager.getType(\"drivers\").then((r) => {\n        r.sort((a, b) => a.name.localeCompare(b.name));\n        setDrivers(r);\n      }),\n      apiManager.getType(\"vehicles\").then((r) => {\n        r.sort((a, b) => a.company.localeCompare(b.company));\n        setVehicles(r);\n      })\n    );\n  };\n\n  const companies = [...new Set(vehicles.map((vehicle) => vehicle.company))];\n\n  const handleAssignmentChange = (e) => {\n    const stateToChange = { ...assignment };\n    stateToChange[e.target.id] = e.target.value;\n    setAssignment(stateToChange);\n  };\n\n  const [chosenCompany, setChosenCompany] = useState(\"\");\n  const [chosenVehicleNumber, setChosenVehicleNumber] = useState(\"\");\n\n  const handleChosenCompanyChange = (e) => {\n    setChosenCompany(e.target.value);\n    console.log(chosenCompany);\n    // setChosenVehicleNumber(\"\");\n    // apiManager.getAllType(\"vehicles\").then((r) => {\n    //   if (company !== \"\") {\n    //     setVehicleNumbers(\n    //       r\n    //         .filter((each) => each.company === routeId)\n    //         .sort((a, b) => a.name.localeCompare(b.name))\n    //     );\n    //   } else {\n    //     setPlaces(r.sort((a, b) => a.name.localeCompare(b.name)));\n    //   }\n    // });\n  };\n\n  const handleChosenVehicleNumberChange = (e) => {\n    setChosenVehicleNumber(e.target.value);\n    // setChosenPlaceName(e.target.options[e.target.selectedIndex].dataset.name);\n    if (e.target.value !== \"\") {\n    } else {\n      apiManager.getAllType(\"vehicles\").then((r) => {\n        r.sort((a, b) => a.name.localeCompare(b.name));\n        setVehicles(r);\n      });\n    }\n  };\n\n  useEffect(() => {\n    getAllDropDowns();\n  }, []);\n\n  // get all drivers, check if driver already in system, post if not, send to vehicle form\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    apiManager.getAllType(\"assignments\").then((assignments) => {\n      const assign = assignments.find(\n        (assign) =>\n          assign.date_id === assignment.date_id &&\n          assign.driver_id === assignment.driver_id\n      );\n      if (assign === undefined) {\n        apiManager\n          .addType(\"assignments\", assignment)\n          .then(() => props.history.push(`/routeview`));\n      } else {\n        alert(\n          `${assign.driver.name} has already been assigned to route ${assign.route.number} on ${assign.date.date}.`\n        );\n      }\n    });\n  };\n\n  return (\n    <>\n      <Typography component=\"h1\" variant=\"h5\" className=\"page-header\">\n        Assignment Form\n      </Typography>\n      <form className=\"drop-downs\" onSubmit={handleSubmit}>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={3}>\n            <InputLabel>Driver:</InputLabel>\n            <Select\n              id=\"driver_id\"\n              native\n              onChange={handleAssignmentChange}\n              fullWidth\n              required\n              // value=\"driver_id\"\n            >\n              <option aria-label=\"None\" value=\"\" data-name=\"\">\n                Choose Driver\n              </option>\n              {drivers ? (\n                drivers.map((driver) => (\n                  <option key={driver.id} value={parseInt(driver.id)}>\n                    {driver.name}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel>Company:</InputLabel>\n            <Select\n              id=\"company_id\"\n              native\n              onChange={handleChosenCompanyChange}\n              fullWidth\n              required\n              // value=\"company_id\"\n            >\n              <option aria-label=\"None\" value=\"\" data-name=\"\">\n                Choose Company\n              </option>\n              {companies ? (\n                companies.map((company) => (\n                  <option key={company} value={company}>\n                    {company}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel>Vehicle Number:</InputLabel>\n            <Select\n              id=\"company_id\"\n              native\n              onChange={handleChosenVehicleNumberChange}\n              fullWidth\n              required\n              // value=\"company_id\"\n            >\n              <option aria-label=\"None\" value=\"\" data-name=\"\">\n                Choose Vehicle Number\n              </option>\n              {vehicleNumbers ? (\n                vehicleNumbers.map((number) => (\n                  <option key={number} value={number}>\n                    {number}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel>Route:</InputLabel>\n            <Select\n              id=\"route_id\"\n              native\n              onChange={handleChosenRouteChange}\n              fullWidth\n              required\n              value={chosenRoute}\n            >\n              <option aria-label=\"None\" value=\"\" data-name=\"\">\n                Choose Route\n              </option>\n              {routes ? (\n                routes.map((route) => (\n                  <option key={route.id} value={parseInt(route.id)}>\n                    {route.name} {route.description}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel>Date:</InputLabel>\n            <Select\n              id=\"date_id\"\n              native\n              onChange={handleAssignmentChange}\n              fullWidth\n              required\n              // value=\"date_id\"\n            >\n              <option aria-label=\"None\" value=\"\" data-name=\"\">\n                Choose Date\n              </option>\n              {dates ? (\n                dates.map((date) => (\n                  <option key={date.id} value={parseInt(date.id)}>\n                    {date.date}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel htmlFor=\"age-native-simple\">Start Time: </InputLabel>\n            <TextField\n              id=\"start_time\"\n              type=\"time\"\n              fullWidth\n              value={assignment.start_time}\n              onChange={handleAssignmentChange}\n            />\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel htmlFor=\"age-native-simple\">End Time: </InputLabel>\n            <TextField\n              id=\"end_time\"\n              type=\"time\"\n              fullWidth\n              value={assignment.end_time}\n              onChange={handleAssignmentChange}\n            />\n          </Grid>\n        </Grid>\n        <div className=\"submit-button\">\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n            Submit\n          </Button>\n        </div>\n      </form>\n    </>\n  );\n};\n\nexport default AssignmentForm;\n"]},"metadata":{},"sourceType":"module"}