{"ast":null,"code":"var _jsxFileName = \"/Users/MainTechPiece/workspace/event-transpo-manager/react-app/src/reports/routeGraph.js\";\nimport React from \"react\";\nimport { Bar } from \"react-chartjs-2\";\n\nconst RouteGraph = props => {\n  const entries = props.filteredEntries;\n  const chosenRoute = props.chosenRoute;\n  const chosenPlaceId = props.chosenPlaceId;\n  console.log(entries); // round times down to nearest 10 minutes (slice off the last number) and put that and attendee counts into new array\n\n  const times = entries.map(entry => entry.time.slice(0, 4));\n  const counts = entries.map(entry => entry.attendee_count);\n  const isolated = [];\n\n  for (let i = 0; i < entries.length; i++) {\n    isolated.push({\n      x: `${times[i]}0`,\n      y: counts[i]\n    });\n  }\n\n  const holder = {}; // reduce duplicate times and accumulate attendee counts for those duplicate times\n\n  isolated.forEach(function (a) {\n    if (holder.hasOwnProperty(a.x)) {\n      holder[a.x] = holder[a.x] + a.y;\n    } else {\n      holder[a.x] = a.y;\n    }\n  });\n  const accumulated = [];\n\n  for (const prop in holder) {\n    accumulated.push({\n      x: prop,\n      y: holder[prop]\n    });\n  } // find earliest and latest hour for width of x-axis\n\n\n  let earliestHour = \"\";\n  let latestHour = \"\";\n\n  if (accumulated.length !== 0) {\n    earliestHour = parseInt(accumulated[0].x);\n    latestHour = parseInt(accumulated[accumulated.length - 1].x) + 1;\n  } // break timespan into 10 minute intervals - bar graph must have data in each x position to reflect linear x-axis spacing,\n\n\n  const timeSpanIntervals = [];\n\n  for (let j = earliestHour; j < latestHour; j++) {\n    for (let i = 0; i < 6; i++) {\n      if (j < 10) {\n        timeSpanIntervals.push(`0${j}:${i}0`);\n      } else {\n        timeSpanIntervals.push(`${j}:${i}0`);\n      }\n    }\n  } // get the attendee count for each time interval, those with no data set y = 0 (meaning the bar has no height)\n\n\n  function getAttendeeCountOrMakeZero(x) {\n    for (let each of accumulated) {\n      if (x === each.x) {\n        return each.y;\n      }\n    }\n\n    return 0;\n  }\n\n  let routeColor = \"black\";\n\n  if (entries.length !== 0) {\n    if (chosenPlaceId === \"\" && chosenRoute === \"\") {} else {\n      routeColor = entries[0].place.route.color;\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Bar, {\n    data: {\n      labels: timeSpanIntervals.map(v => v),\n      datasets: [{\n        backgroundColor: routeColor,\n        borderColor: \"black\",\n        borderWidth: 2,\n        // fill: true,\n        data: timeSpanIntervals.map(v => getAttendeeCountOrMakeZero(v))\n      }]\n    },\n    options: {\n      responsive: true,\n      legend: {\n        display: false\n      },\n      scales: {\n        xAxes: [{\n          display: true,\n          ticks: {\n            maxTicksLimit: (latestHour - earliestHour + 1) * 2\n          }\n        }],\n        yAxes: [{\n          display: true\n        }]\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default RouteGraph;","map":{"version":3,"sources":["/Users/MainTechPiece/workspace/event-transpo-manager/react-app/src/reports/routeGraph.js"],"names":["React","Bar","RouteGraph","props","entries","filteredEntries","chosenRoute","chosenPlaceId","console","log","times","map","entry","time","slice","counts","attendee_count","isolated","i","length","push","x","y","holder","forEach","a","hasOwnProperty","accumulated","prop","earliestHour","latestHour","parseInt","timeSpanIntervals","j","getAttendeeCountOrMakeZero","each","routeColor","place","route","color","labels","v","datasets","backgroundColor","borderColor","borderWidth","data","responsive","legend","display","scales","xAxes","ticks","maxTicksLimit","yAxes"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Bar } from \"react-chartjs-2\";\n\nconst RouteGraph = (props) => {\n  const entries = props.filteredEntries;\n  const chosenRoute = props.chosenRoute;\n  const chosenPlaceId = props.chosenPlaceId;\n\n  console.log(entries);\n\n  // round times down to nearest 10 minutes (slice off the last number) and put that and attendee counts into new array\n  const times = entries.map((entry) => entry.time.slice(0, 4));\n  const counts = entries.map((entry) => entry.attendee_count);\n  const isolated = [];\n  for (let i = 0; i < entries.length; i++) {\n    isolated.push({ x: `${times[i]}0`, y: counts[i] });\n  }\n\n  const holder = {};\n\n  // reduce duplicate times and accumulate attendee counts for those duplicate times\n  isolated.forEach(function (a) {\n    if (holder.hasOwnProperty(a.x)) {\n      holder[a.x] = holder[a.x] + a.y;\n    } else {\n      holder[a.x] = a.y;\n    }\n  });\n\n  const accumulated = [];\n\n  for (const prop in holder) {\n    accumulated.push({ x: prop, y: holder[prop] });\n  }\n\n  // find earliest and latest hour for width of x-axis\n  let earliestHour = \"\";\n  let latestHour = \"\";\n  if (accumulated.length !== 0) {\n    earliestHour = parseInt(accumulated[0].x);\n    latestHour = parseInt(accumulated[accumulated.length - 1].x) + 1;\n  }\n\n  // break timespan into 10 minute intervals - bar graph must have data in each x position to reflect linear x-axis spacing,\n  const timeSpanIntervals = [];\n  for (let j = earliestHour; j < latestHour; j++) {\n    for (let i = 0; i < 6; i++) {\n      if (j < 10) {\n        timeSpanIntervals.push(`0${j}:${i}0`);\n      } else {\n        timeSpanIntervals.push(`${j}:${i}0`);\n      }\n    }\n  }\n\n  // get the attendee count for each time interval, those with no data set y = 0 (meaning the bar has no height)\n  function getAttendeeCountOrMakeZero(x) {\n    for (let each of accumulated) {\n      if (x === each.x) {\n        return each.y;\n      }\n    }\n    return 0;\n  }\n\n  let routeColor = \"black\";\n  if (entries.length !== 0) {\n    if (chosenPlaceId === \"\" && chosenRoute === \"\") {\n    } else {\n      routeColor = entries[0].place.route.color;\n    }\n  }\n\n  return (\n    <div>\n      <Bar\n        data={{\n          labels: timeSpanIntervals.map((v) => v),\n          datasets: [\n            {\n              backgroundColor: routeColor,\n              borderColor: \"black\",\n              borderWidth: 2,\n              // fill: true,\n              data: timeSpanIntervals.map((v) => getAttendeeCountOrMakeZero(v)),\n            },\n          ],\n        }}\n        options={{\n          responsive: true,\n          legend: {\n            display: false,\n          },\n          scales: {\n            xAxes: [\n              {\n                display: true,\n                ticks: {\n                  maxTicksLimit: (latestHour - earliestHour + 1) * 2,\n                },\n              },\n            ],\n            yAxes: [\n              {\n                display: true,\n              },\n            ],\n          },\n        }}\n      />\n    </div>\n  );\n};\n\nexport default RouteGraph;\n"]},"metadata":{},"sourceType":"module"}