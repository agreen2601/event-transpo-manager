{"ast":null,"code":"var _jsxFileName = \"/Users/MainTechPiece/workspace/final-capstone-react-app/src/EventTranspoTracker.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { BrowserRouter, useHistory, Route } from \"react-router-dom\";\nimport Nav_Bar from \"./Navbar\";\nimport EntryForm from \"./forms/EntryForm\";\nimport LocationLog from \"./LocationLog\";\nimport apiManager from \"./api/apiManager\";\n\nconst EventTranspoTracker = props => {\n  let history = useHistory();\n\n  const isAuthenticated = () => sessionStorage.getItem(\"token\") !== null;\n\n  const [hasUser, setHasUser] = useState(isAuthenticated());\n  const [userInfo, setUserInfo] = useState({});\n\n  const setUserToken = resp => {\n    sessionStorage.setItem(\"token\", resp.token);\n    setHasUser(isAuthenticated());\n  };\n\n  const clearUser = () => {\n    sessionStorage.clear();\n    setHasUser(isAuthenticated());\n  };\n\n  const [locations, setLocations] = useState([]);\n  const [chosenLocation, setChosenLocation] = useState(1);\n  const [chosenRoute, setChosenRoute] = useState(\"\");\n\n  const getRouteByLocation = locationId => {\n    apiManager.getSingleLocation(locationId).then(r => {\n      console.log(\"route\", r.route_id);\n    });\n  };\n\n  console.log(chosenLocation);\n\n  const getLocations = () => {\n    apiManager.getAllLocations().then(r => {\n      setLocations(r);\n    });\n  };\n\n  useEffect(() => {\n    getLocations();\n    getRouteByLocation(chosenLocation);\n  }, [chosenLocation]);\n\n  const handleChosenLocationChange = e => {\n    const locationId = parseInt(e.target.value);\n    setChosenLocation(locationId);\n  };\n\n  return /*#__PURE__*/React.createElement(BrowserRouter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Nav_Bar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/entry/form\",\n    render: props => /*#__PURE__*/React.createElement(EntryForm, Object.assign({\n      locations: locations,\n      chosenLocation: chosenLocation,\n      handleChosenLocationChange: handleChosenLocationChange\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/location/log\",\n    render: props => /*#__PURE__*/React.createElement(LocationLog, Object.assign({\n      locations: locations,\n      chosenLocation: chosenLocation,\n      handleChosenLocationChange: handleChosenLocationChange\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default EventTranspoTracker;","map":{"version":3,"sources":["/Users/MainTechPiece/workspace/final-capstone-react-app/src/EventTranspoTracker.js"],"names":["React","useState","useEffect","BrowserRouter","useHistory","Route","Nav_Bar","EntryForm","LocationLog","apiManager","EventTranspoTracker","props","history","isAuthenticated","sessionStorage","getItem","hasUser","setHasUser","userInfo","setUserInfo","setUserToken","resp","setItem","token","clearUser","clear","locations","setLocations","chosenLocation","setChosenLocation","chosenRoute","setChosenRoute","getRouteByLocation","locationId","getSingleLocation","then","r","console","log","route_id","getLocations","getAllLocations","handleChosenLocationChange","e","parseInt","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter, useHistory, Route } from \"react-router-dom\";\nimport Nav_Bar from \"./Navbar\";\nimport EntryForm from \"./forms/EntryForm\";\nimport LocationLog from \"./LocationLog\";\nimport apiManager from \"./api/apiManager\";\n\nconst EventTranspoTracker = (props) => {\n  let history = useHistory();\n  const isAuthenticated = () => sessionStorage.getItem(\"token\") !== null;\n  const [hasUser, setHasUser] = useState(isAuthenticated());\n  const [userInfo, setUserInfo] = useState({});\n\n  const setUserToken = (resp) => {\n    sessionStorage.setItem(\"token\", resp.token);\n    setHasUser(isAuthenticated());\n  };\n\n  const clearUser = () => {\n    sessionStorage.clear();\n    setHasUser(isAuthenticated());\n  };\n\n  const [locations, setLocations] = useState([]);\n  const [chosenLocation, setChosenLocation] = useState(1);\n  const [chosenRoute, setChosenRoute] = useState(\"\");\n\n  const getRouteByLocation = (locationId) => {\n    apiManager.getSingleLocation(locationId).then((r) => {\n      console.log(\"route\", r.route_id);\n    });\n  };\n\n  console.log(chosenLocation);\n\n  const getLocations = () => {\n    apiManager.getAllLocations().then((r) => {\n      setLocations(r);\n    });\n  };\n\n  useEffect(() => {\n    getLocations();\n    getRouteByLocation(chosenLocation)\n  }, [chosenLocation]);\n\n  const handleChosenLocationChange = (e) => {\n    const locationId = parseInt(e.target.value);\n    setChosenLocation(locationId);\n  };\n\n  return (\n    <BrowserRouter>\n      <Nav_Bar />\n      <Route\n        exact\n        path=\"/entry/form\"\n        render={(props) => (\n          <EntryForm\n            locations={locations}\n            chosenLocation={chosenLocation}\n            handleChosenLocationChange={handleChosenLocationChange}\n            {...props}\n          />\n        )}\n      />\n      <Route\n        exact\n        path=\"/location/log\"\n        render={(props) => (\n          <LocationLog\n            locations={locations}\n            chosenLocation={chosenLocation}\n            handleChosenLocationChange={handleChosenLocationChange}\n            {...props}\n          />\n        )}\n      />\n    </BrowserRouter>\n  );\n};\n\nexport default EventTranspoTracker;\n"]},"metadata":{},"sourceType":"module"}