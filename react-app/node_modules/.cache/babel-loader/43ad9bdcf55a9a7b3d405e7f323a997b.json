{"ast":null,"code":"var _jsxFileName = \"/Users/MainTechPiece/workspace/final-capstone-react-app/src/eventTranspoTracker.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { BrowserRouter, Route, Redirect } from \"react-router-dom\";\nimport NavBar from \"./navbar\";\nimport EntryForm from \"./forms/entryForm\";\nimport EntryEditForm from \"./forms/entryEditForm\";\nimport apiManager from \"./api/apiManager\";\nimport RouteReport from \"./reports/routeReport\";\nimport LocationLog from \"./logs/locationLog\";\nimport Login from \"./auth/login\";\nimport Register from \"./auth/register\";\nimport moment from \"moment\";\n\nconst EventTranspoTracker = () => {\n  const isAuthenticated = () => sessionStorage.getItem(\"token\") !== null;\n\n  const [hasUser, setHasUser] = useState(isAuthenticated());\n\n  const setUserToken = resp => {\n    sessionStorage.setItem(\"token\", resp.token);\n    sessionStorage.setItem(\"userID\", resp.user_id);\n    setHasUser(isAuthenticated());\n  };\n\n  const clearUser = () => {\n    sessionStorage.clear();\n    setHasUser(isAuthenticated());\n  }; // locations and events are all locations and events to fill the dropdown menus\n  // chosenLocation and chosenEvent are the choices made from the dropdowns\n  // chosenRoute is dependent upon chosen location (fetch location info with locationId then access .route_id)\n\n\n  const [locations, setLocations] = useState([]); // const [routes, setRoutes] = useState([]);\n\n  const [events, setEvents] = useState([]);\n  const [entries, setEntries] = useState([]);\n  const [chosenLocation, setChosenLocation] = useState(1); // const [chosenRoute, setChosenRoute] = useState(\"\");\n\n  const [chosenEvent, setChosenEvent] = useState(1);\n  const [chosenDate, setChosenDate] = useState(moment().format(\"YYYY-MM-DD\")); // get and sort in alpha order all locations for the dropdown menus and pass them to the form and the log\n\n  const getLocations = () => {\n    apiManager.getAllType(\"locations\").then(r => {\n      r.sort((a, b) => a.name.localeCompare(b.name));\n      setLocations(r);\n    });\n  }; // set choseLocation based on choice from dropdown menu on form and log\n\n\n  const handleChosenLocationChange = e => {\n    const locationId = e.target.value;\n    setChosenLocation(locationId);\n    setChosenRoute(\"\");\n  }; // // get and sort in alpha order all routes for the dropdown menus and pass them to the form and the log\n\n\n  const getRoutes = () => {\n    apiManager.getAllType(\"routes\").then(r => {\n      r.sort((a, b) => a.name.localeCompare(b.name));\n      setRoutes(r);\n    });\n  }; // // set choseroute based on choice from dropdown menu on form and log\n\n\n  const handleChosenRouteChange = e => {\n    const routeId = parseInt(e.target.value);\n    setChosenRoute(routeId);\n    setChosenLocation(\"\");\n  }; // get and sort in alpha order all events for the dropdown menus\n\n\n  const getEvents = () => {\n    apiManager.getAllType(\"events\").then(r => {\n      r.sort((a, b) => a.name.localeCompare(b.name));\n      setEvents(r);\n    });\n  }; // set chosenEvent based on choice from dropdown menu\n\n\n  const handleChosenEventChange = e => {\n    const eventId = e.target.value;\n    setChosenEvent(eventId);\n  }; // get all entries then find unique dates for the dropdown menus\n\n\n  const getEntries = () => {\n    apiManager.getAllType(\"entries\").then(r => {\n      r.sort((a, b) => a.date.localeCompare(b.date));\n      setEntries(r);\n    });\n  };\n\n  const uniqueDates = [...new Set(entries.map(entry => entry.date))]; // set chosenDate based on choice from dropdown menu\n\n  const handleChosenDateChange = e => {\n    const dateId = e.target.value;\n    setChosenDate(dateId);\n  }; // watch for change in chosenlocation and update chosenroute at the same time\n\n\n  useEffect(() => {\n    getLocations();\n    getEvents();\n    getEntries();\n    getRoutes();\n  }, []);\n  return /*#__PURE__*/React.createElement(BrowserRouter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(NavBar, {\n    hasUser: hasUser,\n    clearUser: clearUser,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/\",\n    render: props => /*#__PURE__*/React.createElement(Login, Object.assign({\n      setUserToken: setUserToken\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 28\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/register\",\n    render: props => /*#__PURE__*/React.createElement(Register, Object.assign({\n      setUserToken: setUserToken\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 28\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/entry/form\",\n    render: props => hasUser ? /*#__PURE__*/React.createElement(EntryForm, Object.assign({\n      locations: locations,\n      events: events,\n      chosenLocation: chosenLocation // chosenRoute={chosenRoute}\n      ,\n      chosenEvent: chosenEvent,\n      chosenDate: chosenDate,\n      handleChosenLocationChange: handleChosenLocationChange // handleChosenRouteChange={handleChosenRouteChange}\n      ,\n      handleChosenEventChange: handleChosenEventChange,\n      handleChosenDateChange: handleChosenDateChange\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }\n    })) : /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 13\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/entry/edit/form/:entryId(\\\\d+)\",\n    render: props => hasUser ? /*#__PURE__*/React.createElement(EntryEditForm, Object.assign({\n      locations: locations,\n      events: events,\n      chosenLocation: chosenLocation // chosenRoute={chosenRoute}\n      ,\n      chosenEvent: chosenEvent,\n      chosenDate: chosenDate,\n      handleChosenLocationChange: handleChosenLocationChange,\n      handleChosenEventChange: handleChosenEventChange,\n      handleChosenDateChange: handleChosenDateChange\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 13\n      }\n    })) : /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 13\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/location/log\",\n    render: props => hasUser ? /*#__PURE__*/React.createElement(LocationLog, Object.assign({\n      locations: locations,\n      events: events,\n      entries: entries,\n      getEntries: getEntries,\n      uniqueDates: uniqueDates,\n      chosenLocation: chosenLocation // chosenRoute={chosenRoute}\n      ,\n      chosenEvent: chosenEvent,\n      chosenDate: chosenDate,\n      handleChosenLocationChange: handleChosenLocationChange,\n      handleChosenEventChange: handleChosenEventChange,\n      handleChosenDateChange: handleChosenDateChange\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 13\n      }\n    })) : /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 13\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/route/report\",\n    render: props => hasUser ? /*#__PURE__*/React.createElement(RouteReport, Object.assign({\n      locations: locations,\n      events: events,\n      entries: entries,\n      uniqueDates: uniqueDates,\n      chosenLocation: chosenLocation // chosenRoute={chosenRoute}\n      ,\n      chosenEvent: chosenEvent,\n      chosenDate: chosenDate,\n      handleChosenLocationChange: handleChosenLocationChange,\n      handleChosenEventChange: handleChosenEventChange,\n      handleChosenDateChange: handleChosenDateChange\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 13\n      }\n    })) : /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 13\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default EventTranspoTracker;","map":{"version":3,"sources":["/Users/MainTechPiece/workspace/final-capstone-react-app/src/eventTranspoTracker.js"],"names":["React","useState","useEffect","BrowserRouter","Route","Redirect","NavBar","EntryForm","EntryEditForm","apiManager","RouteReport","LocationLog","Login","Register","moment","EventTranspoTracker","isAuthenticated","sessionStorage","getItem","hasUser","setHasUser","setUserToken","resp","setItem","token","user_id","clearUser","clear","locations","setLocations","events","setEvents","entries","setEntries","chosenLocation","setChosenLocation","chosenEvent","setChosenEvent","chosenDate","setChosenDate","format","getLocations","getAllType","then","r","sort","a","b","name","localeCompare","handleChosenLocationChange","e","locationId","target","value","setChosenRoute","getRoutes","setRoutes","handleChosenRouteChange","routeId","parseInt","getEvents","handleChosenEventChange","eventId","getEntries","date","uniqueDates","Set","map","entry","handleChosenDateChange","dateId","props"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter, Route, Redirect } from \"react-router-dom\";\nimport NavBar from \"./navbar\";\nimport EntryForm from \"./forms/entryForm\";\nimport EntryEditForm from \"./forms/entryEditForm\";\nimport apiManager from \"./api/apiManager\";\nimport RouteReport from \"./reports/routeReport\";\nimport LocationLog from \"./logs/locationLog\";\nimport Login from \"./auth/login\";\nimport Register from \"./auth/register\";\nimport moment from \"moment\";\n\nconst EventTranspoTracker = () => {\n  const isAuthenticated = () => sessionStorage.getItem(\"token\") !== null;\n  const [hasUser, setHasUser] = useState(isAuthenticated());\n\n  const setUserToken = (resp) => {\n    sessionStorage.setItem(\"token\", resp.token);\n    sessionStorage.setItem(\"userID\", resp.user_id);\n    setHasUser(isAuthenticated());\n  };\n\n  const clearUser = () => {\n    sessionStorage.clear();\n    setHasUser(isAuthenticated());\n  };\n\n  // locations and events are all locations and events to fill the dropdown menus\n  // chosenLocation and chosenEvent are the choices made from the dropdowns\n  // chosenRoute is dependent upon chosen location (fetch location info with locationId then access .route_id)\n  const [locations, setLocations] = useState([]);\n  // const [routes, setRoutes] = useState([]);\n  const [events, setEvents] = useState([]);\n  const [entries, setEntries] = useState([]);\n  const [chosenLocation, setChosenLocation] = useState(1);\n  // const [chosenRoute, setChosenRoute] = useState(\"\");\n  const [chosenEvent, setChosenEvent] = useState(1);\n  const [chosenDate, setChosenDate] = useState(moment().format(\"YYYY-MM-DD\"));\n\n  // get and sort in alpha order all locations for the dropdown menus and pass them to the form and the log\n  const getLocations = () => {\n    apiManager.getAllType(\"locations\").then((r) => {\n      r.sort((a, b) => a.name.localeCompare(b.name));\n      setLocations(r);\n    });\n  };\n\n  // set choseLocation based on choice from dropdown menu on form and log\n  const handleChosenLocationChange = (e) => {\n    const locationId = e.target.value;\n    setChosenLocation(locationId);\n    setChosenRoute(\"\")\n  };\n\n  // // get and sort in alpha order all routes for the dropdown menus and pass them to the form and the log\n  const getRoutes = () => {\n    apiManager.getAllType(\"routes\").then((r) => {\n      r.sort((a, b) => a.name.localeCompare(b.name));\n      setRoutes(r);\n    });\n  };\n\n  // // set choseroute based on choice from dropdown menu on form and log\n  const handleChosenRouteChange = (e) => {\n    const routeId = parseInt(e.target.value);\n    setChosenRoute(routeId);\n    setChosenLocation(\"\")\n  };\n\n  // get and sort in alpha order all events for the dropdown menus\n  const getEvents = () => {\n    apiManager.getAllType(\"events\").then((r) => {\n      r.sort((a, b) => a.name.localeCompare(b.name));\n      setEvents(r);\n    });\n  };\n\n  // set chosenEvent based on choice from dropdown menu\n  const handleChosenEventChange = (e) => {\n    const eventId = e.target.value;\n    setChosenEvent(eventId);\n  };\n\n  // get all entries then find unique dates for the dropdown menus\n  const getEntries = () => {\n    apiManager.getAllType(\"entries\").then((r) => {\n      r.sort((a, b) => a.date.localeCompare(b.date));\n      setEntries(r);\n    });\n  };\n  const uniqueDates = [...new Set(entries.map((entry) => entry.date))];\n\n  // set chosenDate based on choice from dropdown menu\n  const handleChosenDateChange = (e) => {\n    const dateId = e.target.value;\n    setChosenDate(dateId);\n  };\n\n  // watch for change in chosenlocation and update chosenroute at the same time\n  useEffect(() => {\n    getLocations();\n    getEvents();\n    getEntries();\n    getRoutes();\n  }, []);\n\n  return (\n    <BrowserRouter>\n      <NavBar\n        hasUser={hasUser}\n        clearUser={clearUser}\n      />\n      <Route\n        exact\n        path=\"/\"\n        render={(props) => <Login setUserToken={setUserToken} {...props} />}\n      />\n      <Route\n        exact\n        path=\"/register\"\n        render={(props) => <Register setUserToken={setUserToken} {...props} />}\n      />\n      <Route\n        exact\n        path=\"/entry/form\"\n        render={(props) =>\n          hasUser ? (\n            <EntryForm\n              locations={locations}\n              events={events}\n              chosenLocation={chosenLocation}\n              // chosenRoute={chosenRoute}\n              chosenEvent={chosenEvent}\n              chosenDate={chosenDate}\n              handleChosenLocationChange={handleChosenLocationChange}\n              // handleChosenRouteChange={handleChosenRouteChange}\n              handleChosenEventChange={handleChosenEventChange}\n              handleChosenDateChange={handleChosenDateChange}\n              {...props}\n            />\n          ) : (\n            <Redirect to=\"/\" />\n          )\n        }\n      />\n      <Route\n        exact\n        path=\"/entry/edit/form/:entryId(\\d+)\"\n        render={(props) =>\n          hasUser ? (\n            <EntryEditForm\n              locations={locations}\n              events={events}\n              chosenLocation={chosenLocation}\n              // chosenRoute={chosenRoute}\n              chosenEvent={chosenEvent}\n              chosenDate={chosenDate}\n              handleChosenLocationChange={handleChosenLocationChange}\n              handleChosenEventChange={handleChosenEventChange}\n              handleChosenDateChange={handleChosenDateChange}\n              {...props}\n            />\n          ) : (\n            <Redirect to=\"/\" />\n          )\n        }\n      />\n      <Route\n        exact\n        path=\"/location/log\"\n        render={(props) =>\n          hasUser ? (\n            <LocationLog\n              locations={locations}\n              events={events}\n              entries={entries}\n              getEntries={getEntries}\n              uniqueDates={uniqueDates}\n              chosenLocation={chosenLocation}\n              // chosenRoute={chosenRoute}\n              chosenEvent={chosenEvent}\n              chosenDate={chosenDate}\n              handleChosenLocationChange={handleChosenLocationChange}\n              handleChosenEventChange={handleChosenEventChange}\n              handleChosenDateChange={handleChosenDateChange}\n              {...props}\n            />\n          ) : (\n            <Redirect to=\"/\" />\n          )\n        }\n      />\n      <Route\n        exact\n        path=\"/route/report\"\n        render={(props) =>\n          hasUser ? (\n            <RouteReport\n              locations={locations}\n              events={events}\n              entries={entries}\n              uniqueDates={uniqueDates}\n              chosenLocation={chosenLocation}\n              // chosenRoute={chosenRoute}\n              chosenEvent={chosenEvent}\n              chosenDate={chosenDate}\n              handleChosenLocationChange={handleChosenLocationChange}\n              handleChosenEventChange={handleChosenEventChange}\n              handleChosenDateChange={handleChosenDateChange}\n              {...props}\n            />\n          ) : (\n            <Redirect to=\"/\" />\n          )\n        }\n      />\n    </BrowserRouter>\n  );\n};\n\nexport default EventTranspoTracker;\n"]},"metadata":{},"sourceType":"module"}