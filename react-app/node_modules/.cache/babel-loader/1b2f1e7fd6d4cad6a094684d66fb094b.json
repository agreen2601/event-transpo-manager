{"ast":null,"code":"import baseurl from \"./baseurl\";\nexport default {\n  getAllEntries() {\n    return fetch(`${baseurl}/entries`).then(r => r.json());\n  },\n\n  getSingleEntry(entryId) {\n    return fetch(`${baseurl}/entries/${entryId}`).then(r => r.json());\n  },\n\n  getSingleLocation(locationId) {\n    return fetch(`${baseurl}/locations/${locationId}`).then(r => r.json());\n  },\n\n  getEntriesByLocation(locationId) {\n    return fetch(`${baseurl}/entries?locationID=${locationId}`).then(r => r.json());\n  },\n\n  getEntriesByLocationAndEvent(locationId, eventID) {\n    return fetch(`${baseurl}/entries?locationID=${locationId}&eventID=${eventID}`).then(r => r.json());\n  },\n\n  getAllLocations() {\n    return fetch(`${baseurl}/locations`).then(r => r.json());\n  },\n\n  getAllEvents() {\n    return fetch(`${baseurl}/events`).then(r => r.json());\n  },\n\n  postEntry(newEntry) {\n    return fetch(`${baseurl}/entries`, {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `Token ${window.sessionStorage.getItem(\"token\")}`\n      },\n      body: JSON.stringify(newEntry)\n    }).then(r => r.json());\n  },\n\n  updateEntry(entry) {\n    return fetch(`${baseurl}/entry/${entry.id}`, {\n      method: \"PUT\",\n      headers: {\n        \"content-type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `Token ${window.sessionStorage.getItem(\"token\")}`\n      },\n      body: JSON.stringify(entry)\n    });\n  },\n\n  deleteEntry(id) {\n    return fetch(`${baseurl}/entries/${id}`, {\n      method: \"DELETE\"\n    });\n  },\n\n  register(userToPost) {\n    return fetch(`${baseurl}/register/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(userToPost)\n    }).then(result => result.json());\n  },\n\n  login(userToLogin) {\n    return fetch(`${baseurl}/login/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(userToLogin)\n    }).then(result => result.json());\n  }\n\n};","map":{"version":3,"sources":["/Users/MainTechPiece/workspace/final-capstone-react-app/src/api/apiManager.js"],"names":["baseurl","getAllEntries","fetch","then","r","json","getSingleEntry","entryId","getSingleLocation","locationId","getEntriesByLocation","getEntriesByLocationAndEvent","eventID","getAllLocations","getAllEvents","postEntry","newEntry","method","headers","Accept","Authorization","window","sessionStorage","getItem","body","JSON","stringify","updateEntry","entry","id","deleteEntry","register","userToPost","result","login","userToLogin"],"mappings":"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","sourcesContent":["import baseurl from \"./baseurl\";\n\nexport default {\n  getAllEntries() {\n    return fetch(`${baseurl}/entries`).then((r) => r.json());\n  },\n  getSingleEntry(entryId) {\n    return fetch(`${baseurl}/entries/${entryId}`).then((r) => r.json());\n  },\n  getSingleLocation(locationId) {\n    return fetch(`${baseurl}/locations/${locationId}`).then((r) => r.json());\n  },\n  getEntriesByLocation(locationId) {\n    return fetch(`${baseurl}/entries?locationID=${locationId}`).then((r) =>\n      r.json()\n    );\n  },\n  getEntriesByLocationAndEvent(locationId, eventID) {\n    return fetch(\n      `${baseurl}/entries?locationID=${locationId}&eventID=${eventID}`\n    ).then((r) => r.json());\n  },\n  getAllLocations() {\n    return fetch(`${baseurl}/locations`).then((r) => r.json());\n  },\n  getAllEvents() {\n    return fetch(`${baseurl}/events`).then((r) => r.json());\n  },\n  postEntry(newEntry) {\n    return fetch(`${baseurl}/entries`, {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `Token ${window.sessionStorage.getItem(\"token\")}`,\n      },\n      body: JSON.stringify(newEntry),\n    }).then((r) => r.json());\n  },\n  updateEntry(entry) {\n    return fetch(`${baseurl}/entry/${entry.id}`, {\n      method: \"PUT\",\n      headers: {\n        \"content-type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `Token ${window.sessionStorage.getItem(\"token\")}`,\n      },\n      body: JSON.stringify(entry),\n    });\n  },\n  deleteEntry(id) {\n    return fetch(`${baseurl}/entries/${id}`, {\n      method: \"DELETE\",\n    });\n  },\n  register(userToPost) {\n    return fetch(`${baseurl}/register/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(userToPost),\n    }).then((result) => result.json());\n  },\n  login(userToLogin) {\n    return fetch(`${baseurl}/login/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(userToLogin),\n    }).then((result) => result.json());\n  },\n};\n"]},"metadata":{},"sourceType":"module"}