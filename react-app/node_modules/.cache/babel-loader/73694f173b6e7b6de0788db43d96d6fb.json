{"ast":null,"code":"var _jsxFileName = \"/Users/MainTechPiece/workspace/final-capstone-react-app/src/eventTranspoTracker.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { BrowserRouter, useHistory, Route, Redirect } from \"react-router-dom\";\nimport Nav_Bar from \"./navbar\";\nimport EntryForm from \"./forms/entryForm\";\nimport apiManager from \"./api/apiManager\";\nimport RouteReport from \"./reports/routeReport\";\nimport LocationLog from \"./logs/locationLog\";\nimport Login from \"./auth/login\";\nimport Register from \"./auth/register\";\nimport TestLog from \"./logs/testLog\";\nimport moment from \"moment\";\n\nconst EventTranspoTracker = () => {\n  let history = useHistory();\n\n  const isAuthenticated = () => sessionStorage.getItem(\"token\") !== null;\n\n  const [hasUser, setHasUser] = useState(isAuthenticated());\n  const [userInfo, setUserInfo] = useState({});\n\n  const setUserToken = resp => {\n    sessionStorage.setItem(\"token\", resp.token);\n    setHasUser(isAuthenticated());\n  };\n\n  const clearUser = () => {\n    sessionStorage.clear();\n    setHasUser(isAuthenticated());\n  }; // locations and events are all locations and events to fill the dropdown menus\n  // chosenLocation is the choice made from the dropdown\n  // chosenRoute is dependent upon chosen location (fetch location info with locationId then .route_id)\n  // chosenEvent is the choice made from the dropdown\n\n\n  const [locations, setLocations] = useState([]);\n  const [events, setEvents] = useState([]);\n  const [entries, setEntries] = useState([]);\n  const [chosenLocation, setChosenLocation] = useState(1);\n  const [chosenRoute, setChosenRoute] = useState(\"\");\n  const [chosenEvent, setChosenEvent] = useState(1);\n  const [chosenDate, setChosenDate] = useState(moment().format(\"YYYY-MM-DD\"));\n  let token = window.sessionStorage.getItem(\"token\"); // get and sort in alpha order all locations for the dropdown menus and pass them to the form and the log\n\n  const getLocations = () => {\n    apiManager.getAllLocations(token).then(r => {\n      r.sort((a, b) => a.name.localeCompare(b.name));\n      setLocations(r);\n    });\n  }; // set choseLocation based on choice from dropdown menu on form and log\n\n\n  const handleChosenLocationChange = e => {\n    const locationId = parseInt(e.target.value);\n    setChosenLocation(locationId);\n  }; // set chosenRoute based on chosenLocation and pass it down to the form\n\n\n  const getRouteByLocation = locationId => {\n    apiManager.getSingleLocation(token, locationId).then(r => {\n      setChosenRoute(r.route_id);\n    });\n  }; // get and sort in alpha order all events for the dropdown menus\n\n\n  const getEvents = () => {\n    apiManager.getAllEvents(token).then(r => {\n      r.sort((a, b) => a.name.localeCompare(b.name));\n      setEvents(r);\n    });\n  }; // set chosenEvent based on choice from dropdown menu\n\n\n  const handleChosenEventChange = e => {\n    const eventId = parseInt(e.target.value);\n    setChosenEvent(eventId);\n  }; // get all entries then find unique dates for the dropdown menus\n\n\n  const getEntries = () => {\n    apiManager.getAllEntries(token).then(r => {\n      setEntries(r);\n    });\n  };\n\n  const uniqueDates = [...new Set(entries.map(entry => entry.date))]; // set chosenDate based on choice from dropdown menu\n\n  const handleChosenDateChange = e => {\n    const dateId = e.target.value;\n    setChosenDate(dateId);\n  }; // watch from change in chosenlocation and update chosenroute at the same time\n\n\n  useEffect(() => {\n    getLocations();\n    getEvents();\n    getEntries();\n    getRouteByLocation(chosenLocation);\n  }, [chosenLocation, chosenEvent]);\n  return /*#__PURE__*/React.createElement(BrowserRouter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Nav_Bar, {\n    navArray: hasUser ? [{\n      title: \"Make Entry\",\n      route: \"/entry/form\"\n    }, {\n      title: \"Logs\",\n      route: \"/location/log\"\n    }, {\n      title: \"Reports\",\n      route: \"/route/reports\"\n    }] : [],\n    hasUser: hasUser,\n    clearUser: clearUser,\n    locations: locations,\n    events: events,\n    uniqueDates: uniqueDates,\n    chosenLocation: chosenLocation,\n    chosenRoute: chosenRoute,\n    chosenEvent: chosenEvent,\n    chosenDate: chosenDate,\n    handleChosenLocationChange: handleChosenLocationChange,\n    handleChosenEventChange: handleChosenEventChange,\n    handleChosenDateChange: handleChosenDateChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/login\",\n    render: props => /*#__PURE__*/React.createElement(Login, Object.assign({\n      setUserToken: setUserToken\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 28\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/register\",\n    render: props => /*#__PURE__*/React.createElement(Register, Object.assign({\n      setUserToken: setUserToken\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 28\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/entry/form\",\n    render: props => hasUser ? /*#__PURE__*/React.createElement(EntryForm, Object.assign({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 21\n      }\n    })) : /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 48\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/location/log\",\n    render: props => hasUser ? /*#__PURE__*/React.createElement(LocationLog, Object.assign({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 21\n      }\n    })) : /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 50\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/route/report\",\n    render: props => hasUser ? /*#__PURE__*/React.createElement(RouteReport, Object.assign({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 21\n      }\n    })) : /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 50\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/test/log\",\n    render: props => /*#__PURE__*/React.createElement(TestLog, Object.assign({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 28\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default EventTranspoTracker;","map":{"version":3,"sources":["/Users/MainTechPiece/workspace/final-capstone-react-app/src/eventTranspoTracker.js"],"names":["React","useState","useEffect","BrowserRouter","useHistory","Route","Redirect","Nav_Bar","EntryForm","apiManager","RouteReport","LocationLog","Login","Register","TestLog","moment","EventTranspoTracker","history","isAuthenticated","sessionStorage","getItem","hasUser","setHasUser","userInfo","setUserInfo","setUserToken","resp","setItem","token","clearUser","clear","locations","setLocations","events","setEvents","entries","setEntries","chosenLocation","setChosenLocation","chosenRoute","setChosenRoute","chosenEvent","setChosenEvent","chosenDate","setChosenDate","format","window","getLocations","getAllLocations","then","r","sort","a","b","name","localeCompare","handleChosenLocationChange","e","locationId","parseInt","target","value","getRouteByLocation","getSingleLocation","route_id","getEvents","getAllEvents","handleChosenEventChange","eventId","getEntries","getAllEntries","uniqueDates","Set","map","entry","date","handleChosenDateChange","dateId","title","route","props"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter, useHistory, Route, Redirect } from \"react-router-dom\";\nimport Nav_Bar from \"./navbar\";\nimport EntryForm from \"./forms/entryForm\";\nimport apiManager from \"./api/apiManager\";\nimport RouteReport from \"./reports/routeReport\";\nimport LocationLog from \"./logs/locationLog\";\nimport Login from \"./auth/login\";\nimport Register from \"./auth/register\";\nimport TestLog from \"./logs/testLog\";\nimport moment from \"moment\";\n\nconst EventTranspoTracker = () => {\n  let history = useHistory();\n  const isAuthenticated = () => sessionStorage.getItem(\"token\") !== null;\n  const [hasUser, setHasUser] = useState(isAuthenticated());\n  const [userInfo, setUserInfo] = useState({});\n\n  const setUserToken = (resp) => {\n    sessionStorage.setItem(\"token\", resp.token);\n    setHasUser(isAuthenticated());\n  };\n\n  const clearUser = () => {\n    sessionStorage.clear();\n    setHasUser(isAuthenticated());\n  };\n\n  // locations and events are all locations and events to fill the dropdown menus\n  // chosenLocation is the choice made from the dropdown\n  // chosenRoute is dependent upon chosen location (fetch location info with locationId then .route_id)\n  // chosenEvent is the choice made from the dropdown\n  const [locations, setLocations] = useState([]);\n  const [events, setEvents] = useState([]);\n  const [entries, setEntries] = useState([]);\n  const [chosenLocation, setChosenLocation] = useState(1);\n  const [chosenRoute, setChosenRoute] = useState(\"\");\n  const [chosenEvent, setChosenEvent] = useState(1);\n  const [chosenDate, setChosenDate] = useState(moment().format(\"YYYY-MM-DD\"));\n\n  let token = window.sessionStorage.getItem(\"token\");\n\n  // get and sort in alpha order all locations for the dropdown menus and pass them to the form and the log\n  const getLocations = () => {\n    apiManager.getAllLocations(token).then((r) => {\n      r.sort((a, b) => a.name.localeCompare(b.name));\n      setLocations(r);\n    });\n  };\n\n  // set choseLocation based on choice from dropdown menu on form and log\n  const handleChosenLocationChange = (e) => {\n    const locationId = parseInt(e.target.value);\n    setChosenLocation(locationId);\n  };\n\n  // set chosenRoute based on chosenLocation and pass it down to the form\n  const getRouteByLocation = (locationId) => {\n    apiManager.getSingleLocation(token, locationId).then((r) => {\n      setChosenRoute(r.route_id);\n    });\n  };\n\n  // get and sort in alpha order all events for the dropdown menus\n  const getEvents = () => {\n    apiManager.getAllEvents(token).then((r) => {\n      r.sort((a, b) => a.name.localeCompare(b.name));\n      setEvents(r);\n    });\n  };\n\n  // set chosenEvent based on choice from dropdown menu\n  const handleChosenEventChange = (e) => {\n    const eventId = parseInt(e.target.value);\n    setChosenEvent(eventId);\n  };\n\n  // get all entries then find unique dates for the dropdown menus\n  const getEntries = () => {\n    apiManager.getAllEntries(token).then((r) => {\n      setEntries(r);\n    });\n  };\n  const uniqueDates = [...new Set(entries.map((entry) => entry.date))];\n\n  // set chosenDate based on choice from dropdown menu\n  const handleChosenDateChange = (e) => {\n    const dateId = e.target.value;\n    setChosenDate(dateId);\n  };\n\n  // watch from change in chosenlocation and update chosenroute at the same time\n  useEffect(() => {\n    getLocations();\n    getEvents();\n    getEntries();\n    getRouteByLocation(chosenLocation);\n  }, [chosenLocation, chosenEvent]);\n\n  return (\n    <BrowserRouter>\n      <Nav_Bar\n        navArray={\n          hasUser\n            ? [\n                { title: \"Make Entry\", route: \"/entry/form\" },\n                { title: \"Logs\", route: \"/location/log\" },\n                { title: \"Reports\", route: \"/route/reports\" },\n              ]\n            : []\n        }\n        hasUser={hasUser}\n        clearUser={clearUser}\n        locations={locations}\n        events={events}\n        uniqueDates={uniqueDates}\n        chosenLocation={chosenLocation}\n        chosenRoute={chosenRoute}\n        chosenEvent={chosenEvent}\n        chosenDate={chosenDate}\n        handleChosenLocationChange={handleChosenLocationChange}\n        handleChosenEventChange={handleChosenEventChange}\n        handleChosenDateChange={handleChosenDateChange}\n      />\n      <Route\n        exact\n        path=\"/login\"\n        render={(props) => <Login setUserToken={setUserToken} {...props} />}\n      />\n      <Route\n        exact\n        path=\"/register\"\n        render={(props) => <Register setUserToken={setUserToken} {...props} />}\n      />\n      <Route\n        exact\n        path=\"/entry/form\"\n        render={(props) =>\n          hasUser ? <EntryForm {...props} /> : <Redirect to=\"/login\" />\n        }\n      />\n      <Route\n        exact\n        path=\"/location/log\"\n        render={(props) =>\n          hasUser ? <LocationLog {...props} /> : <Redirect to=\"/login\" />\n        }\n      />\n      <Route\n        exact\n        path=\"/route/report\"\n        render={(props) =>\n          hasUser ? <RouteReport {...props} /> : <Redirect to=\"/login\" />\n        }\n      />\n      <Route\n        exact\n        path=\"/test/log\"\n        render={(props) => <TestLog {...props} />}\n      />\n    </BrowserRouter>\n  );\n};\n\nexport default EventTranspoTracker;\n"]},"metadata":{},"sourceType":"module"}