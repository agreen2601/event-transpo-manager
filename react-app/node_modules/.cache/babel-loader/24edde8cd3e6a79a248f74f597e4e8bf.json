{"ast":null,"code":"var _jsxFileName = \"/Users/MainTechPiece/workspace/final-capstone-react-app/src/logs/locationLog.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Paper from \"@material-ui/core/Paper\";\nimport DeleteOutlinedIcon from \"@material-ui/icons/DeleteOutlined\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport apiManager from \"../api/apiManager\";\n\nconst LocationLog = props => {\n  const locations = props.locations; // const routes = props.routes;\n\n  const events = props.events;\n  const dates = props.uniqueDates;\n  const chosenLocation = props.chosenLocation; // const chosenRoute = props.chosenRoute;\n\n  const chosenEvent = props.chosenEvent;\n  const chosenDate = props.chosenDate;\n  const handleChosenLocationChange = props.handleChosenLocationChange; // const handleChosenRouteChange = props.handleChosenRouteChange;\n\n  const handleChosenEventChange = props.handleChosenEventChange;\n  const handleChosenDateChange = props.handleChosenDateChange;\n  const [entries, setEntries] = useState([]);\n  const [allEntries, setAllEntries] = useState([]); // get entries based on location and event chosen from dropdowns, filter by date, then sort by time\n\n  const getEntries = (locationId, eventId) => {\n    apiManager.getEntriesByLocationAndEvent(locationId, eventId).then(r => {\n      setEntries(r);\n    });\n  };\n\n  const entriesByDate = entries.filter(entry => entry.date.includes(chosenDate)).sort((a, b) => a.time.localeCompare(b.time));\n  let filteredEntries = [];\n\n  const getAllEntries = () => {\n    apiManager.getAllType(\"entries\").then(r => {\n      r.sort((a, b) => a.date.localeCompare(b.date));\n      setAllEntries(r);\n    });\n  };\n\n  console.log(allEntries.filter(each => each.event_id == chosenEvent));\n  let totalAttendeeCount = 0;\n\n  if (entriesByDate.length !== 0) {\n    totalAttendeeCount = entriesByDate.map(entry => entry.attendee_count).reduce((accumulator, runningTotal) => accumulator + runningTotal);\n  }\n\n  const deleteThisEntry = id => {\n    const check = window.confirm(\"Are you sure you want to delete this entry? Deletion cannot be undone.\");\n\n    if (check === true) {\n      apiManager.deleteEntry(id).then(() => {\n        getEntries(props.chosenLocation, props.chosenEvent);\n      });\n    }\n  };\n\n  useEffect(() => {\n    getAllEntries();\n    getEntries(props.chosenLocation, props.chosenEvent);\n  }, [props.chosenLocation, props.chosenEvent]);\n  let routeName = \"\";\n  let routeDescription = \"\";\n  let routeColor = \"\";\n\n  if (entries.length !== 0) {\n    routeName = entries[0].location.route.name;\n    routeDescription = entries[0].location.route.description;\n    routeColor = entries[0].location.route.color;\n  }\n\n  const routeStyle = {\n    color: routeColor\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    component: \"h1\",\n    variant: \"h5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, \"Location Logs\"), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }, \"Event:\"), /*#__PURE__*/React.createElement(Select, {\n    id: \"eventId\",\n    native: true,\n    onChange: handleChosenEventChange,\n    fullWidth: true,\n    required: true,\n    value: chosenEvent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, events ? events.map(event => /*#__PURE__*/React.createElement(\"option\", {\n    key: event.id,\n    value: parseInt(event.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 19\n    }\n  }, event.name)) : /*#__PURE__*/React.createElement(React.Fragment, null))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  }, \"Location:\"), /*#__PURE__*/React.createElement(Select, {\n    id: \"locationId\",\n    native: true,\n    onChange: handleChosenLocationChange,\n    fullWidth: true,\n    required: true,\n    value: chosenLocation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }\n  }, locations ? locations.map(location => /*#__PURE__*/React.createElement(\"option\", {\n    key: location.id,\n    value: parseInt(location.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 19\n    }\n  }, location.name)) : /*#__PURE__*/React.createElement(React.Fragment, null))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }\n  }, \"Date:\"), /*#__PURE__*/React.createElement(Select, {\n    id: \"dateId\",\n    native: true,\n    onChange: handleChosenDateChange,\n    fullWidth: true,\n    required: true,\n    value: chosenDate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    \"aria-label\": \"None\",\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 15\n    }\n  }, \"All Dates\"), dates ? dates.map(date => /*#__PURE__*/React.createElement(\"option\", {\n    key: date,\n    value: date,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 19\n    }\n  }, date)) : /*#__PURE__*/React.createElement(React.Fragment, null))))), /*#__PURE__*/React.createElement(\"div\", {\n    style: routeStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }\n  }, \"Route \", routeName, \" \", routeDescription), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }\n  }, totalAttendeeCount, \" attendees moved in \", entriesByDate.length, \" trips.\"), /*#__PURE__*/React.createElement(TableContainer, {\n    component: Paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    size: \"small\",\n    \"aria-label\": \"a dense table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 15\n    }\n  }, \"Time\"), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 15\n    }\n  }, \"Vehicle #\"), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 15\n    }\n  }, \"Attendee Count\"), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 15\n    }\n  }, \"Entered By\"), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 15\n    }\n  }, \"Actions\"))), /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 11\n    }\n  }, entriesByDate.map(entry => /*#__PURE__*/React.createElement(TableRow, {\n    key: entry.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    component: \"th\",\n    scope: \"entry\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 17\n    }\n  }, entry.time.slice(0, -3)), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 17\n    }\n  }, entry.vehicle_number), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 17\n    }\n  }, entry.attendee_count), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 17\n    }\n  }, entry.user.first_name, \" \", entry.user.last_name), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 17\n    }\n  }, window.sessionStorage.getItem(\"userID\") == entry.user_id ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(EditIcon, {\n    onClick: () => props.history.push(`/entry/edit/form/${entry.id}`),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(DeleteOutlinedIcon, {\n    onClick: () => deleteThisEntry(entry.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 23\n    }\n  })) : null)))))));\n};\n\nexport default LocationLog;","map":{"version":3,"sources":["/Users/MainTechPiece/workspace/final-capstone-react-app/src/logs/locationLog.js"],"names":["React","useState","useEffect","Grid","InputLabel","Select","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Typography","Paper","DeleteOutlinedIcon","EditIcon","apiManager","LocationLog","props","locations","events","dates","uniqueDates","chosenLocation","chosenEvent","chosenDate","handleChosenLocationChange","handleChosenEventChange","handleChosenDateChange","entries","setEntries","allEntries","setAllEntries","getEntries","locationId","eventId","getEntriesByLocationAndEvent","then","r","entriesByDate","filter","entry","date","includes","sort","a","b","time","localeCompare","filteredEntries","getAllEntries","getAllType","console","log","each","event_id","totalAttendeeCount","length","map","attendee_count","reduce","accumulator","runningTotal","deleteThisEntry","id","check","window","confirm","deleteEntry","routeName","routeDescription","routeColor","location","route","name","description","color","routeStyle","event","parseInt","slice","vehicle_number","user","first_name","last_name","sessionStorage","getItem","user_id","history","push"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Paper from \"@material-ui/core/Paper\";\nimport DeleteOutlinedIcon from \"@material-ui/icons/DeleteOutlined\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport apiManager from \"../api/apiManager\";\n\nconst LocationLog = (props) => {\n  const locations = props.locations;\n  // const routes = props.routes;\n  const events = props.events;\n  const dates = props.uniqueDates;\n  const chosenLocation = props.chosenLocation;\n  // const chosenRoute = props.chosenRoute;\n  const chosenEvent = props.chosenEvent;\n  const chosenDate = props.chosenDate;\n  const handleChosenLocationChange = props.handleChosenLocationChange;\n  // const handleChosenRouteChange = props.handleChosenRouteChange;\n  const handleChosenEventChange = props.handleChosenEventChange;\n  const handleChosenDateChange = props.handleChosenDateChange;\n  const [entries, setEntries] = useState([]);\n  const [allEntries, setAllEntries] = useState([]);\n\n  // get entries based on location and event chosen from dropdowns, filter by date, then sort by time\n  const getEntries = (locationId, eventId) => {\n    apiManager.getEntriesByLocationAndEvent(locationId, eventId).then((r) => {\n      setEntries(r);\n    });\n  };\n  const entriesByDate = entries\n    .filter((entry) => entry.date.includes(chosenDate))\n    .sort((a, b) => a.time.localeCompare(b.time));\n\n  let filteredEntries = [];\n\n  const getAllEntries = () => {\n    apiManager.getAllType(\"entries\").then((r) => {\n      r.sort((a, b) => a.date.localeCompare(b.date));\n      setAllEntries(r);\n    });\n  };\n\n  console.log(allEntries.filter((each) => (each.event_id == chosenEvent)));\n\n  let totalAttendeeCount = 0;\n  if (entriesByDate.length !== 0) {\n    totalAttendeeCount = entriesByDate\n      .map((entry) => entry.attendee_count)\n      .reduce((accumulator, runningTotal) => accumulator + runningTotal);\n  }\n\n  const deleteThisEntry = (id) => {\n    const check = window.confirm(\n      \"Are you sure you want to delete this entry? Deletion cannot be undone.\"\n    );\n    if (check === true) {\n      apiManager.deleteEntry(id).then(() => {\n        getEntries(props.chosenLocation, props.chosenEvent);\n      });\n    }\n  };\n\n  useEffect(() => {\n    getAllEntries();\n    getEntries(props.chosenLocation, props.chosenEvent);\n  }, [props.chosenLocation, props.chosenEvent]);\n\n  let routeName = \"\";\n  let routeDescription = \"\";\n  let routeColor = \"\";\n  if (entries.length !== 0) {\n    routeName = entries[0].location.route.name;\n    routeDescription = entries[0].location.route.description;\n    routeColor = entries[0].location.route.color;\n  }\n\n  const routeStyle = {\n    color: routeColor,\n  };\n\n  return (\n    <>\n      <div>\n        <Typography component=\"h1\" variant=\"h5\">\n          Location Logs\n        </Typography>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={3}>\n            <InputLabel>Event:</InputLabel>\n            <Select\n              id=\"eventId\"\n              native\n              onChange={handleChosenEventChange}\n              fullWidth\n              required\n              value={chosenEvent}\n            >\n              {events ? (\n                events.map((event) => (\n                  <option key={event.id} value={parseInt(event.id)}>\n                    {event.name}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel>Location:</InputLabel>\n            <Select\n              id=\"locationId\"\n              native\n              onChange={handleChosenLocationChange}\n              fullWidth\n              required\n              value={chosenLocation}\n            >\n              {locations ? (\n                locations.map((location) => (\n                  <option key={location.id} value={parseInt(location.id)}>\n                    {location.name}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n          {/* <Grid item xs={12} md={3}>\n            <InputLabel>Route:</InputLabel>\n            <Select\n              id=\"routeId\"\n              native\n              onChange={handleChosenRouteChange}\n              fullWidth\n              required\n              value={chosenRoute}\n            >\n              {routes ? (\n                routes.map((route) => (\n                  <option key={route.id} value={parseInt(route.id)}>\n                    {route.name}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid> */}\n          <Grid item xs={12} md={3}>\n            <InputLabel>Date:</InputLabel>\n            <Select\n              id=\"dateId\"\n              native\n              onChange={handleChosenDateChange}\n              fullWidth\n              required\n              value={chosenDate}\n            >\n              <option aria-label=\"None\" value=\"\">\n                All Dates\n              </option>\n              {dates ? (\n                dates.map((date) => (\n                  <option key={date} value={date}>\n                    {date}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n        </Grid>\n      </div>\n      <div style={routeStyle}>\n        Route {routeName} {routeDescription}\n      </div>\n      <Typography variant=\"h6\">\n        {totalAttendeeCount} attendees moved in {entriesByDate.length} trips.\n      </Typography>\n      <TableContainer component={Paper}>\n        <Table size=\"small\" aria-label=\"a dense table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>Time</TableCell>\n              <TableCell align=\"right\">Vehicle #</TableCell>\n              <TableCell align=\"right\">Attendee Count</TableCell>\n              <TableCell align=\"right\">Entered By</TableCell>\n              <TableCell align=\"right\">Actions</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {entriesByDate.map((entry) => (\n              <TableRow key={entry.id}>\n                <TableCell component=\"th\" scope=\"entry\">\n                  {entry.time.slice(0, -3)}\n                </TableCell>\n                <TableCell align=\"right\">{entry.vehicle_number}</TableCell>\n                <TableCell align=\"right\">{entry.attendee_count}</TableCell>\n                <TableCell align=\"right\">\n                  {entry.user.first_name} {entry.user.last_name}\n                </TableCell>\n                <TableCell align=\"right\">\n                  {window.sessionStorage.getItem(\"userID\") == entry.user_id ? (\n                    <>\n                      <EditIcon\n                        onClick={() =>\n                          props.history.push(`/entry/edit/form/${entry.id}`)\n                        }\n                      />\n                      <DeleteOutlinedIcon\n                        onClick={() => deleteThisEntry(entry.id)}\n                      />\n                    </>\n                  ) : null}\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </>\n  );\n};\n\nexport default LocationLog;\n"]},"metadata":{},"sourceType":"module"}