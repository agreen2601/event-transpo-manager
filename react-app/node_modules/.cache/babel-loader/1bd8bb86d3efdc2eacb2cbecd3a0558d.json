{"ast":null,"code":"var _jsxFileName = \"/Users/MainTechPiece/workspace/event-transpo-manager/react-app/src/routeView/routeCard.js\";\nimport React, { useEffect, useState } from \"../../node_modules/react\";\nimport apiManager from \"../api/apiManager\";\nimport AssignmentCard from \"./assignmentCard\"; // import { IoIosStarOutline } from \"react-icons/io\";\n// import { IoIosStar } from \"react-icons/io\";\n// import { IoMdAddCircleOutline } from \"react-icons/io\";\n\nconst RouteCard = props => {\n  const [assignments, setAssignments] = useState([]); // const filteredAssignments = assignments.filter((each) =>\n  //   each.vehicle.number.includes(props.match.params.vehNum)\n  // );\n\n  useEffect(() => {\n    apiManager.getAssignmentsByDateRoute(1, 1).then(r => {\n      setAssignments(r);\n    });\n  }, []);\n  console.log(assignments); // const [assignments, setAssignments] = useState([]);\n\n  const [favoriteRouteIDs, setFavoriteRouteIDs] = useState([]);\n  const [favId, setFavId] = useState([]);\n  const [favorite, setFavorite] = useState({\n    userId: parseInt(sessionStorage.getItem(\"userId\")),\n    routeId: props.route.id\n  });\n  const userId = sessionStorage.getItem(\"userId\");\n\n  const getFavoriteRoutes = userID => {\n    apiManager.getFavorites(userID).then(favs => {\n      const match = favs.find(fav => fav.routeId === props.route.id);\n\n      if (match !== undefined) {\n        setFavoriteRouteIDs(match.routeId);\n        setFavId(match.id);\n      }\n    });\n  };\n\n  getFavoriteRoutes(userId); // const getAssignments = (dateId, routeId) => {\n  //   apiManager.getAssignmentsByDateRoute(dateId, routeId).then((APIResult) => {\n  //     setAssignments(APIResult);\n  //   });\n  // };\n\n  const removeAssignment = (type, id, dateId, routeId) => {\n    apiManager.deleteTypeWithId(type, id).then(() => apiManager.getAssignmentsByDateRoute(dateId, routeId).then(APIResult => {\n      setAssignments(APIResult);\n    }));\n  };\n\n  const star = () => {\n    apiManager.addType(\"favoriteRoutes\", favorite).then(APIResult => {\n      setFavorite(APIResult);\n    });\n    getFavoriteRoutes(userId);\n  };\n\n  const unStar = () => {\n    apiManager.deleteTypeWithId(\"favoriteRoutes\", favId);\n    getFavoriteRoutes(userId);\n  }; // useEffect(() => {\n  //   getAssignments(props.date.id, props.route.id);\n  // }, [props.date.id, props.route.id, userId]);\n  // const routeHeader = {\n  //   color: props.route.color,\n  //   fontSize: \"larger\",\n  //   fontWeight: 600,\n  //   marginRight: \"20px\"\n  // };\n  // const routeBorder = {\n  //   borderColor: props.route.color\n  // };\n  // let routeNumber = props.route.number;\n  // if (props.route.number.startsWith(\"0\")) {\n  //   routeNumber = props.route.number.split(\"0\")[1];\n  // }\n\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"route_heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }, \"Route\"), favoriteRouteIDs.length !== 0 ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"route_icon\",\n    \"id-\": \"unStar\",\n    onClick: unStar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }, \"unstar\") : null, favoriteRouteIDs.length === 0 ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"route_icon\",\n    id: \"star\",\n    onClick: star,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }, \"star\") : null), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"add_driver_icon\",\n    onClick: () => props.history.push(`/add/${props.route.id}`),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }, \"add driver\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  }, assignments.map(assignment => /*#__PURE__*/React.createElement(AssignmentCard, Object.assign({\n    key: assignment.id,\n    assignment: assignment,\n    removeAssignment: removeAssignment\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  }))))));\n};\n\nexport default RouteCard;","map":{"version":3,"sources":["/Users/MainTechPiece/workspace/event-transpo-manager/react-app/src/routeView/routeCard.js"],"names":["React","useEffect","useState","apiManager","AssignmentCard","RouteCard","props","assignments","setAssignments","getAssignmentsByDateRoute","then","r","console","log","favoriteRouteIDs","setFavoriteRouteIDs","favId","setFavId","favorite","setFavorite","userId","parseInt","sessionStorage","getItem","routeId","route","id","getFavoriteRoutes","userID","getFavorites","favs","match","find","fav","undefined","removeAssignment","type","dateId","deleteTypeWithId","APIResult","star","addType","unStar","length","history","push","map","assignment"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"../../node_modules/react\";\nimport apiManager from \"../api/apiManager\";\nimport AssignmentCard from \"./assignmentCard\";\n// import { IoIosStarOutline } from \"react-icons/io\";\n// import { IoIosStar } from \"react-icons/io\";\n// import { IoMdAddCircleOutline } from \"react-icons/io\";\n\nconst RouteCard = (props) => {\n\n    const [assignments, setAssignments] = useState([]);\n  \n    // const filteredAssignments = assignments.filter((each) =>\n    //   each.vehicle.number.includes(props.match.params.vehNum)\n    // );\n  \n    useEffect(() => {\n      apiManager\n        .getAssignmentsByDateRoute(1, 1)\n        .then((r) => {\n          setAssignments(r);\n        });\n    }, []);\n\n    console.log(assignments)\n\n\n\n\n\n  // const [assignments, setAssignments] = useState([]);\n  const [favoriteRouteIDs, setFavoriteRouteIDs] = useState([]);\n  const [favId, setFavId] = useState([]);\n  const [favorite, setFavorite] = useState({\n    userId: parseInt(sessionStorage.getItem(\"userId\")),\n    routeId: props.route.id,\n  });\n  const userId = sessionStorage.getItem(\"userId\");\n\n  const getFavoriteRoutes = (userID) => {\n    apiManager.getFavorites(userID).then((favs) => {\n      const match = favs.find((fav) => fav.routeId === props.route.id);\n      if (match !== undefined) {\n        setFavoriteRouteIDs(match.routeId);\n        setFavId(match.id);\n      }\n    });\n  };\n\n  getFavoriteRoutes(userId);\n\n  // const getAssignments = (dateId, routeId) => {\n  //   apiManager.getAssignmentsByDateRoute(dateId, routeId).then((APIResult) => {\n  //     setAssignments(APIResult);\n  //   });\n  // };\n\n  const removeAssignment = (type, id, dateId, routeId) => {\n    apiManager.deleteTypeWithId(type, id).then(() =>\n      apiManager\n        .getAssignmentsByDateRoute(dateId, routeId)\n        .then((APIResult) => {\n          setAssignments(APIResult);\n        })\n    );\n  };\n\n  const star = () => {\n    apiManager.addType(\"favoriteRoutes\", favorite).then((APIResult) => {\n      setFavorite(APIResult);\n    });\n    getFavoriteRoutes(userId);\n  };\n\n  const unStar = () => {\n    apiManager.deleteTypeWithId(\"favoriteRoutes\", favId);\n    getFavoriteRoutes(userId);\n  };\n\n  // useEffect(() => {\n  //   getAssignments(props.date.id, props.route.id);\n  // }, [props.date.id, props.route.id, userId]);\n\n  // const routeHeader = {\n  //   color: props.route.color,\n  //   fontSize: \"larger\",\n  //   fontWeight: 600,\n  //   marginRight: \"20px\"\n  // };\n\n  // const routeBorder = {\n  //   borderColor: props.route.color\n  // };\n\n  // let routeNumber = props.route.number;\n  // if (props.route.number.startsWith(\"0\")) {\n  //   routeNumber = props.route.number.split(\"0\")[1];\n  // }\n\n  return (\n    <>\n      {/* <div style={routeBorder} className=\"route_border\"> */}\n      <div>\n        <div className=\"route_heading\">\n          {/* <span style={routeHeader}>Route {routeNumber} </span> */}\n          <span>Route</span>\n          {/* <span className=\"assigned\">\n            ({assignments.length} assigned -{\"\\u00A0\"}\n            {props.route.numOfVehNeeded - assignments.length} needed)\n          </span> */}\n          {favoriteRouteIDs.length !== 0 ? (\n            <span className=\"route_icon\" id-=\"unStar\" onClick={unStar}>\n              unstar\n            </span>\n          ) : null}\n          {favoriteRouteIDs.length === 0 ? (\n            <span className=\"route_icon\" id=\"star\" onClick={star}>\n              star\n            </span>\n          ) : null}\n        </div>\n        <span\n          className=\"add_driver_icon\"\n          onClick={() => props.history.push(`/add/${props.route.id}`)}\n        >\n          add driver\n        </span>\n        <div>\n          {assignments.map((assignment) => (\n            <AssignmentCard\n              key={assignment.id}\n              assignment={assignment}\n              removeAssignment={removeAssignment}\n              {...props}\n            />\n          ))}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default RouteCard;\n"]},"metadata":{},"sourceType":"module"}