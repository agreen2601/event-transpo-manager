{"ast":null,"code":"var _jsxFileName = \"/Users/MainTechPiece/workspace/event-transpo-manager/react-app/src/reports/routeReport.js\";\nimport React, { useEffect } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport Typography from \"@material-ui/core/Typography\";\nimport RouteGraph from \"./routeGraph\";\n\nconst RouteReport = props => {\n  const locations = props.locations;\n  const routes = props.routes;\n  const events = props.events;\n  const dates = props.dates;\n  const chosenLocationId = props.chosenLocationId;\n  const chosenLocationName = props.chosenLocationName;\n  const chosenRoute = props.chosenRoute;\n  const chosenEventId = props.chosenEventId;\n  const chosenEventName = props.chosenEventName;\n  const chosenDateId = props.chosenDateId;\n  const chosenDateName = props.chosenDateName;\n  const handleChosenLocationChange = props.handleChosenLocationChange;\n  const handleChosenRouteChange = props.handleChosenRouteChange;\n  const handleChosenEventChange = props.handleChosenEventChange;\n  const handleChosenDateChange = props.handleChosenDateChange;\n  const allEntries = props.entries;\n  const getEntries = props.getEntries; // filter entries based on dropdowns\n\n  const filteredEntries = allEntries.filter(each1 => each1.shuttle.name.includes(chosenEventName)).filter(each2 => each2.place.name.includes(chosenLocationName)).filter(each3 => each3.place.route.name.includes(chosenRoute)).filter(each4 => each4.date.includes(chosenDateName)).sort((a, b) => a.time.localeCompare(b.time)).sort((a, b) => a.date.localeCompare(b.date));\n  console.log(chosenDateId, chosenDateName);\n  let totalAttendeeCount = 0;\n\n  if (filteredEntries.length !== 0) {\n    totalAttendeeCount = filteredEntries.map(entry => entry.attendee_count).reduce((accumulator, runningTotal) => accumulator + runningTotal);\n  }\n\n  useEffect(() => {\n    getEntries();\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Typography, {\n    component: \"h1\",\n    variant: \"h5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, \"Route Reports\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"drop-downs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }, \"Date:\"), /*#__PURE__*/React.createElement(Select, {\n    id: \"dateId\",\n    native: true,\n    onChange: handleChosenDateChange,\n    fullWidth: true,\n    required: true,\n    label: \"??\",\n    value: chosenDateId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    \"aria-label\": \"None\",\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 15\n    }\n  }, \"Choose Date\"), dates ? dates.map(date => /*#__PURE__*/React.createElement(\"option\", {\n    key: date.id,\n    value: date.date,\n    \"data-name\": date.date,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 19\n    }\n  }, date.date)) : /*#__PURE__*/React.createElement(React.Fragment, null))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }, \"Event:\"), /*#__PURE__*/React.createElement(Select, {\n    id: \"eventId\",\n    native: true,\n    onChange: handleChosenEventChange,\n    fullWidth: true,\n    required: true,\n    label: \"??\",\n    value: chosenEventId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    \"aria-label\": \"None\",\n    value: \"\",\n    \"data-name\": \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 15\n    }\n  }, \"All Events\"), events ? events.map(event => /*#__PURE__*/React.createElement(\"option\", {\n    key: event.id,\n    value: parseInt(event.id),\n    \"data-name\": event.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 19\n    }\n  }, event.name)) : /*#__PURE__*/React.createElement(React.Fragment, null))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }, \"Route:\"), /*#__PURE__*/React.createElement(Select, {\n    id: \"routeId\",\n    native: true,\n    onChange: handleChosenRouteChange,\n    fullWidth: true,\n    required: true,\n    value: chosenRoute,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    \"aria-label\": \"None\",\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 15\n    }\n  }, \"All Routes\"), routes ? routes.map(route => /*#__PURE__*/React.createElement(\"option\", {\n    key: route.id,\n    value: route.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 19\n    }\n  }, route.name, \" \", route.description)) : /*#__PURE__*/React.createElement(React.Fragment, null))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }, \"Location:\"), /*#__PURE__*/React.createElement(Select, {\n    id: \"placeId\",\n    native: true,\n    onChange: handleChosenLocationChange,\n    fullWidth: true,\n    required: true,\n    label: \"??\",\n    value: chosenLocationId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    \"aria-label\": \"None\",\n    value: \"\",\n    \"data-name\": \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 15\n    }\n  }, \"All Locations\"), locations ? locations.map(place => /*#__PURE__*/React.createElement(\"option\", {\n    key: place.id,\n    value: parseInt(place.id),\n    \"data-name\": place.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 19\n    }\n  }, place.name)) : /*#__PURE__*/React.createElement(React.Fragment, null))))), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }\n  }, totalAttendeeCount, \" attendees moved in \", filteredEntries.length, \" trips.\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(RouteGraph, Object.assign({\n    filteredEntries: filteredEntries,\n    chosenRoute: chosenRoute,\n    chosenLocationId: chosenLocationId,\n    getEntries: getEntries\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 9\n    }\n  }))));\n};\n\nexport default RouteReport;","map":{"version":3,"sources":["/Users/MainTechPiece/workspace/event-transpo-manager/react-app/src/reports/routeReport.js"],"names":["React","useEffect","Grid","InputLabel","Select","Typography","RouteGraph","RouteReport","props","locations","routes","events","dates","chosenLocationId","chosenLocationName","chosenRoute","chosenEventId","chosenEventName","chosenDateId","chosenDateName","handleChosenLocationChange","handleChosenRouteChange","handleChosenEventChange","handleChosenDateChange","allEntries","entries","getEntries","filteredEntries","filter","each1","shuttle","name","includes","each2","place","each3","route","each4","date","sort","a","b","time","localeCompare","console","log","totalAttendeeCount","length","map","entry","attendee_count","reduce","accumulator","runningTotal","id","event","parseInt","description"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport Typography from \"@material-ui/core/Typography\";\nimport RouteGraph from \"./routeGraph\";\n\nconst RouteReport = (props) => {\n  const locations = props.locations;\n  const routes = props.routes;\n  const events = props.events;\n  const dates = props.dates;\n  const chosenLocationId = props.chosenLocationId;\n  const chosenLocationName = props.chosenLocationName;\n  const chosenRoute = props.chosenRoute;\n  const chosenEventId = props.chosenEventId;\n  const chosenEventName = props.chosenEventName;\n  const chosenDateId = props.chosenDateId;\n  const chosenDateName = props.chosenDateName\n  const handleChosenLocationChange = props.handleChosenLocationChange;\n  const handleChosenRouteChange = props.handleChosenRouteChange;\n  const handleChosenEventChange = props.handleChosenEventChange;\n  const handleChosenDateChange = props.handleChosenDateChange;\n  const allEntries = props.entries;\n  const getEntries = props.getEntries;\n\n  // filter entries based on dropdowns\n  const filteredEntries = allEntries\n  .filter((each1) => each1.shuttle.name.includes(chosenEventName))\n  .filter((each2) => each2.place.name.includes(chosenLocationName))\n  .filter((each3) => each3.place.route.name.includes(chosenRoute))\n  .filter((each4) => each4.date.includes(chosenDateName))\n  .sort((a, b) => a.time.localeCompare(b.time))\n  .sort((a, b) => a.date.localeCompare(b.date));\n\n  console.log(chosenDateId, chosenDateName);\n\n  let totalAttendeeCount = 0;\n  if (filteredEntries.length !== 0) {\n    totalAttendeeCount = filteredEntries\n      .map((entry) => entry.attendee_count)\n      .reduce((accumulator, runningTotal) => accumulator + runningTotal);\n  }\n\n  useEffect(() => {\n    getEntries();\n  }, []);\n\n  return (\n    <>\n      <Typography component=\"h1\" variant=\"h5\">\n        Route Reports\n      </Typography>\n      <div className=\"drop-downs\">\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={3}>\n            <InputLabel>Date:</InputLabel>\n            <Select\n              id=\"dateId\"\n              native\n              onChange={handleChosenDateChange}\n              fullWidth\n              required\n              label=\"??\"\n              value={chosenDateId}\n            >\n              <option aria-label=\"None\" value=\"\">\n                Choose Date\n              </option>\n              {dates ? (\n                dates.map((date) => (\n                  <option key={date.id} value={date.date} data-name={date.date}>\n                    {date.date}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel>Event:</InputLabel>\n            <Select\n              id=\"eventId\"\n              native\n              onChange={handleChosenEventChange}\n              fullWidth\n              required\n              label=\"??\"\n              value={chosenEventId}\n            >\n              <option aria-label=\"None\" value=\"\" data-name=\"\">\n                All Events\n              </option>\n              {events ? (\n                events.map((event) => (\n                  <option key={event.id} value={parseInt(event.id)} data-name={event.name}>\n                    {event.name}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel>Route:</InputLabel>\n            <Select\n              id=\"routeId\"\n              native\n              onChange={handleChosenRouteChange}\n              fullWidth\n              required\n              value={chosenRoute}\n            >\n              <option aria-label=\"None\" value=\"\">\n                All Routes\n              </option>\n              {routes ? (\n                routes.map((route) => (\n                  <option key={route.id} value={route.name}>\n                    {route.name} {route.description}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel>Location:</InputLabel>\n            <Select\n              id=\"placeId\"\n              native\n              onChange={handleChosenLocationChange}\n              fullWidth\n              required\n              label=\"??\"\n              value={chosenLocationId}\n            >\n              <option aria-label=\"None\" value=\"\" data-name=\"\">\n                All Locations\n              </option>\n              {locations ? (\n                locations.map((place) => (\n                  <option key={place.id} value={parseInt(place.id)} data-name={place.name}>\n                    {place.name}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n        </Grid>\n      </div>\n      <Typography variant=\"h6\">\n        {totalAttendeeCount} attendees moved in {filteredEntries.length} trips.\n      </Typography>\n      <div>\n        <RouteGraph\n          filteredEntries={filteredEntries}\n          chosenRoute={chosenRoute}\n          chosenLocationId={chosenLocationId}\n          getEntries={getEntries}\n          {...props}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default RouteReport;\n"]},"metadata":{},"sourceType":"module"}