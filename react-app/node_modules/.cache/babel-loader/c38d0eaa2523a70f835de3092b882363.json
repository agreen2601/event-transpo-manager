{"ast":null,"code":"var _jsxFileName = \"/Users/MainTechPiece/workspace/final-capstone-react-app/src/forms/entryEditForm.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport Typography from \"@material-ui/core/Typography\";\nimport apiManager from \"../api/apiManager\";\nimport moment from \"moment\"; // \"locations\" and \"events\" fill the dropdowns, both \"handle...change\"s change the 3 \"chosen\"s (route dependent upon location work together)\n\nconst EntryEditForm = props => {\n  const locations = props.locations;\n  const events = props.events;\n  const chosenLocation = props.chosenLocation;\n  const chosenRoute = props.chosenRoute;\n  const chosenEvent = props.chosenEvent;\n  const handleChosenLocationChange = props.handleChosenLocationChange;\n  const handleChosenEventChange = props.handleChosenEventChange;\n  const [entry, setEntry] = useState({\n    event_id: \"\",\n    location_id: \"\",\n    attendee_count: \"\",\n    vehicle_number: \"\",\n    date: \"\",\n    time: \"\"\n  }); // set values for entry from state from dropdowns, which carry over from form to log and back without changing until user chooses new\n  //   entry.location_id = chosenLocation;\n  //   entry.route_id = chosenRoute;\n  //   entry.event_id = chosenEvent;\n  // update state of entry upon form field change\n\n  const handleEntryChange = e => {\n    const stateToChange = { ...entry\n    };\n    stateToChange[e.target.id] = e.target.value;\n    setEntry(stateToChange);\n  }; // post entry, reset attendee count and vehicle number to empty \"\", provide user \"success\" alert\n\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    apiManager.updateEntry(entry).then(() => {\n      props.history.push(\"/location/log\");\n    });\n  };\n\n  console.log(props.match.params); //   useEffect(() => {\n  //     apiManager.getSingleEntry(props.match.params.entryId);\n  //   });\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"event-form-page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    component: \"h1\",\n    variant: \"h5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, \"Entry Form\"), /*#__PURE__*/React.createElement(\"form\", {\n    className: \"event_form\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 15\n    }\n  }, \"Select Event:\"), /*#__PURE__*/React.createElement(Select, {\n    id: \"event_id\",\n    native: true,\n    onChange: handleChosenEventChange,\n    fullWidth: true,\n    required: true,\n    value: chosenEvent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 15\n    }\n  }, events ? events.map(event => /*#__PURE__*/React.createElement(\"option\", {\n    key: event.id,\n    value: parseInt(event.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 21\n    }\n  }, event.name)) : /*#__PURE__*/React.createElement(React.Fragment, null))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 15\n    }\n  }, \"Select Location:\"), /*#__PURE__*/React.createElement(Select, {\n    id: \"location_id\",\n    native: true,\n    onChange: handleChosenLocationChange,\n    fullWidth: true,\n    required: true,\n    value: chosenLocation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 15\n    }\n  }, locations ? locations.map(location => /*#__PURE__*/React.createElement(\"option\", {\n    key: location.id,\n    value: parseInt(location.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 21\n    }\n  }, location.name)) : /*#__PURE__*/React.createElement(React.Fragment, null))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    htmlFor: \"age-native-simple\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 15\n    }\n  }, \"Attendee Count:\", \" \"), /*#__PURE__*/React.createElement(TextField, {\n    required: true,\n    type: \"number\",\n    id: \"attendee_count\",\n    fullWidth: true,\n    onChange: handleEntryChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    htmlFor: \"age-native-simple\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 15\n    }\n  }, \"Vehicle Number:\", \" \"), /*#__PURE__*/React.createElement(TextField, {\n    id: \"vehicle_number\",\n    fullWidth: true,\n    onChange: handleEntryChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(Grid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    variant: \"contained\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  }, \"Submit\")))));\n};\n\nexport default EntryEditForm;","map":{"version":3,"sources":["/Users/MainTechPiece/workspace/final-capstone-react-app/src/forms/entryEditForm.js"],"names":["React","useState","useEffect","Grid","Button","TextField","InputLabel","Select","Typography","apiManager","moment","EntryEditForm","props","locations","events","chosenLocation","chosenRoute","chosenEvent","handleChosenLocationChange","handleChosenEventChange","entry","setEntry","event_id","location_id","attendee_count","vehicle_number","date","time","handleEntryChange","e","stateToChange","target","id","value","handleSubmit","preventDefault","updateEntry","then","history","push","console","log","match","params","map","event","parseInt","name","location"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport Typography from \"@material-ui/core/Typography\";\nimport apiManager from \"../api/apiManager\";\nimport moment from \"moment\";\n\n// \"locations\" and \"events\" fill the dropdowns, both \"handle...change\"s change the 3 \"chosen\"s (route dependent upon location work together)\nconst EntryEditForm = (props) => {\n  const locations = props.locations;\n  const events = props.events;\n  const chosenLocation = props.chosenLocation;\n  const chosenRoute = props.chosenRoute;\n  const chosenEvent = props.chosenEvent;\n  const handleChosenLocationChange = props.handleChosenLocationChange;\n  const handleChosenEventChange = props.handleChosenEventChange;\n  const [entry, setEntry] = useState({\n    event_id: \"\",\n    location_id: \"\",\n    attendee_count: \"\",\n    vehicle_number: \"\",\n    date: \"\",\n    time: \"\",\n  });\n\n  // set values for entry from state from dropdowns, which carry over from form to log and back without changing until user chooses new\n  //   entry.location_id = chosenLocation;\n  //   entry.route_id = chosenRoute;\n  //   entry.event_id = chosenEvent;\n\n  // update state of entry upon form field change\n  const handleEntryChange = (e) => {\n    const stateToChange = { ...entry };\n    stateToChange[e.target.id] = e.target.value;\n    setEntry(stateToChange);\n  };\n\n  // post entry, reset attendee count and vehicle number to empty \"\", provide user \"success\" alert\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    apiManager.updateEntry(entry).then(() => {\n      props.history.push(\"/location/log\");\n    });\n  };\n\n  console.log(props.match.params)\n\n//   useEffect(() => {\n//     apiManager.getSingleEntry(props.match.params.entryId);\n//   });\n\n  return (\n    <>\n      <div className=\"event-form-page\">\n        <Typography component=\"h1\" variant=\"h5\">\n          Entry Form\n        </Typography>\n        <form className=\"event_form\" onSubmit={handleSubmit}>\n          <Grid container spacing={3}>\n            <Grid item xs={12} md={3}>\n              <InputLabel>Select Event:</InputLabel>\n              <Select\n                id=\"event_id\"\n                native\n                onChange={handleChosenEventChange}\n                fullWidth\n                required\n                value={chosenEvent}\n              >\n                {events ? (\n                  events.map((event) => (\n                    <option key={event.id} value={parseInt(event.id)}>\n                      {event.name}\n                    </option>\n                  ))\n                ) : (\n                  <></>\n                )}\n              </Select>\n            </Grid>\n            <Grid item xs={12} md={3}>\n              <InputLabel>Select Location:</InputLabel>\n              <Select\n                id=\"location_id\"\n                native\n                onChange={handleChosenLocationChange}\n                fullWidth\n                required\n                value={chosenLocation}\n              >\n                {locations ? (\n                  locations.map((location) => (\n                    <option key={location.id} value={parseInt(location.id)}>\n                      {location.name}\n                    </option>\n                  ))\n                ) : (\n                  <></>\n                )}\n              </Select>\n            </Grid>\n            <Grid item xs={12} md={3}>\n              <InputLabel htmlFor=\"age-native-simple\">\n                Attendee Count:{\" \"}\n              </InputLabel>\n              <TextField\n                required\n                type=\"number\"\n                id=\"attendee_count\"\n                fullWidth\n                onChange={handleEntryChange}\n              />\n            </Grid>\n            <Grid item xs={12} md={3}>\n              <InputLabel htmlFor=\"age-native-simple\">\n                Vehicle Number:{\" \"}\n              </InputLabel>\n              <TextField\n                id=\"vehicle_number\"\n                fullWidth\n                onChange={handleEntryChange}\n              />\n            </Grid>\n          </Grid>\n          <Grid>\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n              Submit\n            </Button>\n          </Grid>\n        </form>\n      </div>\n    </>\n  );\n};\n\nexport default EntryEditForm;\n"]},"metadata":{},"sourceType":"module"}