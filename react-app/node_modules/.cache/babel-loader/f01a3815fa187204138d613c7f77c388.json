{"ast":null,"code":"var _jsxFileName = \"/Users/MainTechPiece/workspace/event-transpo-manager/react-app/src/eventTranspoTracker.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport EntryForm from \"./forms/entryForm\";\nimport EntryEditForm from \"./forms/entryEditForm\";\nimport apiManager from \"./api/apiManager\";\nimport RouteReport from \"./reports/routeReport\";\nimport Log from \"./reports/log\";\n\nconst EventTranspoTracker = props => {\n  const hasUser = props.hasUser; // places routes and shuttles fill the dropdown menus\n  // places filter based on chosenRoute\n  // chosenPlace chosenRoute and chosenShuttle are the choices made from the dropdowns\n\n  const [places, setPlaces] = useState([]);\n  const [routes, setRoutes] = useState([]);\n  const [shuttles, setShuttles] = useState([]);\n  const [dates, setDates] = useState([]);\n  const [chosenPlaceId, setChosenPlaceId] = useState(\"\");\n  const [chosenPlaceName, setChosenPlaceName] = useState(\"\");\n  const [chosenRoute, setChosenRoute] = useState(\"\");\n  const [chosenShuttleId, setChosenShuttleId] = useState(\"\");\n  const [chosenShuttleName, setChosenShuttleName] = useState(\"\");\n  const [chosenDate, setChosenDate] = useState(\"\"); // get and sort in alpha order all places for the dropdown menus\n\n  const getPlaces = () => {\n    apiManager.getAllType(\"places\").then(r => {\n      r.sort((a, b) => a.name.localeCompare(b.name));\n      setPlaces(r);\n    });\n  }; // set chosePlace based on choice from dropdown menu\n\n\n  const handleChosenPlaceChange = e => {\n    setChosenPlaceId(e.target.value);\n    setChosenPlaceName(e.target.options[e.target.selectedIndex].dataset.name);\n\n    if (e.target.value !== \"\") {} else {\n      getRoutes();\n    }\n  }; // // get and sort in alpha order all routes for the dropdown menus and pass them to the form log and graph\n\n\n  const getRoutes = () => {\n    apiManager.getAllType(\"routes\").then(r => {\n      r.sort((a, b) => a.name.localeCompare(b.name));\n      setRoutes(r);\n    });\n  }; // // set choseroute based on choice from dropdown menu on form log and graph\n\n\n  const handleChosenRouteChange = e => {\n    const routeId = e.target.value;\n    setChosenRoute(routeId);\n    setChosenPlaceId(\"\");\n    setChosenPlaceName(\"\");\n    apiManager.getAllType(\"places\").then(r => {\n      if (routeId !== \"\") {\n        setPlaces(r.filter(each => each.route.name === routeId).sort((a, b) => a.name.localeCompare(b.name)));\n      } else {\n        setPlaces(r.sort((a, b) => a.name.localeCompare(b.name)));\n      }\n    });\n  }; // get and sort in alpha order all shuttles for the dropdown menus\n\n\n  const getShuttles = () => {\n    apiManager.getAllType(\"shuttles\").then(r => {\n      r.sort((a, b) => a.name.localeCompare(b.name));\n      setShuttles(r);\n    });\n  }; // set chosenShuttleId based on choice from dropdown menu\n\n\n  const handleChosenShuttleChange = e => {\n    setChosenShuttleId(e.target.value);\n    setChosenShuttleName(e.target.options[e.target.selectedIndex].dataset.name);\n  }; // get all entries for the dropdown menus\n\n\n  const getDates = () => {\n    apiManager.getAllType(\"dates\").then(r => {\n      r.sort((a, b) => a.date.localeCompare(b.date));\n      setDates(r);\n    });\n  }; // set chosenDate based on choice from dropdown menu\n\n\n  const handleChosenDateChange = e => {\n    const dateId = e.target.value;\n    setChosenDate(dateId);\n  };\n\n  useEffect(() => {\n    getShuttles();\n    getEntries();\n    getPlaces();\n    getRoutes();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }, \"tracker\"), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/\",\n    render: () => /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/entry/form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 43\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/entry/form\",\n    render: props => hasUser ? /*#__PURE__*/React.createElement(EntryForm, Object.assign({\n      places: places,\n      routes: routes,\n      shuttles: shuttles,\n      dates: dates,\n      chosenPlaceId: chosenPlaceId,\n      chosenRoute: chosenRoute,\n      chosenShuttleId: chosenShuttleId,\n      chosenDate: chosenDate,\n      handleChosenPlaceChange: handleChosenPlaceChange,\n      handleChosenRouteChange: handleChosenRouteChange,\n      handleChosenShuttleChange: handleChosenShuttleChange,\n      handleChosenDateChange: handleChosenDateChange\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 13\n      }\n    })) : /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 13\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/entry/edit/form/:entryId(\\\\d+)\",\n    render: props => hasUser ? /*#__PURE__*/React.createElement(EntryEditForm, Object.assign({\n      places: places,\n      routes: routes,\n      shuttles: shuttles,\n      dates: dates,\n      chosenPlaceId: chosenPlaceId,\n      chosenRoute: chosenRoute,\n      chosenShuttleId: chosenShuttleId,\n      chosenDate: chosenDate,\n      handleChosenPlaceChange: handleChosenPlaceChange,\n      handleChosenRouteChange: handleChosenRouteChange,\n      handleChosenShuttleChange: handleChosenShuttleChange,\n      handleChosenDateChange: handleChosenDateChange\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 13\n      }\n    })) : /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 13\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/log\",\n    render: props => hasUser ? /*#__PURE__*/React.createElement(Log, Object.assign({\n      getEntries: getEntries,\n      places: places,\n      routes: routes,\n      shuttles: shuttles,\n      entries: entries,\n      dates: dates,\n      chosenPlaceId: chosenPlaceId,\n      chosenPlaceName: chosenPlaceName,\n      chosenRoute: chosenRoute,\n      chosenShuttleId: chosenShuttleId,\n      chosenShuttleName: chosenShuttleName,\n      chosenDate: chosenDate,\n      handleChosenPlaceChange: handleChosenPlaceChange,\n      handleChosenRouteChange: handleChosenRouteChange,\n      handleChosenShuttleChange: handleChosenShuttleChange,\n      handleChosenDateChange: handleChosenDateChange\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 13\n      }\n    })) : /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 13\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/graph\",\n    render: props => hasUser ? /*#__PURE__*/React.createElement(RouteReport, Object.assign({\n      getEntries: getEntries,\n      places: places,\n      routes: routes,\n      shuttles: shuttles,\n      entries: entries,\n      dates: dates,\n      chosenPlaceId: chosenPlaceId,\n      chosenPlaceName: chosenPlaceName,\n      chosenRoute: chosenRoute,\n      chosenShuttleId: chosenShuttleId,\n      chosenShuttleName: chosenShuttleName,\n      chosenDate: chosenDate,\n      handleChosenPlaceChange: handleChosenPlaceChange,\n      handleChosenRouteChange: handleChosenRouteChange,\n      handleChosenShuttleChange: handleChosenShuttleChange,\n      handleChosenDateChange: handleChosenDateChange\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 13\n      }\n    })) : /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 13\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default EventTranspoTracker;","map":{"version":3,"sources":["/Users/MainTechPiece/workspace/event-transpo-manager/react-app/src/eventTranspoTracker.js"],"names":["React","useState","useEffect","Route","Redirect","EntryForm","EntryEditForm","apiManager","RouteReport","Log","EventTranspoTracker","props","hasUser","places","setPlaces","routes","setRoutes","shuttles","setShuttles","dates","setDates","chosenPlaceId","setChosenPlaceId","chosenPlaceName","setChosenPlaceName","chosenRoute","setChosenRoute","chosenShuttleId","setChosenShuttleId","chosenShuttleName","setChosenShuttleName","chosenDate","setChosenDate","getPlaces","getAllType","then","r","sort","a","b","name","localeCompare","handleChosenPlaceChange","e","target","value","options","selectedIndex","dataset","getRoutes","handleChosenRouteChange","routeId","filter","each","route","getShuttles","handleChosenShuttleChange","getDates","date","handleChosenDateChange","dateId","getEntries","entries"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport EntryForm from \"./forms/entryForm\";\nimport EntryEditForm from \"./forms/entryEditForm\";\nimport apiManager from \"./api/apiManager\";\nimport RouteReport from \"./reports/routeReport\";\nimport Log from \"./reports/log\";\n\nconst EventTranspoTracker = (props) => {\n  const hasUser = props.hasUser;\n\n  // places routes and shuttles fill the dropdown menus\n  // places filter based on chosenRoute\n  // chosenPlace chosenRoute and chosenShuttle are the choices made from the dropdowns\n  const [places, setPlaces] = useState([]);\n  const [routes, setRoutes] = useState([]);\n  const [shuttles, setShuttles] = useState([]);\n  const [dates, setDates] = useState([]);\n  const [chosenPlaceId, setChosenPlaceId] = useState(\"\");\n  const [chosenPlaceName, setChosenPlaceName] = useState(\"\");\n  const [chosenRoute, setChosenRoute] = useState(\"\");\n  const [chosenShuttleId, setChosenShuttleId] = useState(\"\");\n  const [chosenShuttleName, setChosenShuttleName] = useState(\"\");\n  const [chosenDate, setChosenDate] = useState(\"\");\n\n  // get and sort in alpha order all places for the dropdown menus\n  const getPlaces = () => {\n    apiManager.getAllType(\"places\").then((r) => {\n      r.sort((a, b) => a.name.localeCompare(b.name));\n      setPlaces(r);\n    });\n  };\n\n  // set chosePlace based on choice from dropdown menu\n  const handleChosenPlaceChange = (e) => {\n    setChosenPlaceId(e.target.value);\n    setChosenPlaceName(e.target.options[e.target.selectedIndex].dataset.name);\n    if (e.target.value !== \"\") {\n    } else {\n      getRoutes();\n    }\n  };\n\n  // // get and sort in alpha order all routes for the dropdown menus and pass them to the form log and graph\n  const getRoutes = () => {\n    apiManager.getAllType(\"routes\").then((r) => {\n      r.sort((a, b) => a.name.localeCompare(b.name));\n      setRoutes(r);\n    });\n  };\n\n  // // set choseroute based on choice from dropdown menu on form log and graph\n  const handleChosenRouteChange = (e) => {\n    const routeId = e.target.value;\n    setChosenRoute(routeId);\n    setChosenPlaceId(\"\");\n    setChosenPlaceName(\"\");\n    apiManager.getAllType(\"places\").then((r) => {\n      if (routeId !== \"\") {\n        setPlaces(\n          r\n            .filter((each) => each.route.name === routeId)\n            .sort((a, b) => a.name.localeCompare(b.name))\n        );\n      } else {\n        setPlaces(r.sort((a, b) => a.name.localeCompare(b.name)));\n      }\n    });\n  };\n\n  // get and sort in alpha order all shuttles for the dropdown menus\n  const getShuttles = () => {\n    apiManager.getAllType(\"shuttles\").then((r) => {\n      r.sort((a, b) => a.name.localeCompare(b.name));\n      setShuttles(r);\n    });\n  };\n\n  // set chosenShuttleId based on choice from dropdown menu\n  const handleChosenShuttleChange = (e) => {\n    setChosenShuttleId(e.target.value);\n    setChosenShuttleName(e.target.options[e.target.selectedIndex].dataset.name);\n  };\n\n  // get all entries for the dropdown menus\n  const getDates = () => {\n    apiManager.getAllType(\"dates\").then((r) => {\n      r.sort((a, b) => a.date.localeCompare(b.date));\n      setDates(r);\n    });\n  };\n\n  // set chosenDate based on choice from dropdown menu\n  const handleChosenDateChange = (e) => {\n    const dateId = e.target.value;\n    setChosenDate(dateId);\n  };\n\n  useEffect(() => {\n    getShuttles();\n    getEntries();\n    getPlaces();\n    getRoutes();\n  }, []);\n\n  return (\n    <span>\n      <span>tracker</span>\n      <Route exact path=\"/\" render={() => <Redirect to=\"/entry/form\" />} />\n      <Route\n        exact\n        path=\"/entry/form\"\n        render={(props) =>\n          hasUser ? (\n            <EntryForm\n              places={places}\n              routes={routes}\n              shuttles={shuttles}\n              dates={dates}\n              chosenPlaceId={chosenPlaceId}\n              chosenRoute={chosenRoute}\n              chosenShuttleId={chosenShuttleId}\n              chosenDate={chosenDate}\n              handleChosenPlaceChange={handleChosenPlaceChange}\n              handleChosenRouteChange={handleChosenRouteChange}\n              handleChosenShuttleChange={handleChosenShuttleChange}\n              handleChosenDateChange={handleChosenDateChange}\n              {...props}\n            />\n          ) : (\n            <Redirect to=\"/login\" />\n          )\n        }\n      />\n      <Route\n        exact\n        path=\"/entry/edit/form/:entryId(\\d+)\"\n        render={(props) =>\n          hasUser ? (\n            <EntryEditForm\n              places={places}\n              routes={routes}\n              shuttles={shuttles}\n              dates={dates}\n              chosenPlaceId={chosenPlaceId}\n              chosenRoute={chosenRoute}\n              chosenShuttleId={chosenShuttleId}\n              chosenDate={chosenDate}\n              handleChosenPlaceChange={handleChosenPlaceChange}\n              handleChosenRouteChange={handleChosenRouteChange}\n              handleChosenShuttleChange={handleChosenShuttleChange}\n              handleChosenDateChange={handleChosenDateChange}\n              {...props}\n            />\n          ) : (\n            <Redirect to=\"/login\" />\n          )\n        }\n      />\n      <Route\n        exact\n        path=\"/log\"\n        render={(props) =>\n          hasUser ? (\n            <Log\n              getEntries={getEntries}\n              places={places}\n              routes={routes}\n              shuttles={shuttles}\n              entries={entries}\n              dates={dates}\n              chosenPlaceId={chosenPlaceId}\n              chosenPlaceName={chosenPlaceName}\n              chosenRoute={chosenRoute}\n              chosenShuttleId={chosenShuttleId}\n              chosenShuttleName={chosenShuttleName}\n              chosenDate={chosenDate}\n              handleChosenPlaceChange={handleChosenPlaceChange}\n              handleChosenRouteChange={handleChosenRouteChange}\n              handleChosenShuttleChange={handleChosenShuttleChange}\n              handleChosenDateChange={handleChosenDateChange}\n              {...props}\n            />\n          ) : (\n            <Redirect to=\"/login\" />\n          )\n        }\n      />\n      <Route\n        exact\n        path=\"/graph\"\n        render={(props) =>\n          hasUser ? (\n            <RouteReport\n              getEntries={getEntries}\n              places={places}\n              routes={routes}\n              shuttles={shuttles}\n              entries={entries}\n              dates={dates}\n              chosenPlaceId={chosenPlaceId}\n              chosenPlaceName={chosenPlaceName}\n              chosenRoute={chosenRoute}\n              chosenShuttleId={chosenShuttleId}\n              chosenShuttleName={chosenShuttleName}\n              chosenDate={chosenDate}\n              handleChosenPlaceChange={handleChosenPlaceChange}\n              handleChosenRouteChange={handleChosenRouteChange}\n              handleChosenShuttleChange={handleChosenShuttleChange}\n              handleChosenDateChange={handleChosenDateChange}\n              {...props}\n            />\n          ) : (\n            <Redirect to=\"/login\" />\n          )\n        }\n      />\n    </span>\n  );\n};\n\nexport default EventTranspoTracker;\n"]},"metadata":{},"sourceType":"module"}