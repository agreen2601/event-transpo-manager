{"ast":null,"code":"var _jsxFileName = \"/Users/MainTechPiece/workspace/final-capstone-react-app/src/reports/routeReport.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport Typography from \"@material-ui/core/Typography\";\nimport apiManager from \"../api/apiManager\";\nimport RouteGraph from \"./routeGraph\";\n\nconst RouteReport = props => {\n  const locations = props.locations;\n  const events = props.events;\n  const dates = props.uniqueDates;\n  const chosenLocation = props.chosenLocation;\n  const chosenEvent = props.chosenEvent;\n  const chosenDate = props.chosenDate;\n  const handleChosenLocationChange = props.handleChosenLocationChange;\n  const handleChosenEventChange = props.handleChosenEventChange;\n  const handleChosenDateChange = props.handleChosenDateChange;\n  const [entries, setEntries] = useState([]); // get entries based on location and event chosen from dropdowns then filter based on date\n\n  const getEntries = (locationId, eventId) => {\n    apiManager.getEntriesByLocationAndEvent(locationId, eventId).then(r => {\n      setEntries(r);\n    });\n  };\n\n  const entriesByDate = entries.filter(entry => entry.date.includes(chosenDate));\n  useEffect(() => {\n    getEntries(props.chosenLocation, props.chosenEvent);\n  }, [props.chosenLocation, props.chosenEvent]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    component: \"h1\",\n    variant: \"h5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, \"Route Reports\"), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }, \"Select Event:\"), /*#__PURE__*/React.createElement(Select, {\n    id: \"eventId\",\n    native: true,\n    onChange: handleChosenEventChange,\n    fullWidth: true,\n    required: true,\n    label: \"??\",\n    value: chosenEvent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }, events ? events.map(event => /*#__PURE__*/React.createElement(\"option\", {\n    key: event.id,\n    value: parseInt(event.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 19\n    }\n  }, event.name)) : /*#__PURE__*/React.createElement(React.Fragment, null))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, \"Select Location:\"), /*#__PURE__*/React.createElement(Select, {\n    id: \"locationId\",\n    native: true,\n    onChange: handleChosenLocationChange,\n    fullWidth: true,\n    required: true,\n    label: \"??\",\n    value: chosenLocation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, locations ? locations.map(location => /*#__PURE__*/React.createElement(\"option\", {\n    key: location.id,\n    value: parseInt(location.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 19\n    }\n  }, location.name)) : /*#__PURE__*/React.createElement(React.Fragment, null))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, \"Select Date:\"), /*#__PURE__*/React.createElement(Select, {\n    id: \"dateId\",\n    native: true,\n    onChange: handleChosenDateChange,\n    fullWidth: true,\n    required: true,\n    label: \"??\",\n    value: chosenDate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    \"aria-label\": \"None\",\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 15\n    }\n  }, \"Choose Date\"), dates ? dates.map(date => /*#__PURE__*/React.createElement(\"option\", {\n    key: date,\n    value: date,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 19\n    }\n  }, date)) : /*#__PURE__*/React.createElement(React.Fragment, null))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"location_log_header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(RouteGraph, Object.assign({\n    entriesByDate: entriesByDate\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }))));\n};\n\nexport default RouteReport;","map":{"version":3,"sources":["/Users/MainTechPiece/workspace/final-capstone-react-app/src/reports/routeReport.js"],"names":["React","useState","useEffect","Grid","InputLabel","Select","Typography","apiManager","RouteGraph","RouteReport","props","locations","events","dates","uniqueDates","chosenLocation","chosenEvent","chosenDate","handleChosenLocationChange","handleChosenEventChange","handleChosenDateChange","entries","setEntries","getEntries","locationId","eventId","getEntriesByLocationAndEvent","then","r","entriesByDate","filter","entry","date","includes","map","event","id","parseInt","name","location"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport Typography from \"@material-ui/core/Typography\";\nimport apiManager from \"../api/apiManager\";\nimport RouteGraph from \"./routeGraph\";\n\nconst RouteReport = (props) => {\n  const locations = props.locations;\n  const events = props.events;\n  const dates = props.uniqueDates;\n  const chosenLocation = props.chosenLocation;\n  const chosenEvent = props.chosenEvent;\n  const chosenDate = props.chosenDate;\n  const handleChosenLocationChange = props.handleChosenLocationChange;\n  const handleChosenEventChange = props.handleChosenEventChange;\n  const handleChosenDateChange = props.handleChosenDateChange;\n  const [entries, setEntries] = useState([]);\n\n  // get entries based on location and event chosen from dropdowns then filter based on date\n  const getEntries = (locationId, eventId) => {\n    apiManager\n      .getEntriesByLocationAndEvent(locationId, eventId)\n      .then((r) => {\n        setEntries(r);\n      });\n  };\n  const entriesByDate = entries.filter((entry) =>\n    entry.date.includes(chosenDate)\n  );\n\n  useEffect(() => {\n    getEntries(props.chosenLocation, props.chosenEvent);\n  }, [props.chosenLocation, props.chosenEvent]);\n\n  return (\n    <>\n      <div>\n        <Typography component=\"h1\" variant=\"h5\">\n          Route Reports\n        </Typography>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={3}>\n            <InputLabel>Select Event:</InputLabel>\n            <Select\n              id=\"eventId\"\n              native\n              onChange={handleChosenEventChange}\n              fullWidth\n              required\n              label=\"??\"\n              value={chosenEvent}\n            >\n              {events ? (\n                events.map((event) => (\n                  <option key={event.id} value={parseInt(event.id)}>\n                    {event.name}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel>Select Location:</InputLabel>\n            <Select\n              id=\"locationId\"\n              native\n              onChange={handleChosenLocationChange}\n              fullWidth\n              required\n              label=\"??\"\n              value={chosenLocation}\n            >\n              {locations ? (\n                locations.map((location) => (\n                  <option key={location.id} value={parseInt(location.id)}>\n                    {location.name}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <InputLabel>Select Date:</InputLabel>\n            <Select\n              id=\"dateId\"\n              native\n              onChange={handleChosenDateChange}\n              fullWidth\n              required\n              label=\"??\"\n              value={chosenDate}\n            >\n              <option aria-label=\"None\" value=\"\">\n                Choose Date\n              </option>\n              {dates ? (\n                dates.map((date) => (\n                  <option key={date} value={date}>\n                    {date}\n                  </option>\n                ))\n              ) : (\n                <></>\n              )}\n            </Select>\n          </Grid>\n        </Grid>\n      </div>\n      <div className=\"location_log_header\"></div>\n      <div>\n        <RouteGraph entriesByDate={entriesByDate} {...props} />\n      </div>\n    </>\n  );\n};\n\nexport default RouteReport;\n"]},"metadata":{},"sourceType":"module"}