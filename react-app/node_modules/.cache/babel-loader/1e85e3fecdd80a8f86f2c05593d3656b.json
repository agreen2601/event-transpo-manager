{"ast":null,"code":"import baseurl from \"./baseurl\";\nexport default {\n  getAllEntries(token) {\n    return fetch(`${baseurl}/entries`, {\n      method: \"GET\",\n      headers: {\n        \"content-type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `Token ${token}`\n      }\n    }).then(r => r.json());\n  },\n\n  getSingleLocation(token, locationId) {\n    return fetch(`${baseurl}/locations/${locationId}`, {\n      method: \"GET\",\n      headers: {\n        \"content-type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `Token ${token}`\n      }\n    }).then(r => r.json());\n  },\n\n  getEntriesByLocation(token, locationId) {\n    return fetch(`${baseurl}/entries?locationID=${locationId}`, {\n      method: \"GET\",\n      headers: {\n        \"content-type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `Token ${token}`\n      }\n    }).then(r => r.json());\n  },\n\n  getEntriesByLocationAndEvent(token, locationId, eventID) {\n    return fetch(`${baseurl}/entries?locationID=${locationId}&eventID=${eventID}`, {\n      method: \"GET\",\n      headers: {\n        \"content-type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `Token ${token}`\n      }\n    }).then(r => r.json());\n  },\n\n  getAllLocations(token) {\n    return fetch(`${baseurl}/locations`, {\n      method: \"GET\",\n      headers: {\n        \"content-type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `Token ${token}`\n      }\n    }).then(r => r.json());\n  },\n\n  getAllEvents(token) {\n    return fetch(`${baseurl}/events`, {\n      method: \"GET\",\n      headers: {\n        \"content-type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `Token ${token}`\n      }\n    }).then(r => r.json());\n  },\n\n  postEntry(newEntry) {\n    return fetch(`${baseurl}/entries`, {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify(newEntry)\n    }).then(r => r.json());\n  },\n\n  register(userToPost) {\n    return fetch(`${baseurl}/register/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(userToPost)\n    }).then(result => result.json());\n  },\n\n  login(userToLogin) {\n    return fetch(`${baseurl}/login/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(userToLogin)\n    }).then(result => result.json());\n  }\n\n};","map":{"version":3,"sources":["/Users/MainTechPiece/workspace/final-capstone-react-app/src/api/apiManager.js"],"names":["baseurl","getAllEntries","token","fetch","method","headers","Accept","Authorization","then","r","json","getSingleLocation","locationId","getEntriesByLocation","getEntriesByLocationAndEvent","eventID","getAllLocations","getAllEvents","postEntry","newEntry","body","JSON","stringify","register","userToPost","result","login","userToLogin"],"mappings":"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","sourcesContent":["import baseurl from \"./baseurl\";\n\nexport default {\n  getAllEntries(token) {\n    return fetch(`${baseurl}/entries`, {\n      method: \"GET\",\n      headers: {\n        \"content-type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `Token ${token}`,\n      },\n    }).then((r) => r.json());\n  },\n  getSingleLocation(token, locationId) {\n    return fetch(`${baseurl}/locations/${locationId}`, {\n      method: \"GET\",\n      headers: {\n        \"content-type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `Token ${token}`,\n      },\n    }).then((r) => r.json());\n  },\n  getEntriesByLocation(token, locationId) {\n    return fetch(`${baseurl}/entries?locationID=${locationId}`, {\n      method: \"GET\",\n      headers: {\n        \"content-type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `Token ${token}`,\n      },\n    }).then((r) => r.json());\n  },\n  getEntriesByLocationAndEvent(token, locationId, eventID) {\n    return fetch(\n      `${baseurl}/entries?locationID=${locationId}&eventID=${eventID}`,\n      {\n        method: \"GET\",\n        headers: {\n          \"content-type\": \"application/json\",\n          Accept: \"application/json\",\n          Authorization: `Token ${token}`,\n        },\n      }\n    ).then((r) => r.json());\n  },\n  getAllLocations(token) {\n    return fetch(`${baseurl}/locations`, {\n      method: \"GET\",\n      headers: {\n        \"content-type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `Token ${token}`,\n      },\n    }).then((r) => r.json());\n  },\n  getAllEvents(token) {\n    return fetch(`${baseurl}/events`, {\n      method: \"GET\",\n      headers: {\n        \"content-type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `Token ${token}`,\n      },\n    }).then((r) => r.json());\n  },\n  postEntry(newEntry) {\n    return fetch(`${baseurl}/entries`, {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: JSON.stringify(newEntry),\n    }).then((r) => r.json());\n  },\n  register(userToPost) {\n    return fetch(`${baseurl}/register/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(userToPost),\n    }).then((result) => result.json());\n  },\n  login(userToLogin) {\n    return fetch(`${baseurl}/login/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(userToLogin),\n    }).then((result) => result.json());\n  },\n};\n"]},"metadata":{},"sourceType":"module"}