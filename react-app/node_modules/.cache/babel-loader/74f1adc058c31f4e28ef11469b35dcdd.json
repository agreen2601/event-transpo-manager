{"ast":null,"code":"import baseurl from \"./baseurl\";\nexport default {\n  getAllType(type) {\n    return fetch(`${baseurl}/${type}`).then(r => r.json());\n  },\n\n  getSingleType(type, id) {\n    return fetch(`${baseurl}/${type}/${id}`).then(r => r.json());\n  },\n\n  getTypeByParam(type, param, id) {\n    return fetch(`${baseurl}/${type}?${param}=${id}`).then(r => r.json());\n  },\n\n  getAssignmentsByDateRoute(dateId, routeId) {\n    return fetch(`${baseurl}/assignments?dateID=${dateId}&routeID=${routeId}`).then(r => r.json());\n  },\n\n  getAssignmentsByDateDriver(dateId, driverId) {\n    return fetch(`${baseurl}/assignments?dateID=${dateId}&driverID=${driverId}`).then(r => r.json());\n  },\n\n  postType(type, obj) {\n    return fetch(`${baseurl}/${type}`, {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `Token ${window.sessionStorage.getItem(\"token\")}`\n      },\n      body: JSON.stringify(obj)\n    }).then(r => r.json());\n  },\n\n  updateEntry(type, id) {\n    return fetch(`${baseurl}/entries/${entry.id}`, {\n      method: \"PUT\",\n      headers: {\n        \"content-type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `Token ${window.sessionStorage.getItem(\"token\")}`\n      },\n      body: JSON.stringify(entry)\n    });\n  },\n\n  deleteEntry(id) {\n    return fetch(`${baseurl}/entries/${id}`, {\n      method: \"DELETE\"\n    });\n  },\n\n  register(userToPost) {\n    return fetch(`${baseurl}/register/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(userToPost)\n    }).then(result => result.json());\n  },\n\n  login(userToLogin) {\n    return fetch(`${baseurl}/login/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(userToLogin)\n    }).then(result => result.json());\n  },\n\n  // manager\n  getAssignmentByDateRouteDriver(dateId, routeId, driverId) {\n    return fetch(`${baseurl}/assignments/?dateId=${dateId}&routeId=${routeId}&driverId=${driverId}&_expand=driver&_expand=vehicle`).then(result => result.json());\n  },\n\n  getType(type) {\n    return fetch(`${baseurl}/${type}?_embed=assignments`).then(result => result.json());\n  },\n\n  getTypeWithId(type, id) {\n    return fetch(`${baseurl}/${type}/${id}?_embed=assignments`).then(result => result.json());\n  },\n\n  getUsers() {\n    return fetch(`${baseurl}/users`).then(result => result.json());\n  },\n\n  getFavorites(userId) {\n    return fetch(`${baseurl}/favoriteRoutes?userId=${userId}&_expand=route`).then(result => result.json());\n  },\n\n  addType(type, newType) {\n    return fetch(`${baseurl}/${type}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newType)\n    }).then(data => data.json());\n  },\n\n  deleteTypeWithId(type, id) {\n    return fetch(`${baseurl}/${type}/${id}`, {\n      method: \"DELETE\"\n    }).then(result => result.json);\n  }\n\n};","map":{"version":3,"sources":["/Users/MainTechPiece/workspace/event-transpo-manager/react-app/src/api/apiManager.js"],"names":["baseurl","getAllType","type","fetch","then","r","json","getSingleType","id","getTypeByParam","param","getAssignmentsByDateRoute","dateId","routeId","getAssignmentsByDateDriver","driverId","postType","obj","method","headers","Accept","Authorization","window","sessionStorage","getItem","body","JSON","stringify","updateEntry","entry","deleteEntry","register","userToPost","result","login","userToLogin","getAssignmentByDateRouteDriver","getType","getTypeWithId","getUsers","getFavorites","userId","addType","newType","data","deleteTypeWithId"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,WAApB;AAEA,eAAe;AACbC,EAAAA,UAAU,CAACC,IAAD,EAAO;AACf,WAAOC,KAAK,CAAE,GAAEH,OAAQ,IAAGE,IAAK,EAApB,CAAL,CAA4BE,IAA5B,CAAkCC,CAAD,IAAOA,CAAC,CAACC,IAAF,EAAxC,CAAP;AACD,GAHY;;AAIbC,EAAAA,aAAa,CAACL,IAAD,EAAOM,EAAP,EAAW;AACtB,WAAOL,KAAK,CAAE,GAAEH,OAAQ,IAAGE,IAAK,IAAGM,EAAG,EAA1B,CAAL,CAAkCJ,IAAlC,CAAwCC,CAAD,IAAOA,CAAC,CAACC,IAAF,EAA9C,CAAP;AACD,GANY;;AAObG,EAAAA,cAAc,CAACP,IAAD,EAAOQ,KAAP,EAAcF,EAAd,EAAkB;AAC9B,WAAOL,KAAK,CAAE,GAAEH,OAAQ,IAAGE,IAAK,IAAGQ,KAAM,IAAGF,EAAG,EAAnC,CAAL,CAA2CJ,IAA3C,CAAiDC,CAAD,IAAOA,CAAC,CAACC,IAAF,EAAvD,CAAP;AACD,GATY;;AAUbK,EAAAA,yBAAyB,CAACC,MAAD,EAASC,OAAT,EAAkB;AACzC,WAAOV,KAAK,CACT,GAAEH,OAAQ,uBAAsBY,MAAO,YAAWC,OAAQ,EADjD,CAAL,CAELT,IAFK,CAECC,CAAD,IAAOA,CAAC,CAACC,IAAF,EAFP,CAAP;AAGD,GAdY;;AAebQ,EAAAA,0BAA0B,CAACF,MAAD,EAASG,QAAT,EAAmB;AAC3C,WAAOZ,KAAK,CACT,GAAEH,OAAQ,uBAAsBY,MAAO,aAAYG,QAAS,EADnD,CAAL,CAELX,IAFK,CAECC,CAAD,IAAOA,CAAC,CAACC,IAAF,EAFP,CAAP;AAGD,GAnBY;;AAoBbU,EAAAA,QAAQ,CAACd,IAAD,EAAOe,GAAP,EAAY;AAClB,WAAOd,KAAK,CAAE,GAAEH,OAAQ,IAAGE,IAAK,EAApB,EAAuB;AACjCgB,MAAAA,MAAM,EAAE,MADyB;AAEjCC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,MAAM,EAAE,kBAFD;AAGPC,QAAAA,aAAa,EAAG,SAAQC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,CAA8B,OAA9B,CAAuC;AAHxD,OAFwB;AAOjCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeV,GAAf;AAP2B,KAAvB,CAAL,CAQJb,IARI,CAQEC,CAAD,IAAOA,CAAC,CAACC,IAAF,EARR,CAAP;AASD,GA9BY;;AA+BbsB,EAAAA,WAAW,CAAC1B,IAAD,EAAOM,EAAP,EAAW;AACpB,WAAOL,KAAK,CAAE,GAAEH,OAAQ,YAAW6B,KAAK,CAACrB,EAAG,EAAhC,EAAmC;AAC7CU,MAAAA,MAAM,EAAE,KADqC;AAE7CC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,MAAM,EAAE,kBAFD;AAGPC,QAAAA,aAAa,EAAG,SAAQC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,CAA8B,OAA9B,CAAuC;AAHxD,OAFoC;AAO7CC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeE,KAAf;AAPuC,KAAnC,CAAZ;AASD,GAzCY;;AA0CbC,EAAAA,WAAW,CAACtB,EAAD,EAAK;AACd,WAAOL,KAAK,CAAE,GAAEH,OAAQ,YAAWQ,EAAG,EAA1B,EAA6B;AACvCU,MAAAA,MAAM,EAAE;AAD+B,KAA7B,CAAZ;AAGD,GA9CY;;AA+Cba,EAAAA,QAAQ,CAACC,UAAD,EAAa;AACnB,WAAO7B,KAAK,CAAE,GAAEH,OAAQ,YAAZ,EAAyB;AACnCkB,MAAAA,MAAM,EAAE,MAD2B;AAEnCC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAF0B;AAKnCM,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeK,UAAf;AAL6B,KAAzB,CAAL,CAMJ5B,IANI,CAME6B,MAAD,IAAYA,MAAM,CAAC3B,IAAP,EANb,CAAP;AAOD,GAvDY;;AAwDb4B,EAAAA,KAAK,CAACC,WAAD,EAAc;AACjB,WAAOhC,KAAK,CAAE,GAAEH,OAAQ,SAAZ,EAAsB;AAChCkB,MAAAA,MAAM,EAAE,MADwB;AAEhCC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFuB;AAKhCM,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeQ,WAAf;AAL0B,KAAtB,CAAL,CAMJ/B,IANI,CAME6B,MAAD,IAAYA,MAAM,CAAC3B,IAAP,EANb,CAAP;AAOD,GAhEY;;AAkEb;AACA8B,EAAAA,8BAA8B,CAACxB,MAAD,EAASC,OAAT,EAAkBE,QAAlB,EAA4B;AACxD,WAAOZ,KAAK,CACT,GAAEH,OAAQ,wBAAuBY,MAAO,YAAWC,OAAQ,aAAYE,QAAS,iCADvE,CAAL,CAELX,IAFK,CAEC6B,MAAD,IAAYA,MAAM,CAAC3B,IAAP,EAFZ,CAAP;AAGD,GAvEY;;AAwEb+B,EAAAA,OAAO,CAACnC,IAAD,EAAO;AACZ,WAAOC,KAAK,CAAE,GAAEH,OAAQ,IAAGE,IAAK,qBAApB,CAAL,CAA+CE,IAA/C,CAAqD6B,MAAD,IACzDA,MAAM,CAAC3B,IAAP,EADK,CAAP;AAGD,GA5EY;;AA6EbgC,EAAAA,aAAa,CAACpC,IAAD,EAAOM,EAAP,EAAW;AACtB,WAAOL,KAAK,CAAE,GAAEH,OAAQ,IAAGE,IAAK,IAAGM,EAAG,qBAA1B,CAAL,CAAqDJ,IAArD,CAA2D6B,MAAD,IAC/DA,MAAM,CAAC3B,IAAP,EADK,CAAP;AAGD,GAjFY;;AAkFbiC,EAAAA,QAAQ,GAAG;AACT,WAAOpC,KAAK,CAAE,GAAEH,OAAQ,QAAZ,CAAL,CAA0BI,IAA1B,CAAgC6B,MAAD,IAAYA,MAAM,CAAC3B,IAAP,EAA3C,CAAP;AACD,GApFY;;AAqFbkC,EAAAA,YAAY,CAACC,MAAD,EAAS;AACnB,WAAOtC,KAAK,CACT,GAAEH,OAAQ,0BAAyByC,MAAO,gBADjC,CAAL,CAELrC,IAFK,CAEC6B,MAAD,IAAYA,MAAM,CAAC3B,IAAP,EAFZ,CAAP;AAGD,GAzFY;;AA0FboC,EAAAA,OAAO,CAACxC,IAAD,EAAOyC,OAAP,EAAgB;AACrB,WAAOxC,KAAK,CAAE,GAAEH,OAAQ,IAAGE,IAAK,EAApB,EAAuB;AACjCgB,MAAAA,MAAM,EAAE,MADyB;AAEjCC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFwB;AAKjCM,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAegB,OAAf;AAL2B,KAAvB,CAAL,CAMJvC,IANI,CAMEwC,IAAD,IAAUA,IAAI,CAACtC,IAAL,EANX,CAAP;AAOD,GAlGY;;AAmGbuC,EAAAA,gBAAgB,CAAC3C,IAAD,EAAOM,EAAP,EAAW;AACzB,WAAOL,KAAK,CAAE,GAAEH,OAAQ,IAAGE,IAAK,IAAGM,EAAG,EAA1B,EAA6B;AACvCU,MAAAA,MAAM,EAAE;AAD+B,KAA7B,CAAL,CAEJd,IAFI,CAEE6B,MAAD,IAAYA,MAAM,CAAC3B,IAFpB,CAAP;AAGD;;AAvGY,CAAf","sourcesContent":["import baseurl from \"./baseurl\";\n\nexport default {\n  getAllType(type) {\n    return fetch(`${baseurl}/${type}`).then((r) => r.json());\n  },\n  getSingleType(type, id) {\n    return fetch(`${baseurl}/${type}/${id}`).then((r) => r.json());\n  },\n  getTypeByParam(type, param, id) {\n    return fetch(`${baseurl}/${type}?${param}=${id}`).then((r) => r.json());\n  },\n  getAssignmentsByDateRoute(dateId, routeId) {\n    return fetch(\n      `${baseurl}/assignments?dateID=${dateId}&routeID=${routeId}`\n    ).then((r) => r.json());\n  },\n  getAssignmentsByDateDriver(dateId, driverId) {\n    return fetch(\n      `${baseurl}/assignments?dateID=${dateId}&driverID=${driverId}`\n    ).then((r) => r.json());\n  },\n  postType(type, obj) {\n    return fetch(`${baseurl}/${type}`, {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `Token ${window.sessionStorage.getItem(\"token\")}`,\n      },\n      body: JSON.stringify(obj),\n    }).then((r) => r.json());\n  },\n  updateEntry(type, id) {\n    return fetch(`${baseurl}/entries/${entry.id}`, {\n      method: \"PUT\",\n      headers: {\n        \"content-type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `Token ${window.sessionStorage.getItem(\"token\")}`,\n      },\n      body: JSON.stringify(entry),\n    });\n  },\n  deleteEntry(id) {\n    return fetch(`${baseurl}/entries/${id}`, {\n      method: \"DELETE\",\n    });\n  },\n  register(userToPost) {\n    return fetch(`${baseurl}/register/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(userToPost),\n    }).then((result) => result.json());\n  },\n  login(userToLogin) {\n    return fetch(`${baseurl}/login/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(userToLogin),\n    }).then((result) => result.json());\n  },\n\n  // manager\n  getAssignmentByDateRouteDriver(dateId, routeId, driverId) {\n    return fetch(\n      `${baseurl}/assignments/?dateId=${dateId}&routeId=${routeId}&driverId=${driverId}&_expand=driver&_expand=vehicle`\n    ).then((result) => result.json());\n  },\n  getType(type) {\n    return fetch(`${baseurl}/${type}?_embed=assignments`).then((result) =>\n      result.json()\n    );\n  },\n  getTypeWithId(type, id) {\n    return fetch(`${baseurl}/${type}/${id}?_embed=assignments`).then((result) =>\n      result.json()\n    );\n  },\n  getUsers() {\n    return fetch(`${baseurl}/users`).then((result) => result.json());\n  },\n  getFavorites(userId) {\n    return fetch(\n      `${baseurl}/favoriteRoutes?userId=${userId}&_expand=route`\n    ).then((result) => result.json());\n  },\n  addType(type, newType) {\n    return fetch(`${baseurl}/${type}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(newType),\n    }).then((data) => data.json());\n  },\n  deleteTypeWithId(type, id) {\n    return fetch(`${baseurl}/${type}/${id}`, {\n      method: \"DELETE\",\n    }).then((result) => result.json);\n  },\n};\n"]},"metadata":{},"sourceType":"module"}